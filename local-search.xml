<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>你想要怎样的人生</title>
    <link href="/2024/07/21/%E4%BD%A0%E6%83%B3%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
    <url>/2024/07/21/%E4%BD%A0%E6%83%B3%E8%A6%81%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BA%BA%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp; <em><strong><font color=orange>很小的时候，家里也不怎么有钱，自然是没有什么玩具的。当时最爱的是去邻居哥哥家玩，因为邻居哥哥家的玩具每次都是用好几个大箱子装着的，玩具车，机器人，飞机，哗啦啦倒地上能铺满半个客厅。记得某年过年，大人打麻将去了，自己乱转转到了一个楼道旁，看到一个被扔门口的军绿色坦克，拨动开关，还会播放失真的歌曲以及闪瞎眼的led灯，从此这段记忆深深印在脑海中，大概这算我科技的启蒙时刻吧。</strong></em><br></br><br>&ensp;&ensp;&ensp; <em><strong>小学5&#x2F;6年纪的时候吧，我读书那时候电脑都是大脑袋台式机，进微机房需要套鞋套，屏幕右下放总有个大眼睛回形针瞟来瞟去，那时候从来搞不懂开机为什么要按那么多的按钮，（显示器的，主机的）。</strong></em><br></br><br>&ensp;&ensp;&ensp; <em><strong>后来没多久，大城市早已没人玩的小型收音机，拓麻歌子终于传到了小镇上。我也在别的小朋友的拓麻歌子上见到了正儿八经的电子宠物；也去到附近电子产品店买到几块钱一个的极小化收音机，配合带着耳朵痛的垃圾黑色耳机线，躲在靠窗的桌脚下，一个台一个台的搜索，第一次体会到从“哔哔哔…”到“欢迎收听…”快乐。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>初中时，学了电路知识，我给我妈说我要电烙铁，我要自己点亮一个灯泡。但是第一次焊接经历以我用手来试探烙铁温度最终被烫伤而结束。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>高中时，拆坏过家里面包括但不仅限于洗衣机，外婆家的老式显像管电视机，亲姐的电子词典，长辈淘汰下来的小灵通手机，无一例外，我都能拆，但只能拆一次，因为拆了就再也装不回去了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>大概是高二吧，那时候的高中物理开始讲电路了，讲到了电感电容电阻，也讲计算公式。那时的我觉得自己强的可怕，于是又告诉我妈，我想学修家电，因为我觉得旁边家电维修的师傅特别帅，他的工作台上除了电烙铁和放大镜，还有一堆我叫得上名字和叫不上名字的电器元件，简直是男生心目中的梦中情台。我妈通过一袋香蕉感动了师傅，顺利让我在周末去师傅旁边打下手。我去了一个半天，师傅问我电容有哪些类型？晶振是什么东西？什么叫震荡和滤波？电感型号怎么选？保险丝是什么东西？不出意外的我出意外了，因为我所有问题都一问三不知，当天下午师傅就去找到我妈，说孩子还太小，不合适来学这些。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>也是从那件事开始，我意识到书本和实践的差别，于是我老实了，好好读书了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>高三了，临近高考，当时的我成绩在班里还行。我妈是小镇女人，她表达对孩子关心的方式和城里的家长可能不太一样。在高考前夕，她带我去附近的庙里拜了拜观音（没办法，我们那里地方太小没有文殊菩萨，只能逮哪个拜哪个，反正都是神仙，万一有用呢）祈求考试顺利。结束后，她大概看出了我的考试焦虑，对我说：</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“你不要担心考不好，我已经帮你联系好后路了，正街那个修摩托车的师傅我已经讲好了，一旦你没考上大学你就去他那里当学徒，一样的。”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“…”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>我妈不愧是我妈，典型实用主义。她真是深知任何口头安慰都不如行动来的让人有底气。只是当时的我，真是从来没想过自己会是修摩托车的料。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>高考结束，我上了个破二本，没有如我妈所愿去修摩托车。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>选专业的时候，我问我妈我选啥好，我妈说她也不知道，因为好多专业名字她连连贯读出来都费劲，更不要说理解了。于是我在翻了好几遍志愿手册之后，顺便填了一个“测控技术与仪器专业”，我今天都不理解当时我为啥选这个破专业，也是因为当时的我看上了专业名字里面带的“技术”两个字了吧，觉得有点牛逼。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>顺其自然，我被“测控技术与仪器专业”录取，也是后来才知道，这个专业在我们破学校属于招不满人的，报了就能进…</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>不过我这个人最大的优点也是顺其自然，报了就报了，那就好好学吧。后来学专业课的时候，我很惊喜的发现以前喜欢的“电路分析”，“模拟电子”。“数字电子”，“自动控制”等等都是一些比较重要的专业课。歪打正着，也算是学上儿时的自己梦寐以求的东西了。当时的我在想，也许学完之后，我再回去找家电维修师傅，他也许就不会劝退我了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>不过生活总是事与愿违，也不是说喜欢你就能当饭吃的。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>大学毕业那年双选会，破二本能找到工作就谢天谢地了，还要什么自行车啊？那一年11月，一个破制药国企来我们学校招人，工科出生的我点击就送，顺利成为了厂里的一名名义上的维修工程师。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>大学生刚毕业狗都不如，啥也不会的我每天只知道跟着师傅这里转转，那里转转。师傅给我们秀操作，用浮子开关加接触器做了一个自动排水系统，惊讶的我整个人从上到下都写满了佩服。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>我的师傅对我挺好的，从一股子浸润膏味的维修柜里面翻出来一个祖传军绿色帆布斜挎包，帮我从其他几个师傅手里白嫖了一些螺丝刀，电笔，扳手，端子，电线，祖传万用表。于是我拥有了我人身中的第一个工具包，每天背着它继续跟着师傅屁股后面转来转去，这里拧几个螺丝，那里打两个钉子，跟个吉祥物似的。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>后来，领导不知道哪根筋不对了，觉得我作为一个大学生，真当成个维修电工来用有点亏本，于是突发奇想：</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“你是大学生，不能天天光打螺丝，这样吧，我们厂区配电房的自动电能监控系统就交给你来做了吧。”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“…”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>这种感觉就像，你刚刚学完1+1等于2，领导突然给你说你已经会了，现在去解决原子弹的爆炸临界点的问题吧！</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>不过领导交代的这个事虽然对刚毕业的我很难，但是能受到领导的委以重任还是开心的。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>师傅知道了我要做这个“伟大而艰巨”的任务之后，对我表达了极大的支持。我的师傅是个很厉害的电工，获得过区域工匠那种。但是对于这类自动化的事，他还是显得比较头疼，并表示只能打打下手，但还是会全力支持我。我也不知道我的好师傅除了能帮我抬一下电脑和观察我调试的时候有没有被10KV的高压电电死之外，还能有什么地方可以提供支持。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>那几个月，我就像打了鸡血一样，从啥也不懂到入门。自己去网上搜智能仪表，去搜什么叫485协议，去搜怎么做上位。最后我选定了组态王成为我做scada系统的初体验。摒弃了PLC做中间层，不是因为考虑转接问题，而是那时的我连PLC是个什么玩意儿都说不清楚。那几个月，熬夜学组态王，一点一点的试地址参数怎么填，上百度搜报表怎么做，搞了两个月，终于搞来了demo。连了两个电表，监控了两个230V主电柜，还兼具日报表周报表年报表功能。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>demo出来之后，我和我的师傅都特别开心，师傅说看见我的努力了。我很开心的把结果汇报给了领导。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>领导听了也很开心，不过这个时候的领导脑子已经恢复正常了，他在开心之余对我说：</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“你知道的吧，公司除了你还有一个电气维修工程师，但是我们不需要那么多的电气维修工程师，我们需要你成为机械维修工程师，去车间里面学机械吧”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“可是我不想学机械啊”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“年轻人，你知道吗？很多时候不是你想做什么就能做什么的，你在公司上班，就要听从领导安排”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“可是我还是不喜欢机械啊”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>“…”</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>我回去把这件事和师傅讲了，师傅的回答让我很意外，师傅竟然建议我离开这里，师傅说我还年轻，值得去追求更好的。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>在进入公司一年零十个月之后，我经历了我的第一次离职，我当时的想法是既然公司给不了我想要的未来，那我就自己给自己创造一个想要的未来。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>离开之后，我遵从自己的内心，决定去追寻自己真正喜欢的东西，那是的我还是想要进去电子领域。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>阴差阳错，我还真如愿去到了一个大学微波实验室，自降身价打下手，只为学习电子知识。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>实验室在地下负二楼，没有信号没有wifi，同事们除了一个博士和导师，还有一堆被导师抓来打低价工的研究生。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>坚持了两个月，同事们因为我啥也不懂所以也不爱和我说话，我试图买书自己学习，却发现连从哪里开始学都不知道。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>每天扫实验室，每天帮师兄清点物料，每天把巨型高压电容搬来搬去，每天负责在师兄测试结束后拿个2米的长杆子帮电容放电。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>天天一个人上下班，为了省钱住在学校上世纪修的住宿楼，洗澡要去公共澡堂。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>这些我都坚持下来了。但是第三个月的时候，我问老师为啥不买社保，老师说我们从来不买社保。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>那一刻不知道为什么我突然心灰意冷，觉得自己坚持不下去了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>于是我再一次离职了，裸辞。人生好像失去了方向，不知道未来的路在何方。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>人在失去工作之后焦虑感会明显上升，记得那段时间我的焦虑把我姐都搞烦了，说我一个大男生成天要死不活，不就是失个业吗，又不是天塌下来了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>病急乱投医，我在招聘网上看见要人的就投，也面试了好多叫，最远的面试到崇州市去了，结果依旧是被人嫌弃太菜不合适。后来一家做汽车行业自动化调试的单位邀请我去面试，我当时都记不得我投过他们家没有，不过我还是过去了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>面试上，我说的很直白：我啥都不会，但是我愿意学，工资低点也无所谓，你们要不要我？</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>他们大概真的缺人吧，就把我要了。他们也真的很实诚，我第一年的工资3800&#x2F;月。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>这是一家改变了我未来人生发展方向的公司，由于刚经历了裸辞和微波实验室的不愉快经历，我对这份工作反而特别认真对待，夜班也接受，不会的都愿意自己去学，这次不像微波实验室，自学也能看得懂了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>我去过一汽大众做供应商，也去过沃尔沃做供应商，在一汽大众的时候熬夜研究vas标准，沃尔沃的时候我人在台州，当时的台州7点天亮，4点天黑。但是我基本快2个月没见过台州的太阳，当时看不懂沃尔沃的标准，也看不懂那么复杂的程序，于是等生产下班之后，自己悄悄打开工线，按一下按钮，看一下程序哪个点有反应，这样慢慢入门。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>从那时起，我的人生就进入自动化圈子了，在那家公司之后我学到了一些技术，后面也跳过一些槽，但都是在行业框架下的跳槽。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>如今的我，也在慢慢成长，慢慢的会的多一点了，慢慢的发现自己能独立解决一些问题了，也慢慢的发现自己的解决方案更容易被身边人参考和接纳了。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>这是我要的人生吗？</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>人生还在不断向前，我也在慢慢脱离一线，原来的PLC到现在的高级语言，我还是在不断的学习和成长。当初选了自动化这一条路，那就需要不断学习，不断调整，千万不能停滞不前啊。</strong></em><br></br><br>&ensp;&ensp;&ensp;<em><strong>大概不断是学习和接受新鲜事物，享受解决问题带来的成就感，才是我想要的人生。而学的具体是什么东西，倒是不那么重要了，因为学习本身也是个不断变化的过程。</font></strong></em><br></br></p>]]></content>
    
    
    <categories>
      
      <category>Personal emo moments</category>
      
    </categories>
    
    
    <tags>
      
      <tag>records txt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Say it again</title>
    <link href="/2024/07/21/Say%20it%20again/"/>
    <url>/2024/07/21/Say%20it%20again/</url>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;<strong><font color=brown>人总会在某些时刻突然开始怀念，具体怀念个什么呢也说不请楚，好像就是怀念情绪本身吧。</font></strong> </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>今天早上听到一首歌，叫”和宇宙的温柔关联”。是很温柔的一首歌，：</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>后来再 未见过 那么美的日落</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>天黑了 影子会 消失在路口</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>挥手的 温柔却 仍陪着我 梦游</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>是晚风 是星河 是我的沉默</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>是宇宙坐标闪烁</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>我没说 完的话 统统躲进月色</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>你没牵 住的手 像流星飞过</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>是花开 是叶落 是烟火腾空</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>是我们仍想念着却不再见了</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=green>和宇宙 的温柔 关联着</font></strong>    </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>我时常觉得自己还年轻，但是当时间来到2024的时候，却又实实在在的过30岁了，岁月就是那么的残酷，你觉得时间流逝不知不觉，实际上它是不舍昼夜，当你终于发现端倪的时候，是你突然发现自己秃了 ，胖了，被人喊叔叔了，喜欢怀旧了。</font></strong>   </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>而立之年经历的东西是不一样的，你看到你身边的朋友都结婚了，聚光灯里正装出席的小子竟然这么有模有样，他竟然和当初那个通宵与你网吧熬夜打游戏打到熊猫眼还叼着烟讲着黄段子的傻逼是同一个人。然后突然自己就在想，你是不是也该结婚了。</font></strong> </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>你突发奇想在开车的时候打开电台，突然听到电台小姐姐磁性的声音和久违的老歌，好像回到了上个世纪。你突然想起自己年轻的时候经历过的无线电时代，那个时候的手机还带收音机功能，你会在半夜悄悄听收音机，你会用MP3—首歌单曲循环一整天，你会躲在被窝和暗恋女生发一毛钱一条的短信直到后半夜。</font></strong></p><p>&ensp;&ensp;&ensp;<strong><font color=brown>你偶尔路过公园，篮球场下小伙子们挥汗如雨，但好像总有用不完的体力。</font></strong> </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>你看到某个路边摊，想起刚毕业的自己，自食其力刚挣到钱，没有车贷没有房贷，收养着一只和自己一样渺小的狸花猫。自己点串烧烤的同时也不会忘记给喵小姐带根火腿肠回去</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>你甚至会发现，这么多年了，后来你看过无数次夕阳和日落，你专门去雪山和海岛下看夕阳，但是再也不及读大学时某个并不特殊的日子，你和基友去食堂吃完晚饭出来，旁边的同学人来人往，金色的阳光洋溢在脸上。</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>小时候总想长大，但长大了却常常怀念小时候。小时候的我觉得长大的我无所不能，长大的我才知道自己是那么的平平无奇。小时候觉得长大的我会成为一段传奇，长大的我才知道生活就像宁浩的电影，全是黑色幽默。</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>就像我封笔很多年突然文思泉涌想写点什么，却发现曾经的用最多的微博大概是因为号被偷了，然后账号都给霍霍没了。</font></strong>  </p><p>&ensp;&ensp;&ensp;<strong><font color=brown>就这样吧，不写了，写多了容易EMO。</font></strong></p><p>&ensp;&ensp;&ensp;<strong><font color=brown>一代人终将老去，但总有人正年轻。</font></strong></p>]]></content>
    
    
    <categories>
      
      <category>Personal emo moments</category>
      
    </categories>
    
    
    <tags>
      
      <tag>records txt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo fluid主题折腾</title>
    <link href="/2024/07/21/hexo%20fluid%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE/"/>
    <url>/2024/07/21/hexo%20fluid%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="如何下载fluid主题"><a href="#如何下载fluid主题" class="headerlink" title="如何下载fluid主题"></a>如何下载fluid主题</h2><ul><li>hexo 5.0以上的版本，直接npm安装：<code>npm install --save hexo-theme-fluid</code></li><li>安装好之后，在博客目录下创建<code>_config.fluid.yml</code>,将主题<code>_config.yml</code>的内容复制进去。<font color=green>以后如果修改任何主题配置，都直接修改<code>_config.fluid.yml</code>就好，因为它的配置优先级是高于原<code>_config.yml</code>的。</font></li><li>通过<code>hexo g --debug</code>命令行输出查看覆盖的配置有没有生效</li><li>全部的fluid主题设置在<code>node_modules/hexo_theme_fluid/_config.yml</code>里，把自己想要的修改参数拷贝到<code>_config.fluid.yml</code>中。</li><li>如果主题有更新，使用<code>npm update --save hexo-theme-fluid</code>执行</li><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">fluid官方参考用户手册</a></li></ul><h2 id="创建about-page页"><a href="#创建about-page页" class="headerlink" title="创建about page页"></a>创建about page页</h2><ul><li>使用<code>hexo new page about</code>添加about页。会生成一个默认的<code>index.md</code><br><img src="/img/blog_page/3427087-20240721115553744-1934917841.png"></li><li>index.md的文件实例格式如下，<font color=green>注意<code>layout： about</code>必须存在，且<strong>不能修改成其他值</strong>，否则不显示头像等样式</font><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure></li><li>about页需要的图片资源：官方手册的建议如果是本地图片，<strong>目录文件夹可以自定义，但是必须在source目录下，博客与主题的source目录最终会合并，因此优先选择博客的source，最好图片1MB以内，不然严重拖慢页面加载；指向外站的图片直接放链接。</strong></li><li>存放图片，在source：<br><img src="/img/blog_page/3427087-20240721122720634-2046747144.png"></li><li>about页里面关于介绍自己的基础信息，需要在<code>主题配置</code>设置<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#---------------------------</span><br><span class="hljs-meta"># 关于页</span><br><span class="hljs-meta"># About Page</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-symbol">about:</span><br><span class="hljs-symbol">  enable:</span> true<br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>about_page_pic2.jpg<br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><span class="hljs-symbol">  avatar:</span> <span class="hljs-keyword">/img/</span>avatar.png<br><span class="hljs-symbol">  name:</span> <span class="hljs-string">&quot;一位不愿透露姓名的小村村同学&quot;</span><br><span class="hljs-symbol">  intro:</span> <span class="hljs-string">&quot;生活因你而火热&quot;</span><br>  <span class="hljs-meta"># 更多图标可从 https:<span class="hljs-comment">//hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span></span><br>  <span class="hljs-meta"># More icons can be found from https:<span class="hljs-comment">//hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span></span><br><span class="hljs-symbol">  icons:</span><br>    - <span class="hljs-punctuation">&#123;</span> class: <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, link: <span class="hljs-string">&quot;https://github.com&quot;</span>, tip: <span class="hljs-string">&quot;GitHub&quot;</span> <span class="hljs-punctuation">&#125;</span><br>    - <span class="hljs-punctuation">&#123;</span> class: <span class="hljs-string">&quot;iconfont icon-douban-fill&quot;</span>, link: <span class="hljs-string">&quot;https://douban.com&quot;</span>, tip: <span class="hljs-string">&quot;豆瓣&quot;</span> <span class="hljs-punctuation">&#125;</span><br>    - <span class="hljs-punctuation">&#123;</span> class: <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, qrcode: <span class="hljs-string">&quot;/img/favicon.png&quot;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="如何找到fluid的主题设置"><a href="#如何找到fluid的主题设置" class="headerlink" title="如何找到fluid的主题设置"></a>如何找到fluid的主题设置</h2><ul><li>navbar，添加博客标题<figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attribute">navbar</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attribute">blog_title</span><span class="hljs-punctuation">:</span> <span class="hljs-string">一位不愿透露姓名的小村村同学的个人博客</span><br></code></pre></td></tr></table></figure></li><li>banner_img：添加背景图片<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">index</span>:<br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  banner_img: <span class="hljs-regexp">/img/</span>first_page_bg1.png<br></code></pre></td></tr></table></figure></li><li>slogan添加标语<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br><span class="hljs-comment"># Independent config of home page subtitle</span><br><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;一代人终将老去，但总有人正年轻&quot;</span><br></code></pre></td></tr></table></figure></li><li>添加打字机效果<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 一些好玩的功能</span><br><span class="hljs-comment"># Some fun features</span><br><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>  <span class="hljs-comment"># Typing animation for subtitle</span><br>  <span class="hljs-attr">typing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span><br><br>    <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-comment"># Cursor character</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span><br><br>    <span class="hljs-comment"># 是否循环播放效果</span><br>    <span class="hljs-comment"># If true, loop animation</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 在指定页面开启，不填则在所有页面开启</span><br>    <span class="hljs-comment"># Enable in specified page, all pages by default</span><br>    <span class="hljs-comment"># Options: home | post | tag | category | about | links | page | 404</span><br>    <span class="hljs-attr">scope:</span> []<br></code></pre></td></tr></table></figure></li><li>用不蒜子展示网站的PV,UV数，因为不蒜子不用注册直接使用；把enable使能为true<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br><span class="hljs-comment"># Display website PV and UV statistics</span><br><span class="hljs-attr">statistics:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>  <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>  <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>  <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br>  <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>  <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="文章页操作"><a href="#文章页操作" class="headerlink" title="文章页操作"></a>文章页操作</h2><ul><li>文章排序<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure></li><li>封面图<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure></li><li>统一所有封面图，在主题配置中设置<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  default_index_img:</span> <span class="hljs-keyword">/img/</span>example.jpg<br></code></pre></td></tr></table></figure></li><li>文章页大标题下的信息<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  meta:</span><br><span class="hljs-symbol">    author:</span>  <span class="hljs-meta"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">    date:</span>  <span class="hljs-meta"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-meta"># 格式参照 ISO-8601 日期格式化</span><br><span class="hljs-symbol">    wordcount:</span>  <span class="hljs-meta"># 字数统计</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-meta"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br><span class="hljs-symbol">    min2read:</span>  <span class="hljs-meta"># 阅读时间</span><br><span class="hljs-symbol">      enable:</span> true<br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br><span class="hljs-symbol">    views:</span>  <span class="hljs-meta"># 阅读次数</span><br><span class="hljs-symbol">      enable:</span> false<br><span class="hljs-symbol">      source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-meta"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br><span class="hljs-symbol">      format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br></code></pre></td></tr></table></figure></li><li>评论功能推荐Valin,现在<code>主题配置</code>中把使能打开，再在<code>front-matter</code>中设置。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span><br>  <span class="hljs-attr">appKey:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">comment:</span> <span class="hljs-string">&#x27;valine&#x27;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="文章分类和标签"><a href="#文章分类和标签" class="headerlink" title="文章分类和标签"></a>文章分类和标签</h2><ul><li>分类和标签最终都需要在front-master中实现，<a href='https://hexo.io/zh-cn/docs/front-matter'>参考文档</a>，不过再次之前还是先新建一个分类页和一个标签页，以免点不进去。</li><li>新建分类页<code>hexo new page categories</code>，标签页<code>hexo new page tags</code>，成功后会生成对应的<code>index.md</code></li><li>分别在对应的在index.md中添加分类&#x2F;标签以下内容<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-07-21 14:09:44</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标签</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-07-21 14:09:54</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li><li>在博客文章的front-master中，添加相应的内容；<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">西门子PLC的大端模式</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">PLC</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">1500PLC</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">PLC</span> <span class="hljs-string">part</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">industrial</span> <span class="hljs-string">control</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure></li><li>上面会生成PLC分类下的子分类1500PLC,以及两个标签。<font color=green>注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</font></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git application</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】markdown语法基础</title>
    <link href="/2024/07/21/markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/21/markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>markdown基础知识练习汇总。</p><h2 id="1-字体大小"><a href="#1-字体大小" class="headerlink" title="1.字体大小"></a>1.字体大小</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级字体<br>## 二级字体<br>### 三级字体<br>#### 四级字体<br>##### 五级字体<br>###### 六级字体<br></code></pre></td></tr></table></figure><h2 id="2-加粗"><a href="#2-加粗" class="headerlink" title="2.加粗"></a>2.加粗</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**字体加粗**</span><br></code></pre></td></tr></table></figure><h2 id="3-斜体"><a href="#3-斜体" class="headerlink" title="3.斜体"></a>3.斜体</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体字体*</span><br></code></pre></td></tr></table></figure><h2 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.删除线</h2><h2 id="字体删除线-字体删除线-5-引用-引用用法-引用用法-引用用法-6-分割线"><a href="#字体删除线-字体删除线-5-引用-引用用法-引用用法-引用用法-6-分割线" class="headerlink" title="字体删除线~~字体删除线~~ ## 5.引用&gt;引用用法&gt;&gt;引用用法&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用用法## 6.分割线"></a><del>字体删除线</del><br><code>~~字体删除线~~ </code><br>## 5.引用<br>&gt;引用用法<br>&gt;&gt;引用用法<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用用法<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">引用用法</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;引用用法</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;引用用法</span><br></code></pre></td></tr></table></figure><br>## 6.分割线</h2><hr><hr><hr><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><br><span class="hljs-section">----</span><br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span><span class="hljs-strong">***</span>*<br></code></pre></td></tr></table></figure><h2 id="7-图片url"><a href="#7-图片url" class="headerlink" title="7.图片url"></a>7.图片url</h2><p><img src="/..%5C1_picture_lib%5Cpic.png" alt="图片注释" title="图片标题"></p><p><code>![图片注释]( ..\1_picture_lib\pic.png &quot;这是图片标题&quot;)</code><br><code>![注释](地址 &#39;&#39;标题&#39;&#39;)</code></p><blockquote><p>注释就是显示在图片下面的文字，相当于对图片内容的解释。解释可加可不加<br>标题是图片的标题，当鼠标移到图片上时显示的内容。标题可加可不加</p></blockquote><h2 id="8-超链接"><a href="#8-超链接" class="headerlink" title="8.超链接"></a>8.超链接</h2><p><a href="http://baidu.com/">百度</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span><br></code></pre></td></tr></table></figure><h2 id="9-无序列表"><a href="#9-无序列表" class="headerlink" title="9.无序列表"></a>9.无序列表</h2><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-有序列表"><a href="#10-有序列表" class="headerlink" title="10.有序列表"></a>10.有序列表</h2><ol><li>列表内容</li><li>列表内容</li><li>列表内容<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 列表内容<br><span class="hljs-bullet">2.</span> 列表内容<br><span class="hljs-bullet">3.</span> 列表内容<br></code></pre></td></tr></table></figure></li></ol><h2 id="11-列表嵌套"><a href="#11-列表嵌套" class="headerlink" title="11.列表嵌套"></a>11.列表嵌套</h2><ul><li>一级无序列表<ul><li>二级无序列表<ul><li>三级无序列表</li></ul></li></ul></li><li>一级无序列表<ol><li>二级有序列表</li><li>二级有序列表<ul><li>三级无序列表</li><li>三级无序列表</li></ul></li><li>二级有序列表<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 一级无序列表<br><span class="hljs-bullet">   -</span> 二级无序列表<br><span class="hljs-bullet">      -</span> 三级无序列表<br><span class="hljs-bullet">-</span> 一级无序列表<br><span class="hljs-bullet">   1.</span> 二级有序列表<br><span class="hljs-bullet">   2.</span> 二级有序列表<br><span class="hljs-bullet">      -</span> 三级无序列表<br><span class="hljs-bullet">      -</span> 三级无序列表<br><span class="hljs-bullet">   3.</span> 二级有序列表<br></code></pre></td></tr></table></figure><blockquote><p>.上一级和下一级列表之间<code>空三个空格</code></p></blockquote></li></ol></li></ul><h2 id="12-表格"><a href="#12-表格" class="headerlink" title="12.表格"></a>12.表格</h2><table><thead><tr><th align="left">表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td align="left">文字居左</td><td align="center">文字居中</td><td align="right">文字居右</td></tr></tbody></table><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">|表头|表头|表头|<br>|<span class="hljs-symbol">:---|</span><span class="hljs-symbol">:---</span><span class="hljs-symbol">:|---</span><span class="hljs-symbol">:|</span><br>|文字居左|文字居中|文字居右|<br></code></pre></td></tr></table></figure><blockquote><p>第二行分割表头和内容<br>-两边加：表示文字居中<br>-右边加：表示文字居右</p></blockquote><h2 id="13-代码"><a href="#13-代码" class="headerlink" title="13.代码"></a>13.代码</h2><p><code>代码</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">代码块<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`代码`<br>(```)<br>代码块<br>(```)<br></code></pre></td></tr></table></figure><blockquote><p>小括号防止转译</p></blockquote><h2 id="14-混编HTML"><a href="#14-混编HTML" class="headerlink" title="14.混编HTML"></a>14.混编HTML</h2><ul><li><p><font face="黑体">字体黑体</font><br><code>&lt;font face=&quot;黑体&quot;&gt;字体黑体&lt;/font&gt;</code></p></li><li><p><small>比默认小一号</small><br><code>&lt;small&gt;比默认小一号&lt;/small&gt;</code></p></li><li><p><big>比默认大一号</big><br><code>&lt;big&gt;比默认大一号&lt;/big&gt;</code></p></li><li><p><font size=4>字体大小</font><br><code>&lt;font size=4&gt;字体大小&lt;/font&gt;</code></p></li><li><p><font color=red>红色</font><br><code>&lt;font color=red&gt;红色&lt;/font&gt;</code></p></li><li><p><span style="background-color:#D3D3D3">16进制RGB</span><br><code>&lt;span style=&quot;background-color:#D3D3D3&quot;&gt;16进制RGB&lt;/span&gt;</code></p></li><li><p>H<sub>2</sub>O+X<sub>1</sub>+X<sup>2</sup><br><code>H&lt;sub&gt;2&lt;/sub&gt;O+X&lt;sub&gt;1&lt;/sub&gt;+X&lt;sup&gt;2&lt;/sup&gt;</code></p></li><li><p>文本<u>添加下划线</u><br><code>文本&lt;u&gt;添加下划线&lt;/u&gt;</code></p></li><li><p>文本添加上划线</p></li><li><p><span style="text-decoration:overline;">RESET</span>信号<br><code>&lt;span style=&quot;text-decoration:overline;&quot;&gt;RESET&lt;/span&gt;信号</code></p></li><li><p>用<code>width</code>和<code>height</code>来固定图片大小<img width=256 height=128 src="http://..//pic.png"><br><code>&lt;img width=256 height=128 src=&quot;http://..//pic.png&quot;&gt;</code></p></li><li><p>图片居中用<code>&lt;div&gt;</code>和<code>align</code>实现<div align="center"><img src="http://..//pic.png"></p></li></ul><p><code>&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://..//pic.png&quot;&gt;</code></p><blockquote><p>markdown默认图片居左</p></blockquote><ul><li>图片下方加标注<center><img width=256 height=128 src="http://..//pic.png">图片标注</center></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">256</span> <span class="hljs-attr">height</span>=<span class="hljs-string">128</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://..//pic.png&quot;</span>&gt;</span><br>图片标注<br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>特殊符号<br><a href="https://www.w3school.com.cn/charsets/ref_html_symbols.asp">HTML符号参考地址</a></p></li><li><p>html表格</p><table> <tr>    <td>A1</td>    <td>A2</td></tr> <tr>    <td>B1</td>    <td>B2</td></tr></table></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>A1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>A2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>B1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>B2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>内联CSS<p style="color:red">嵌套CSS</p></li></ul><p><code>&lt;p style=&quot;color:red&quot;&gt;嵌套CSS&lt;/p&gt;</code></p><ul><li>表单</li></ul><form action="#">    <label for="name">姓名:</label>    <input type="text" id="name" name="name"><br><br>    <input type="submit" value="提交"></form><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;#&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">label</span> <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;姓名:&lt;/<span class="hljs-keyword">label</span>&gt;<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;name&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;<span class="hljs-keyword">br</span>&gt;&lt;<span class="hljs-keyword">br</span>&gt;<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>内嵌视频<iframe width="256" heigth="128" src="http://..//pic.png" frameborder="0" allowfullscreen></iframe></li></ul><p><code>&lt;iframe width=&quot;256&quot; heigth=&quot;128&quot; src=&quot;http://..//pic.png&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</code></p><ul><li>内嵌按钮<br><button type="button" onclick="alert('Hello World!')">点击这里</button></li></ul><p><code>&lt;button type=&quot;button&quot; onclick=&quot;alert(&#39;Hello World!&#39;)&quot;&gt;点击这里&lt;/button&gt;</code></p><ul><li>锚点<h2 id="section">输出一行文字</h2></li></ul><p><a href="#section">转到上面一行文字</a></p><p><a href="www.baidu.com">访问百度</a></p><p><a href="url地址" title="url标题">url连接显示名</a></p><a href="www.baidu.com"><img border="0" alt="test" src="my_picture.png" width="256" height="128"></a><p><a href="tel:+861234567879">tel:+86 123 456 789</a></p><p><a href="javascript:alter('hello');">javascript脚本</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">#定位到指定位置<br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;section&quot;</span>&gt;</span>输出一行文字<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#section&quot;</span>&gt;</span>转到上面一行文字<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>#链接地址<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>访问百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>#链接格式<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;url标题&quot;</span>&gt;</span>url连接显示名<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>#链接到引用地址的图片<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;my_picture.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;256&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;128&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>#链接到电话<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:+861234567879&quot;</span>&gt;</span>tel:+86 123 456 789<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>#链接到js脚本<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alter(&#x27;hello&#x27;);&quot;</span>&gt;</span>javascript脚本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="15-update"><a href="#15-update" class="headerlink" title="15.update"></a>15.update</h2><ul><li>在markdown中合并单元格，markdown本身不提供这个方法，可以用html实现<ul><li>用<code>rowspan</code>和<code>colspan</code>实现合并单元格</li><li>用<code>align</code>和<code>valign</code>实现居中对对齐。放table就控制整个表，放<tr>控制整个行，放<td>控制单元格的对齐</li><li><code>bgcolor</code>用来控制颜色，比如<code>bgcolor=&quot;yellow&quot;</code></li></ul></li></ul><table align="center" valign="center">   <tr align="center" valign="center">      <th>H1</th>      <th>H2</th>      <th>h3</th>   </tr>   <tr align="center" valign="center">      <td>r1,c1</td>      <td bgcolor="yellow">r1,c2</td>      <td>r1,c3</td>   </tr>   <tr align="center" valign="center">      <td rowspan="2">rowspan</td>      <td>r2,c2</td>      <td>r2,c3</td>   </tr>   <tr align="center" valign="center">      <td colspan="2">r3,c2</td>   </tr></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>H1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>H2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>h3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>r1,c1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;yellow&quot;</span>&gt;</span>r1,c2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>r1,c3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>rowspan<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>r2,c2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>r2,c3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>r3,c2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://www.w3school.com.cn/tags/att_a_href.asp">html基础知识，连接到W3school</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Front-end application</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多路复用在HMI上的使用</title>
    <link href="/2024/07/21/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%9C%A8HMI%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/21/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%9C%A8HMI%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这里主要是利用多路复用在HMI上做到单页面切换IO变量的功能，对于系统中要显示的IO数量很多的时候适用。<br>系统搭建:CPU1215+KTP900系列HMI<br>方法如下：</p><h2 id="1-画面模板"><a href="#1-画面模板" class="headerlink" title="1. 画面模板"></a>1. 画面模板</h2><p>建立如下元素</p><ul><li>复选文本框</li><li>状态指示器（小圆点）</li><li>符号IO域<br>如图：<br><img src="/img/blog_page/3427087-20240414103428153-380014970.png"><blockquote><p>.在画面中我对输入和输出分别做了一组IO画面。<br>.符号IO域显示的默认文本来自文本列表<br>.此处有16路输入（IW）和16路输出(QW);对应了总共32个小圆点和32个符号IO域。</p></blockquote></li></ul><h2 id="2-文本列表的建立"><a href="#2-文本列表的建立" class="headerlink" title="2. 文本列表的建立"></a>2. 文本列表的建立</h2><p>在文本列表中，需要新建的文本列表一共4组，分别对应输入复选框，输入IO显示；输出复选框，输出IO显示。</p><ul><li><p>输入输出文本列表框如下：<br><img src="/img/blog_page/3427087-20240414104316944-1747876227.png"><br><img src="/img/blog_page/3427087-20240414104337412-767031856.png"></p><blockquote><p>问：为什么值是0，2，4，6，8..？<br>.答：（因为我是用的IW显示的，一个word占用了两个字节）。<br>.又问：为什么这个值就一定是连续的，它不可以是随心所欲的吗？(毕竟我的注释内容里的地址就不连续)<br>.答：看到后面就知道了，后面会解释。</p></blockquote></li><li><p>输入输出注释文本列表如下：<br><img src="/img/blog_page/3427087-20240414104754255-403894954.png"><br><img src="/img/blog_page/3427087-20240414104820312-307356034.png"><br>这里需要把你的符号表的注释全部导入过来，换句话说，只要你的符号表写的够详细和完整，这里就只是Ctrl+C&#x2F;Ctrl+V的事。</p></li></ul><h2 id="3-建立HMI变量"><a href="#3-建立HMI变量" class="headerlink" title="3. 建立HMI变量"></a>3. 建立HMI变量</h2><ul><li><p>为你之前建立的符号IO域分配相应的变量<br><img src="/img/blog_page/3427087-20240414105846760-76693431.png"></p><blockquote><p>.16组input16组output对应了最开始画面里面橘黄色的文本所使用的变量。</p></blockquote></li><li><p>建立地址变量以及多路复用变量<br><img src="/img/blog_page/3427087-20240414110150208-2041560415.png"></p><blockquote><p>.要把访问模式改成&lt;绝对访问&gt;，符号访问是用不了多路复用的。<br>.有心人或许会发现，我这里用的是DB而不是直接用的IW&#x2F;QW。这是因为IW&#x2F;QW在实际工程中可能不是连续增长的（比如0，2，4，6，8，10..）。毕竟你接到的祖传代码中IO地址可能是放飞自我的，这就需要你多做一步工作，就是把IO全部按照你想要的规则映射（说成序列化也行）到你的DB地址中，然后注释依旧按照实际的IO地址去注释。</p></blockquote></li></ul><h2 id="4-变量计算方法"><a href="#4-变量计算方法" class="headerlink" title="4.变量计算方法"></a>4.变量计算方法</h2><p>我们都知道，在PLC中,一个byte是8个bit。一个word是2个byte。</p><ul><li><p>复选文本框的变量连接：<br><img src="/img/blog_page/3427087-20240414114646732-1335841086.png"><br><img src="/img/blog_page/3427087-20240414114702824-1100695733.png"></p><blockquote><p>.uint类型的I_Address和Q_Addres分别连接到输入和输出的文本列表（就是0，2，4，6，8..连续变化那个）</p></blockquote></li><li><p>I_Address和Q_Addres的变量线性缩放：<br><code>Y = aX + b</code></p><blockquote><p>.Y表示in&#x2F;out文本（橘色那个）<br>.X表示 I_Address或Q_Addres<br>.b表示bit。</p></blockquote></li></ul><p>缩放截图如下：<br><img src="/img/blog_page/3427087-20240414115623051-443504858.png"></p><blockquote><p>.这个缩放主要是为了把地址映射给文本注释（细节：你发现变量的注释文本列表下标是0123456的顺序增长的了吗？）<br>.uint类型占16个bit,所以你的线性缩放一共16次，当b&#x3D;15的时候就可以了。</p></blockquote><h2 id="5-连接变量"><a href="#5-连接变量" class="headerlink" title="5.连接变量"></a>5.连接变量</h2><p>在画面中，需要把你的元素和对应的变量连接起来。</p><ul><li>文本复选框变量连接<br><img src="/img/blog_page/3427087-20240414120220097-1354930445.png"></li></ul><blockquote><p>.这个就不讲了，上面刚讲完</p></blockquote><ul><li><p>符号IO域的变量连接<br><img src="/img/blog_page/3427087-20240414120332705-710343322.png"></p><blockquote><p>.文本内容来自文本列表<br>.变量值是刚刚上面的线性缩放计算出来的<br>.QW同理，只是input变成output</p></blockquote></li><li><p>小圆点指示器的变量连接<br><img src="/img/blog_page/3427087-20240414120607258-793288325.png"></p><blockquote><p>.输入引用I_Adderss,输出引用Q_Adderss<br>.单个位，注意我为什么I0.0是从8开始的。这里涉及到大端模式和小端模式的概念，具体概念可以百度解释。<br>.西门子PLC采用大端模式，仅字节调换，位的顺序不变。</p></blockquote></li></ul><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>由上，这就是多路复用在HMI上的一种用法，当然也有一些其他用法，但是万变不离其宗。好像在博图V19之后，在PLC内部也可以使用IO做多路复用了（未求证，不保真…）</p>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>HMI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HMI</tag>
      
      <tag>industrial control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过wireshark简单了解S7协议</title>
    <link href="/2024/07/21/%E9%80%9A%E8%BF%87wireshark%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3S7%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/07/21/%E9%80%9A%E8%BF%87wireshark%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3S7%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>一方面本着学习wireshark的使用，一方面对S7协议想有一个更深入一点的了解。</p><h2 id="1-建立连接过程："><a href="#1-建立连接过程：" class="headerlink" title="1.建立连接过程："></a>1.建立连接过程：</h2><p><img src="/img/blog_page/3427087-20240412203740658-1056837989.png" alt="re"><br>一边是IPC，一边是PLC。<br>本着学习的态度，这里简单说明一下S7通信协议簇在ISO模型中的一个示意：</p><table><thead><tr><th>OSI layers</th><th>Protocol</th></tr></thead><tbody><tr><td>7 APPlication Layer</td><td>S7 communication</td></tr><tr><td>6 Presentation Layer</td><td>COTP(S7 communication)</td></tr><tr><td>5 Session Layer</td><td>TPKT(S7 communication)</td></tr><tr><td>4 Transport Layer</td><td>ISO-on-TCP</td></tr><tr><td>3 Network Layer</td><td>IP</td></tr><tr><td>2 Data Link Layer</td><td>Ethernet</td></tr><tr><td>1 Physical Layer</td><td>Ethernet</td></tr></tbody></table><p>第1-4层是由计算机自己完成的（底层驱动）。<br>现在从Frame2-Frame4开始逐帧分析：</p><ul><li><p>物理层数据帧:<br><img src="/img/blog_page/3427087-20240412210730787-1943484678.png"><br>这一行给出了物理层信息，其中没有中括号的是数据报文本身提取的一些信息，带有中括号的是根据报文整体的分析给出的辅助信息，虽然报文本身并不包含这些字段信息。</p><blockquote><p>.Frame 2: 66 bytes on wire (528 bits), 66 bytes captured (528bits)   2号帧，线路66字节，实际捕获528bits<br>.Encapsulation type: Ethernet (1) #封装类型，表示以太网的链路<br>.Arrival Time:  捕获日期和时间（中国标准时间）<br>.[Time shift for this packet: 0.000000000 seconds]<br>.Epoch Time: 绝对时间秒数（和前一种是不同的表达方式）<br>.[Time delta from previous captured frame: xx seconds]    此包与前一包时间间隔<br>.[Time delta from previous displayed frame: xx seconds]<br>.[Time since reference or first frame: xx seconds]    此包与第一个帧的时间间隔<br>.Frame Number: 2   帧序号<br>.Frame Length: 66 bytes (528 bits)    帧长度，数据的长度，是根据协议这种类格式中length所得到的长度，和后面的Capture Length长度是不同的。<br>.Capture Length: 66 bytes (528 bits)    在网卡上实际捕获的数据帧长度。通常情况下Frame Length和Capture Length 是相同的，但是如果Capture Length所捕获的数据有缺失，则Capture Length要比Frame Length要小一些。<br>.[Frame is marked: False]     此帧是否做了标记：否<br>.[Frame is ignored: False]<br>.[Protocols in frame: eth:ethertype:ip:tcp]   帧内封装的协议层次结构<br>.[Coloring Rule Name: HTTP]   用不同颜色的染色标记的协议名称：HTTP<br>.[Coloring Rule String: http || tcp.port &#x3D;&#x3D; 80 || http2]    染色显示规则字符串</p></blockquote></li><li><p>Transmisssion control protocol<br><img src="/img/blog_page/3427087-20240412213821395-254230614.png"></p></li></ul><p>这一行描述的传输控制协议,这里主要做一下名词解释</p><blockquote><p>.Source port:源端口51664<br>.Destination port:目的端口102<br>.Flags:0x002(SYN):表示表示建立连接。拓展一下，FIN表示关闭连接，ACK表示响应，PSH表示由DATA数据传输，RST表示连接重置。</p></blockquote><ul><li>TCP connect<br><img src="/img/blog_page/3427087-20240412214359568-2083149726.png"><br>这三行，注意右边的info,他们表示经典的了TCP的三次握手过程。<blockquote><p>.Seq为序号，等下描述握手的时候会再讲到它<br>.Ack为确认号，也是个重要参数<br>.Win&#x3D;64240表示窗口大小，理解为允许对方发送的最大数据量<br>.Len&#x3D;0表示TCP数据部分长度<br>.MSS&#x3D;1460表示最大报文长度<br>.WS&#x3D;256表示窗口的放大倍数<br>.SACK_PERM表示通信双方均支持SACK机制</p></blockquote></li></ul><p>TCP采用三次握手来建立一个连接，其过程如下：<br><code>第一次握手：主机A发送标志位SYN=1，主机B由SYN状态知道A要求建立连接,当前主机A的Sequence number=0，Acknowledgment number=0</code><br><code>第二次握手：主机B收到请求后，Sequence number=0，Acknowledgment number=1，主机B的SYN=1,ACK=1</code><br><code>第三次握手：主机A检查Acknowledgment number=1是否正确，以及ACK=1是否正确。主机B收到Seq值和Ack=1时表示连接建立成功</code><br><code>完成三次握手，主机A和主机B开始传数据</code></p><h2 id="2-COTP协议"><a href="#2-COTP协议" class="headerlink" title="2. COTP协议"></a>2. COTP协议</h2><p>COTP协议的全称是connection-Oriented Transport Protocol,面向连接的传输协议。顾名思义，他必然是依赖连接的，所以在传输之前必然要先有类似TCP握手建立连接的过程的。<br>这里还是直接截图逐帧分析，概念光说太抽象：<br><img src="/img/blog_page/3427087-20240412223632243-27706838.png"><br>注意看，两个COTP包里面，wireshark已经为我们标注出CR和CC，其实这里的CR就是connect request,CC就是connect confirm。一个表示请求连接，一个表示确认连接。这就是一个建立连接的过程。<br>其实在建立连接之后，还跟一个DT包，这个就是DATA的意思，表示在发送数据。<br>对于COTP而已，它的包有两种形态，叫做COTP连接包（COTP connection package）和COTP功能包(COTP function package)。<br>先来看看COTP连接包的几个关键参数：<br><img src="/img/blog_page/3427087-20240412225113494-311462876.png"></p><blockquote><p>.Length:数据的长度，不包括length这个字段本身（和profinet里面定义字段长度的风格一样）<br>.PDU type:这里是标志类型，0x0e就表示连接请求，我会在后面把PDU的常见类型码例举出来。<br>.Destination reference:目标的引用，可以认为是用来唯一标志目标的<br>.Source reference:源的引用，可以认为是用来唯一标志目标的<br>.Option:占用1byte,高4位是标志类别class,倒数第二位是拓展样式，倒数第一位表示是否有明确的指定流控制。<br>.Parameter:附加的参数字段，每个参数又有几个字段构成。字段code&#x3D;0xC0表示tpdu-size，就是数传数据的大小；code&#x3D;0xC1表示src-tsap；code&#x3D;0xC2表示dst-tsap<br>.TSAP:一般在西门子里面，TSAP表示的是连接资源的地址，有两个，一个是Local tsap，表示采集程序的地址，一个是Remote tsap,大概相当于PLC的地址。所以从这个解释来看，code的tsap参数可能是表示的源和目标的地址。</p></blockquote><p>对于COTP功能包而已，其实好像没啥看的，具体也就那么些东西：<br><img src="/img/blog_page/3427087-20240412235712473-299747324.png"></p><blockquote><p>.length:长度<br>.PDU type:标志类型<br>.Option:第一位标志是否是最后一个包（从这看出来COPT协议当数据较多的时候会拆开来做单元传输），后面7个位表示的是TPDU的number.</p></blockquote><p>现在开始分别贴一下COTP连接包和功能包的PDU TYPE吧：</p><ul><li>COTP连接包</li></ul><table><thead><tr><th>Code</th><th>info</th></tr></thead><tbody><tr><td>0x1</td><td>ED Expedited data,加急数据</td></tr><tr><td>0x2</td><td>EA Expedited data acknowledgement,加急数据确认</td></tr><tr><td>0x4</td><td>UD,用户数据</td></tr><tr><td>0x5</td><td>RJ Reject,拒绝</td></tr><tr><td>0x6</td><td>AK Data acknowledgement,数据确认</td></tr><tr><td>0x7</td><td>ER TPDU Error,TPDU错误</td></tr><tr><td>0x8</td><td>DR Disconnect Request,断开请求</td></tr><tr><td>0xC</td><td>DC Disconnect Confirm,断开确认</td></tr><tr><td>0xD</td><td>CC Connect Confirm,连接确认</td></tr><tr><td>0xE</td><td>CR Connect Request,连接请求</td></tr><tr><td>0xF</td><td>DT data,数据传输</td></tr></tbody></table><ul><li>COTP功能包（其实和上面是一样的）</li></ul><table><thead><tr><th>Code</th><th>info</th></tr></thead><tbody><tr><td>0x1</td><td>ED Expedited data,加急数据</td></tr><tr><td>0x2</td><td>EA Expedited data acknowledgement,加急数据确认</td></tr><tr><td>0x4</td><td>UD,用户数据</td></tr><tr><td>0x5</td><td>RJ Reject,拒绝</td></tr><tr><td>0x6</td><td>AK Data acknowledgement,数据确认</td></tr><tr><td>0x7</td><td>ER TPDU Error,TPDU错误</td></tr><tr><td>0x8</td><td>DR Disconnect Request,断开请求</td></tr><tr><td>0xC</td><td>DC Disconnect Confirm,断开确认</td></tr><tr><td>0xD</td><td>CC Connect Confirm,连接确认</td></tr><tr><td>0xE</td><td>CR Connect Request,连接请求</td></tr><tr><td>0xF</td><td>DT data,数据传输</td></tr></tbody></table><h2 id="3-TPKT协议"><a href="#3-TPKT协议" class="headerlink" title="3. TPKT协议"></a>3. TPKT协议</h2><p>TPKT叫做transport service ontop of the TCP。顾名思义，就是在TCP之上的传输服务，它是为了在TCP和COTP之间建立桥梁的。其实在讲COTP之前应该先讲TPKT的。<br>TPKT一般和COTP一起发送，当作COTP的header段。<br>下面贴个图，这个结构很简单没什么好讲的：<br><img src="/img/blog_page/3427087-20240412233505015-647695466.png"></p><blockquote><p>.version:版本号<br>.reserved:保留<br>.length:总长度</p></blockquote><h2 id="4-S7-communication协议"><a href="#4-S7-communication协议" class="headerlink" title="4. S7 communication协议"></a>4. S7 communication协议</h2><p>终于讲到S7COMN了，这对于我来说是个很神奇的黑科技。因为我就是通过它直接读到了PLC数据的绝对地址。<br>S7COMM协议包含3个部分：</p><ul><li>Header</li><li>Parameter</li><li>Data</li></ul><p>先讲Header,格式如下：</p><table><thead><tr><th>Protocol ID</th><th>PDU TYPE</th><th>reserved</th><th>PDU reference</th><th>param length</th><th>data length</th><th>error class</th><th>error code</th></tr></thead></table><p>贴图如下，逐一解释：<br><img src="/img/blog_page/3427087-20240413000414793-1524140916.png"></p><blockquote><p>.Protocol ID:协议ID，通常就是0x32<br>.ROSCTR:常用的几个：&#x3D;0x01,表示JOB，作业请求；&#x3D;0x02,表示ACK，确认响应；&#x3D;0x03,表示ACK_DATA，确认数据响应；&#x3D;0x07,表示USERDATA，原始协议的拓展（像啥安全功能，时间设置，循环读取..）；<br>.Redundancy identification(reserved):冗余数据，通常就是0x0000<br>.Protocol data unit reference:协议数据单元参考，通过请求时间增加<br>.param length:参数长度<br>.data length:数据长度，如果是PLC内部数据就是0x0000,对于其他功能，就是Data部分的长度。</p></blockquote><p>其中最重要的就是ROSCTR,它决定了后续参数的结构。<br>比如在Job中的结构：<br><img src="/img/blog_page/3427087-20240413001502091-1272970033.png"><br>又比如在ACK_Data中的结构：<br><img src="/img/blog_page/3427087-20240413001533101-1499371587.png"><br>你看出区别来了吗？</p><p>继续讲Parameter，这个比较复杂多变。在PDU类型是Job和ACK时格式如下：</p><table><thead><tr><th>function code</th><th>reserved</th><th>Max AmQ calling</th><th>Max AmQ called</th><th>PDU length</th></tr></thead></table><p>job：<br><img src="/img/blog_page/3427087-20240413002349198-666858195.png"><br>ack_data：<br><img src="/img/blog_page/3427087-20240413002403731-1772660387.png"></p><p>当PDU类型是Job时参数为Read Var[0x40]格式如下:</p><table><thead><tr><th>function</th><th>item count</th><th>item 1</th><th>…</th><th>item n</th></tr></thead></table><p>其中item的格式又如下：</p><table><thead><tr><th>specification type</th><th>length</th><th>syntax ID</th><th>transport sizes</th><th>request data length</th><th>DB number</th><th>Area</th><th>Adderss</th></tr></thead></table><p>还是截图说吧，看格式有点抽象：<br><img src="/img/blog_page/3427087-20240413003227257-169259647.png"></p><blockquote><p>.Variable specification:确定项目结构的主要类型，通常就是0x12<br>.Length of following address specification，本Item其余部分的长度<br>.Syntax Ids of variable specification，确定寻址模式和其余项目结构的格式<br>.Transport sizes in item data，确定变量的类型和长度<br>.Request data length，请求的数据长度<br>. DB number，DB模块的编号，如果访问的不是DB区域，此处为0x0000<br>.Area，区域类型</p></blockquote><p>上面说的是当PDU为Job时，S7COMMN的结构，那当PDU为ACK_DATA时结构又是怎么样的呢？我们不说虚的，直接截图：<br><img src="/img/blog_page/3427087-20240413003821245-1166548826.png"><br>是的，其Parameter只有function、item count两个字段。<br>继续，那么接下来的是Data啦！</p><blockquote><p>.Return code，返回代码<br>.Transport size，数据的传输尺寸<br>. Length，数据的长度</p></blockquote><p>当值写入Write Var[0x50]的时候，其实情况和Read Var的时候差不多。这里就不多赘述了，用wireshark一抓就知道了。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>对于整个S7协议簇在ISO七层网络架构里面的分类其实很简单了，格式如下：</p><table><thead><tr><th>Ethernet</th><th>Ip</th><th>TCP</th><th>TPKT</th><th>ISO-COTP</th><th>S7COMM</th></tr></thead></table><p>截图说明会更直观：<br><img src="/img/blog_page/3427087-20240413004638155-1196505560.png"><br>我的S7协议简单分析就到这里就结束了，全当是个人学习和总结记录。本文讲的都是走马观花，往深了讲的话每一个参数和功能码类型都有很多的东西，这个时候就需要去看S7的手册和文档了。<br>我比较喜欢一个看法，对技术要有敬畏之心，每一门技术都是无数聪明的脑子共同呈现的结果，我们站在巨人的肩膀上，我们无时无刻不在追逐前人的步伐。<br>学无止境。</p>]]></content>
    
    
    <categories>
      
      <category>Proctocol related</category>
      
      <category>Profinet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>S7</tag>
      
      <tag>PN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PLC报警消息处理</title>
    <link href="/2024/07/21/PLC%E6%8A%A5%E8%AD%A6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/"/>
    <url>/2024/07/21/PLC%E6%8A%A5%E8%AD%A6%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在TIA Protal中，大致有以下几种方式可以获取报警信息：</p><ul><li>HMI侧组态报警</li><li>Program_alarm</li><li>Prodiag</li></ul><p>第一种方式基本上是最常用和最简单的，基本步骤是先创建报警变量再组态报警文本，由HMI定时去轮询变量，通过监控变量值的变化触发。优点是配置简单，但是效率比较低，工作量比较大（以前项目上我会新建一个报警excel来处理，每次检查报警表的时候就是我头最大的时候，特别是涉及到中英切换报警翻译的时候）。<br>第二种方式就是在程序中调用Program_Alarm实现报警推送，PLC中变量值的变化来推送报警消息。好处是处理在PLC侧，所以和HMI的通信负载比较低，另外一方面在PLC侧编程可以一定概率的实现自动化推送，客观降低工作量，增加效率。缺点是对设备有要求，PLC1200就不用想了，它只支持1500;另外报警文本存PLC内部的话其实还是很占PLC数据工作存储器资源的，数据量大了之后PLC可能吃不消（直接导致工作存储器不够用）。<br>第三种方式是使用Prodig技术，博图从V14开始就集成了prodiag功能了（它还有很多很好玩的应用，以后我可能单开一篇来写），这种技术极大的提升了编程效率，但是呢，依旧只支持1500。<br>所以1200的用户，还是老老实实用第一种方法吧。</p><h2 id="1-HMI侧组态报警"><a href="#1-HMI侧组态报警" class="headerlink" title="1. HMI侧组态报警"></a>1. HMI侧组态报警</h2><p>以前我遇到很多非标项目，小项目很多人喜欢一个报警条目占用一个bool。最后传给HMI侧的时候HMI变量表里面就传了一大堆bool量的报警信息，这是非常占用HMI的Tag点位的。所以我这里用word来表示最多16条报警（为什么可以这么做，自己体会一下），这样的好处一是报警集中（毕竟一个或者多个word可以单独组合某一个设备单元的报警集合），二是传一个word给HMI只会被看作一个Tag,但是信息量1：16,简直遥遥领先..<br>废话不多说，开始演示吧。</p><ul><li>自己做一个Bool2Word的块，目的是收集在程序里做的报警<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs leaf"><span class="hljs-punctuation">#</span><span class="hljs-keyword">FB_BoolToWord_Instance_Alarm1</span><span class="hljs-params">(<span class="hljs-variable">In_Alarm00</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_HolderLoadStation&quot;</span>.<span class="hljs-variable">HoistCylinder</span>.<span class="hljs-variable">Error_Initial</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm01</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_HolderLoadStation&quot;</span>.<span class="hljs-variable">HoistCylinder</span>.<span class="hljs-variable">Error_Target</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm02</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_HolderLoadStation&quot;</span>.<span class="hljs-variable">HoistCylinder</span>.<span class="hljs-variable">Error_Pg</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm03</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_HolderLoadStation&quot;</span>.<span class="hljs-variable">GripCylinder</span>.<span class="hljs-variable">Error_Initial</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm04</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_HolderLoadStation&quot;</span>.<span class="hljs-variable">GripCylinder</span>.<span class="hljs-variable">Error_Target</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm05</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_HolderLoadStation&quot;</span>.<span class="hljs-variable">GripCylinder</span>.<span class="hljs-variable">Error_Pg</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm06</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm07</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm08</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm09</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm10</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm11</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm12</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm13</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm14</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">In_Alarm15</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">FALSE</span>,</span><br><span class="hljs-params">                                   <span class="hljs-variable">Out_Alarm</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_AlarmDB&quot;</span>.<span class="hljs-variable">HolderLoadStationAlarm1</span>)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>.这是外部管脚，具体报警怎么来的取决于你报警逻辑怎么写的</p></blockquote></li></ul><p>程序变量接口定义：</p><ul><li>In_Alarmxx:Input,bool</li><li>Alarm:Static,word<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean">REGION 输入映射<br>    #Alarm.%X0 := #In_Alarm00;<br>    #Alarm.%X1 := #In_Alarm01;<br>    #Alarm.%X2 := #In_Alarm02;<br>    #Alarm.%X3 := #In_Alarm03;<br>    #Alarm.%X4 := #In_Alarm04;<br>    #Alarm.%X5 := #In_Alarm05;<br>    #Alarm.%X6 := #In_Alarm06;<br>    #Alarm.%X7 := #In_Alarm07;<br>    #Alarm.%X8 := #In_Alarm08;<br>    #Alarm.%X9 := #In_Alarm09;<br>    #Alarm.%X10 := #In_Alarm10;<br>    #Alarm.%X11 := #In_Alarm11;<br>    #Alarm.%X12 := #In_Alarm12;<br>    #Alarm.%X13 := #In_Alarm13;<br>    #Alarm.%X14 := #In_Alarm14;<br>    #Alarm.%X15 := #In_Alarm15;<br>END_REGION<br></code></pre></td></tr></table></figure><blockquote><p>.这是内部程序，为了直观，我把报警一个一个赋值给了Word对应的bit.<br>.其实有一种叫做<code>AT</code>的指令，可以在变量定义的时候直接把<code>Array[0..15] of bool</code>映射给一个<code>Word</code>。这样可以做到零代码映射，但是对FB有要求（FB不能被优化，想想为什么），感兴趣的朋友可以去玩一下。</p></blockquote></li></ul><p>完事之后再去HMI的HMI报警里面，把你定义好的报警文本和报警变量对应上，Ctrl+C&#x2F;Ctrl+V吧。<br><img src="/img/blog_page/3427087-20240414144721222-1199282241.png"></p><blockquote><p>.报警文本自己手动定义。你写个Hello World都行<br>.报警类别需要定义，不同的报警类别在HMI的报警控件中有不一样的处理显示规则<br>.触发变量和触发位配合使用，一个Word有16个位<br>触发器地址根据你的触发变量和触发位自动填入。</p></blockquote><p>最后去画面上做出你的报警控件来，HMI选择报警视图。拽到画面上就OK。<br><img src="/img/blog_page/3427087-20240414145324941-1501503959.png"></p><blockquote><p>.在HMI里面，选择<code>记录</code>，再选择<code>报警记录</code>，新增一个<code>报警日志</code>，设置<code>名字</code>，<code>记录数</code>，<code>存储位置</code>。然后你就得到一个历史记录报警。<br>.选中<code>报警视图</code>的<code>当前报警状态</code>，然后你就得到一个实时报警记录。</p></blockquote><ul><li>至此，第一种方法就已经实现了，但是在开始第二种方法之前我对一种方法做了一个更深的探索，用来提高我写报警文本的效率（甚至可以说我压根就不想手动写报警文本）。<br>这里依旧简单记录一下：<br>我在上面的Bool2Word块里面加了一坨新的程序段，如下：<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs leaf">REGION 数值变化记忆<br>    // Statement section REGION<br>    IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_FirstScan</span> THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmMemory</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">Alarm</span>;<br>    END_IF;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">plus</span><span class="hljs-params">(<span class="hljs-variable">CLK</span>:<span class="hljs-operator">=</span><span class="hljs-params">(#<span class="hljs-variable">AlarmMemory</span><span class="hljs-operator">&lt;</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">Alarm</span>)</span>)</span>;<br>    IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">plus</span>.Q THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">ValueChange</span> := TRUE;<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmMemory</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">Alarm</span>;<br>    END_IF;<br>END_REGION<br><br>REGION 读取变量符号名做为报警文本<br>    // Statement section REGION<br>   IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_FirstScan</span> OR TRUE = <span class="hljs-punctuation">#</span><span class="hljs-keyword">ValueChange</span> THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[0] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm00</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[1] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm01</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[2] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm02</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[3] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm03</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[4] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm04</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[5] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm05</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[6] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm06</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[7] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm07</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[8] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm08</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[9] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm09</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[10] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm10</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[11] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm11</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[12] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm12</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[13] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm13</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[14] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm14</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">AlarmText</span>[15] := GetSymbolName(variable := <span class="hljs-punctuation">#</span><span class="hljs-keyword">In_Alarm15</span>, size := 0);<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">ValueChange</span> := FALSE;<br>    END_IF;<br>END_REGION<br></code></pre></td></tr></table></figure><blockquote><p>.<code>GetSymbolName</code>具体怎么用，可以按<code>Ctrl+F1</code>,博图帮助系统会告诉你答案。</p></blockquote></li></ul><p>把你<code>In_Alarm</code>所连接的变量符号名改成的报警文本内容（你可以选择在DB内建Struct或者引用UDT，让你的符号名更有层级）。如图：<br><img src="/img/blog_page/3427087-20240414151254831-671857986.png"><br>现在回到HMI侧，在<code>HMI变量表</code>新建你的<code>AlarmDB_Word</code>和<code>AlarmDB_Text</code>(就是在PLC程序里面建立的报警字和对应报警文本数组，数组格式我定义成<code>Array[0..15] of WString[60]</code>);<br>找到你想处理的<code>AlarmDB_Word</code>对应的<code>离散量报警</code>，在对应<code>报警文本</code>的地方，先<code>双击</code>进入文本编辑框内，再<code>右键</code>，选择<code>插入变量域</code>，弹出过程子窗体，选择需要连接的变量，最后确认。如图：<br><img src="/img/blog_page/3427087-20240414152618220-1962560508.png"></p><blockquote><p>.当然你也可以选连接文本列表，这又是其他玩法了，感兴趣可以玩一玩。</p></blockquote><p>至此，我们就实现了用符号名来代替我们要手动键入的报警文本，是不是很神奇。<br>但是你反过头来再来想想，这个柔性报警有什么缺点：还记得我使用了<code>GetSymbolName</code>吗，最后输出要求的格式是<code>WSTRING</code>，这是个什么概念我们来算一算，一个string[60]占用62个byte长度。那么一个WString[60]就要占用124个byte长度，我们一个报警word一共产生了<code>Array[0..15] of WString[60]</code>也就是<code>124*16=1984个byte</code>,接近<code>2KB</code>，如果多用几个就更多了，回头看一下我们的PLC数据存储器才多大，我用的1215也就125KB工作寄存器（代码+数据）。</p><p>上面的题外话说多了，那么下面我们接着做Program_Alram。</p><h2 id="2-Program-Alarm"><a href="#2-Program-Alarm" class="headerlink" title="2. Program_Alarm"></a>2. Program_Alarm</h2><p>这个操作方法比较简单，简单描述就行。</p><ul><li><p>如图，在FB里面建立一个（或多个）和报警相关的参数<br><img src="/img/blog_page/3427087-20240414161854752-952231681.png"></p></li><li><p>在FB代码编辑界面引用Program_Alarm</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//增加报警块<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">Program_Alarm</span><span class="hljs-params">(<span class="hljs-variable">SIG</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statAlarm</span>.<span class="hljs-variable">trigger</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">TIMESTAMP</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_ldt_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_1</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statAlarm</span>.<span class="hljs-variable">text</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_2</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_3</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_4</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_5</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_6</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_7</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_8</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_9</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">SD_10</span>:<span class="hljs-operator">=</span><span class="hljs-variable">_variant_in_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">Error</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">_bool_out_</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">Status</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">_word_out_</span>)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>.我只简单填写了<code>trigger</code>和一个<code>报警text</code>,其他更多的信息可以按<code>Ctrl+F1</code>获取博图帮助。<br>.正式使用场景因为每一条报警都需要调用一次<code>Program_Alarm</code>,所以最好使用<code>多重实例</code>，在<code>循环迭代</code>（for循环遍历多重实例构成的数组）中调用来最大程度减少程序量；</p></blockquote></li></ul><p><img src="/img/blog_page/3427087-20240414162227225-1746997196.png"></p><blockquote><p>.在PLC的<code>PLC监控的报警</code>中选择<code>报警</code>，填入<code>报警文本</code>（这是HMI弹出报警页面的的报警内容），填入<code>信息文本</code>（这是点入报警文本之后的详细帮助信息。）<br>.在HMI上拖拽一个<code>报警视图</code>出来，把确认信息和这里的对应好</p></blockquote><p>就这么简单就可以自动生成一个Program_alarm了，记得要去HMI侧拖一个<code>报警视图</code>出来并选择相关确认信息，这一步工作还是要做的。<br>它的问题还是会占用一部分数据寄存器的内存，但是当我们使用1500的时候，就算1511应该也是1MB的工作寄存器起步了，所以影响应该还好。<br>再次提醒，这个块仅支持1500。</p><h2 id="3-Prodiag"><a href="#3-Prodiag" class="headerlink" title="3. Prodiag"></a>3. Prodiag</h2><ul><li>prodiag的基本使用方法其实很容易，这里先对基本使用做一个简易过程描述。</li></ul><p>在1500的PLC里面，对你想使用的的变量右键(不一定非的是<code>DB</code>，对于<code>FB的基本数据类型</code>，<code>IO</code>等等一样可以右键)，我这里在FB里面新建了一个静态变量。如图：<br><img src="/img/blog_page/3427087-20240414165659142-1189411013.png"></p><blockquote><p>.新建后，右边监控列会出现一个监控的<code>小图标</code>，如图不想监控了，右键这个小图标选择删除就行。</p></blockquote><p>点完后的界面如下：<br><img src="/img/blog_page/3427087-20240414170416429-1114338423.png"></p><blockquote><p>.监控类型可以选择<code>操作数</code>，<code>互锁</code>，<code>动作</code>，还有一些其他的。（比如当你选择互锁之后，就会多出一个条件让你填写），我们就拿<code>操作数</code>为例，右边可以选择<code>触发器</code>，下面可以选择<code>延时</code>，<code>监控类别</code>，等等很多，有兴趣可以自己玩一玩。<br>.报警文本的格式是<br><code>&lt;类别&gt; : &lt;监控类型&gt; : &lt;ProDiag FB 的名称&gt; : &lt;监控 ID&gt; : &lt;实例名称&gt; : &lt;参数名称&gt; : &lt;变量地址&gt; : &lt;变量名称&gt; : &lt;变量注释&gt;</code>,注意，这意味着它甚至可以把你的<code>变量符号</code>，<code>变量地址</code>，<code>变量注释</code>当作<code>报警文本</code>的一部分输出出来。<br>.<code>详细文本域</code>用来帮你添加你想添加的详细文本内容。</p></blockquote><p>做完上面的之后，我们的选择触发器是<code>FALSE</code>，意味着当该变量为假的时候PLC就会给HMI推送一条报警信息，这甚至不需要去HMI界面做任何的配置。因为它的技术是PLC推送技术，不需要HMI去轮询或者监控的。</p><ul><li>在一些稍微大一点的项目中，可能会专门建立一个<code>Prodiag_FB</code>来做专门的监控管理。</li></ul><p>在这种情况下，监控内容就具有了更多的<code>结构化属性</code>，也更利于程序分类。<br>如下：<br><img src="/img/blog_page/3427087-20240414172031646-2129437683.png"></p><blockquote><p>.选择<code>添加新块</code>，语言选择<code>PRODIAG(含IDB)</code>，就可以建立一个ProdiagFB，图是建立完成并监控了一个数据后的样子。<br>.具体什么时候该建立什么样的监控<code>PRODIAG(含IDB)</code>，监控的内容应该是什么，监控类别的分类应该怎么划分。这就是项目上用来做结构化和标准化分类所需要考虑的了，这里就不详细谈论了。</p></blockquote><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>虽然笔者对西门子PLC报警应用的总结虽然就到这了，但技术在不断的发展和更新，很多新技术值得去尝试，还需要不断的去学习总结才行。</p>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WinCC RT Advance的VBS脚本应用</title>
    <link href="/2024/07/21/WinCC%20RT%20Advance%E7%9A%84VBS%E8%84%9A%E6%9C%AC%E5%BA%94%E7%94%A8/"/>
    <url>/2024/07/21/WinCC%20RT%20Advance%E7%9A%84VBS%E8%84%9A%E6%9C%AC%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>本次选择的是WinCC RT Advance而不是用的SIMATIC Comfort Panel来做的主要原因是因Comfort系列HMI虽然是支持VBS脚本的，但是如果要创造一些CSV文件的话，HMI不带USB的情况下是很存取数据的。另一方面向比于PC station嵌入的RT Advance，HMI的运行速度和响应速度也是有差别的。<br>不用Classic WinCC来做的原因是经典WinCC想实现脚本是个很简单的事；<br>不用KTP系列的原因是它们根本不支持脚本系统。</p><h2 id="1-一个简单的乘法脚本"><a href="#1-一个简单的乘法脚本" class="headerlink" title="1. 一个简单的乘法脚本"></a>1. 一个简单的乘法脚本</h2><p>需要做成的效果如图：<br><img src="/img/blog_page/3427087-20240414200042330-304076386.png"></p><blockquote><p>.使能乘法脚本的按钮在<code>=</code>符号中，按下即使能运算<br>.右键<code>=</code>，找到<code>事件</code>，选择<code>单击事件</code>，把脚本嵌入事件。</p></blockquote><p>新建一个名为<code>multiplication</code>的VBS脚本，类型选择Sub(不带返回值)</p><ul><li>Sub:不带返回值；</li><li>Function:带返回值，没找到Return,所以应该只能通过Function返回；</li><li>ByVal:按值传参，传入的数不管再脚本内如何被赋值，接口上的值不会改变；</li><li>ByRef：按地址传参，可以在脚本内部改变参数值并传到接口上；</li></ul><p>代码内容如下：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Sub</span> multiplication()<br><br><span class="hljs-keyword">Dim</span> a,b,c <span class="hljs-comment">&#x27;定义变量</span><br>a=SmartTags(<span class="hljs-string">&quot;乘数&quot;</span>)<br>b=SmartTags(<span class="hljs-string">&quot;被乘数&quot;</span>)<br>c=a*b<br>SmartTags(<span class="hljs-string">&quot;结果值&quot;</span>)=c<br><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><blockquote><p>.<code>SmartTags()</code>连接的是HMI变量表中的变量</p></blockquote><h2 id="2-带返回值的方法"><a href="#2-带返回值的方法" class="headerlink" title="2. 带返回值的方法"></a>2. 带返回值的方法</h2><p>带返回值，应该只能通过Function返回，且只能返回一个值（网上资料VBS传递值可以用<code>Class name ... End Class</code>，但是在WinccRT上报错，也许是不支持，先保留）；</p><p>代码内容如下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Function</span> Average(<span class="hljs-keyword">ByRef</span> Value1, <span class="hljs-keyword">ByRef</span> Value2)<br><br><span class="hljs-keyword">If</span> I<span class="hljs-built_in">sNumeric</span> (Value1) = <span class="hljs-literal">False</span> <span class="hljs-keyword">Then</span> Value1 = <span class="hljs-number">1</span><br><span class="hljs-keyword">If</span> I<span class="hljs-built_in">sNumeric</span> (Value1) = <span class="hljs-literal">False</span> <span class="hljs-keyword">Then</span> Value1 = <span class="hljs-number">1</span><br>Average = (Value1 + Value2)/<span class="hljs-number">2</span><br><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br></code></pre></td></tr></table></figure><p>脚本呈现效果如下：<br><img src="/img/blog_page/3427087-20240414205146446-515867530.png"></p><blockquote><p>.返回值需要新建一个<code>HMI_Tags</code>或者<code>PLC变量</code>来接收；<br>.Value1&#x2F;Value2被固定输入为<code>int型（有符号位）</code>；</p></blockquote><h2 id="3-随机数和数组"><a href="#3-随机数和数组" class="headerlink" title="3. 随机数和数组"></a>3. 随机数和数组</h2><p>效果画面如图所示：<br><img src="/img/blog_page/3427087-20240414210224874-1355865341.png"></p><blockquote><p>.需要在HMI变量表里面新建一个数组，我这里建立的是<code>Array[0..9] of Real</code>,为左侧<code>IO域</code>分别分配一个数组元素；<br>.建立一个<code>Uint类型</code>HMI变量分配给右侧IO域，目的是作为脚本要生成的随机数组的最大值；<br>.按钮的作用是按下就开始使能脚本内容；</p></blockquote><p>新建一个名为<code>Array_Generators</code>的VBS脚本，代码内容如下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Sub</span> Array_Generator()<br><span class="hljs-keyword">Dim</span> Temp_<span class="hljs-built_in">Array</span>(),i<br><span class="hljs-keyword">For</span> i=<span class="hljs-number">0</span> <span class="hljs-keyword">To</span> SmartTags(<span class="hljs-string">&quot;数组最大元素&quot;</span>)<br><span class="hljs-keyword">ReDim</span> <span class="hljs-keyword">Preserve</span> Temp_<span class="hljs-built_in">Array</span>(i+<span class="hljs-number">1</span>) <span class="hljs-comment">&#x27;Preserve为保留之前数据</span><br>Temp_<span class="hljs-built_in">Array</span>(i)=Rnd*<span class="hljs-number">1000</span><br><span class="hljs-keyword">Next</span><br><span class="hljs-keyword">For</span> i=<span class="hljs-number">0</span> <span class="hljs-keyword">To</span> SmartTags(<span class="hljs-string">&quot;数组最大元素&quot;</span>)<br>SmartTags(<span class="hljs-string">&quot;动态数组Array1显示&quot;</span>)(i)=Temp_<span class="hljs-built_in">Array</span>(i)<br><span class="hljs-keyword">Next</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><h2 id="4-更改元素位置和大小"><a href="#4-更改元素位置和大小" class="headerlink" title="4. 更改元素位置和大小"></a>4. 更改元素位置和大小</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Sub setColor()<br>On <span class="hljs-built_in">Error</span> Resume Next<br>Dim VAL,SHAPE<br><span class="hljs-built_in">Set</span> VAL = SmartTags(<span class="hljs-string">&quot;COLORCODE&quot;</span>)<br><span class="hljs-built_in">Set</span> SHAPE = HmiRuntime.Screens(<span class="hljs-string">&quot;画面_1&quot;</span>).ScreenItems(<span class="hljs-string">&quot;圆_1&quot;</span>)<br>Dim b1,b2,b3<br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">b1</span>=SmartTags(&quot;a1&quot;)<br><span class="hljs-built_in">Set</span> b2 = SmartTags(<span class="hljs-string">&quot;a2&quot;</span>)<br><span class="hljs-built_in">Set</span> b3 = SmartTags(<span class="hljs-string">&quot;a3&quot;</span>)<br><span class="hljs-keyword">If</span> b1&gt;255 <span class="hljs-keyword">Or</span> b2&gt;255 <span class="hljs-keyword">Or</span> b3&gt;255 Then<br><span class="hljs-attribute">a1</span>=0<br><span class="hljs-attribute">a2</span>=0<br><span class="hljs-attribute">a3</span>=0<br>SHAPE.BackColor = RGB(b1,b2,b3)<br><span class="hljs-keyword">Else</span><br>SHAPE.BackColor = RGB(b1,b2,b3)<br>End <span class="hljs-keyword">If</span><br><span class="hljs-string">&#x27;Select Case VAL</span><br><span class="hljs-string">&#x27;</span>Case 0<br><span class="hljs-string">&#x27;SHAPE.BackColor = RGB(255,255,255)</span><br><span class="hljs-string">&#x27;</span>Case 1<br><span class="hljs-string">&#x27;SHAPE.BackColor = RGB(255,0,0)</span><br><span class="hljs-string">&#x27;</span>Case 2<br><span class="hljs-string">&#x27;SHAPE.BackColor = RGB(0,255,0)</span><br><span class="hljs-string">&#x27;</span>Case 3<br><span class="hljs-string">&#x27;SHAPE.BackColor = RGB(0,0,255)</span><br><span class="hljs-string">&#x27;</span>Case <span class="hljs-keyword">Else</span><br><span class="hljs-string">&#x27;SHAPE.BackColor = RGB(0,0,0)</span><br><span class="hljs-string">&#x27;</span>End Select<br><span class="hljs-keyword">If</span> Err.Number &lt;&gt;0 Then<br>Err.Clear<br>End <span class="hljs-keyword">If</span><br>Dim box1,box2,box3,box4,box<br><span class="hljs-attribute">box1</span>=SmartTags(&quot;boxA&quot;)<br><span class="hljs-attribute">box2</span>=SmartTags(&quot;boxB&quot;)<br><span class="hljs-attribute">box3</span>=SmartTags(&quot;boxC&quot;)<br><span class="hljs-attribute">box4</span>=SmartTags(&quot;boxD&quot;)<br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">box</span>=HmiRuntime.Screens(&quot;画面_1&quot;).ScreenItems(&quot;矩形_1&quot;)<br>box.<span class="hljs-attribute">Height</span>=box1<br>box.<span class="hljs-attribute">Width</span>=box2<br>box.BackColor = RGB(b2,b1,b3)<br>box.<span class="hljs-attribute">Top</span>=box3<br>box.<span class="hljs-attribute">Left</span>=box4<br>End Sub<br></code></pre></td></tr></table></figure><h2 id="5-条件和循环指令应用"><a href="#5-条件和循环指令应用" class="headerlink" title="5. 条件和循环指令应用"></a>5. 条件和循环指令应用</h2><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Sub</span> <span class="hljs-variable">practiceVBS</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-operator">&#x27;</span>提示：<br><span class="hljs-operator">&#x27;</span> <span class="hljs-number">1.</span> 使用 <span class="hljs-operator">&lt;</span><span class="hljs-variable">CTRL</span><span class="hljs-operator">+</span><span class="hljs-variable">SPACE</span><span class="hljs-operator">&gt;</span> 或 <span class="hljs-operator">&lt;</span><span class="hljs-variable">CTRL</span><span class="hljs-operator">+</span><span class="hljs-built_in">I</span><span class="hljs-operator">&gt;</span> 快捷键打开含所有对象和函数的列表<br><span class="hljs-operator">&#x27;</span> <span class="hljs-number">2.</span> 使用 <span class="hljs-variable">HMI</span> <span class="hljs-variable">Runtime</span> 对象写入代码。<br><span class="hljs-operator">&#x27;</span>  示例：<span class="hljs-variable">HmiRuntime</span><span class="hljs-operator">.</span><span class="hljs-variable">Screens</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Screen_1&quot;</span><span class="hljs-punctuation">)</span>。<br><span class="hljs-operator">&#x27;</span> <span class="hljs-number">3.</span> 使用 <span class="hljs-operator">&lt;</span><span class="hljs-variable">CTRL</span><span class="hljs-operator">+</span><span class="hljs-variable">J</span><span class="hljs-operator">&gt;</span> 快捷键创建对象引用。<br><span class="hljs-operator">&#x27;</span>从此位置起写入代码：<br><span class="hljs-variable">Dim</span> <span class="hljs-variable">CMD</span><span class="hljs-operator">,</span><span class="hljs-built_in">Count</span><span class="hljs-operator">,</span><span class="hljs-variable">tt</span><span class="hljs-operator">,</span><span class="hljs-variable">i</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">CMD</span> <span class="hljs-operator">=</span> <span class="hljs-variable">SmartTags</span><span class="hljs-operator">.</span><span class="hljs-built_in">Item</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Addflag&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">Set</span> <span class="hljs-built_in">Count</span> <span class="hljs-operator">=</span> <span class="hljs-variable">SmartTags</span><span class="hljs-operator">.</span><span class="hljs-built_in">Item</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;AddCountint&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">tt</span> <span class="hljs-operator">=</span> <span class="hljs-variable">SmartTags</span><span class="hljs-operator">.</span><span class="hljs-built_in">Item</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;flag&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">tt</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span><br><span class="hljs-built_in">If</span> <span class="hljs-variable">CMD</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-variable">Then</span><br><span class="hljs-built_in">For</span> <span class="hljs-variable">i</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-variable">To</span> <span class="hljs-number">999</span><br><span class="hljs-built_in">Count</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-operator">=</span><span class="hljs-built_in">Count</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">If</span> <span class="hljs-built_in">Count</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span><span class="hljs-operator">&gt;=</span><span class="hljs-number">100</span> <span class="hljs-variable">Then</span><br><span class="hljs-built_in">Count</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br><span class="hljs-built_in">Next</span><br><span class="hljs-variable">Else</span><br><span class="hljs-built_in">Count</span><span class="hljs-operator">.</span><span class="hljs-variable">Value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br></code></pre></td></tr></table></figure><h2 id="6-记录停机-恢复时间-生成记录日志"><a href="#6-记录停机-恢复时间-生成记录日志" class="headerlink" title="6. 记录停机+恢复时间+生成记录日志"></a>6. 记录停机+恢复时间+生成记录日志</h2><ul><li>需要创建一个故障开始的变量</li><li>需要创建一个故障结束的变量</li></ul><p>记录开始时间，新建一个名为<code>Start_Time</code>的VBS脚本，代码内容如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Sub</span> <span class="hljs-type">Start_Time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-built_in">If</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;自动生产状态&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">False</span> <span class="hljs-built_in">And</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;做沿用的临时变量&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span> <span class="hljs-variable">Then</span><br><span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;问题发生时系统时间&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">Now</span><br><span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;故障记录激活标志位&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-built_in">True</span><br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br><span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;做沿用的临时变量&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;自动生产状态&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Dim</span> <span class="hljs-variable">Prompt</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">Prompt</span><span class="hljs-operator">=</span><span class="hljs-variable">HmiRuntime</span><span class="hljs-operator">.</span><span class="hljs-variable">Screens</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;显示窗口名&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">ScreenItems</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;文本域控件&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Prompt</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;故障开始时间脚本正在运行&quot;</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">Prompt</span><span class="hljs-operator">=</span><span class="hljs-built_in">Nothing</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br></code></pre></td></tr></table></figure><p>创建记录事件，新建一个名为<code>Log_Record</code>的VBS脚本，代码内容如下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">Sub</span> Log_Record()<br><br><span class="hljs-keyword">Dim</span> FSO,MyFile,DateVal,StartTim,StopTim<br><span class="hljs-keyword">Set</span> StartTim = SmartTags(<span class="hljs-string">&quot;问题发生时系统时间&quot;</span>)<br><span class="hljs-keyword">Set</span> StopTim = SmartTags(<span class="hljs-string">&quot;问题结束时系统时间&quot;</span>)<br>DateVal = <span class="hljs-built_in">DateDiff</span>(<span class="hljs-string">&quot;s&quot;</span>,StartTim.Value,StopTim.Value)<br><span class="hljs-keyword">Set</span> FSO=<span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>)<br><span class="hljs-keyword">Set</span> MyFile=FSO.OpenTextFile(<span class="hljs-string">&quot;D:\停机时间记录表.csv&quot;</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">&#x27;打开文件并引用，8表示打开模式为在最后一行写入（1=只读；2=写入）；0代表ASCii显示方式</span><br>MyFile.WriteLine MyFile.Line &amp; <span class="hljs-built_in">Date</span>() &amp;<span class="hljs-string">&quot;,&quot;</span>&amp; <span class="hljs-built_in">Time</span>() &amp;<span class="hljs-string">&quot;,&quot;</span>&amp; <span class="hljs-string">&quot;这是故障&quot;</span> &amp;<span class="hljs-string">&quot;,&quot;</span>&amp; DateVal<br>MyFile.Close<br><br><span class="hljs-keyword">Set</span> FSO=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Set</span> MyFile=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Set</span> StartTim=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Set</span> StopTim=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Set</span> DateVal=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><p>创建CSV表格，新建一个名为<code>CSV_Generators</code>的VBS脚本，代码内容如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Sub CSV_Generators()<br><br>Dim FSO,MyFile,Input<br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">FSO</span>=CreateObject(&quot;Scripting.FileSystemObject&quot;)&#x27;创建文件系统<br><span class="hljs-keyword">If</span> FSO.FileExists(<span class="hljs-string">&quot;D:\停机时间记录表.csv&quot;</span>)=<span class="hljs-literal">True</span> Then<br>Call Log_Record<br><span class="hljs-keyword">Else</span><br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">MyFile</span>=FSO.CreateTextFile(&quot;D:\停机时间记录表.csv&quot;)<br>MyFile.WriteLine<span class="hljs-string">&quot;时间,日期,故障,故障时间统计&quot;</span><br>MyFile.Close<br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">MyFile</span>=<span class="hljs-literal">Nothing</span><br>Call Log_Record<br>End <span class="hljs-keyword">If</span><br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">FSO</span>=<span class="hljs-literal">Nothing</span><br>End Sub<br></code></pre></td></tr></table></figure><p>记录开始时间，新建一个名为<code>End_Time</code>的VBS脚本，代码内容如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Sub</span> <span class="hljs-type">End_Time</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Dim</span> <span class="hljs-variable">Prompt</span><br><span class="hljs-built_in">If</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;故障记录激活中&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span> <span class="hljs-built_in">And</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;自动生产状态&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">True</span> <span class="hljs-variable">Then</span><br><span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;问题结束时系统时间&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">Now</span><br><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">Prompt</span><span class="hljs-operator">=</span><span class="hljs-variable">HmiRuntime</span><span class="hljs-operator">.</span><span class="hljs-variable">Screens</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;显示窗口名&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">ScreenItems</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;文本域控件&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Prompt</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;故障恢复时间脚本正在运行&quot;</span><br><span class="hljs-variable">Call</span> <span class="hljs-type">CSV_Generators</span><br> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;故障记录激活中&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">False</span><br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">Prompt</span><span class="hljs-operator">=</span><span class="hljs-built_in">Nothing</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br></code></pre></td></tr></table></figure><h2 id="7-生成记录报表"><a href="#7-生成记录报表" class="headerlink" title="7. 生成记录报表"></a>7. 生成记录报表</h2><p>想要生成如下图所示的报表：</p><blockquote><p>橘色文本框是建立来调试用的<br><img src="/img/blog_page/3427087-20240414214620467-824539474.png"></p></blockquote><p>记录数据，新建一个名为<code>TEST_Record</code>的VBS脚本，代码内容如下：</p><ul><li>被下面的<code>Test_TagRecord</code>调用<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Sub</span> TEST_Record()<br><span class="hljs-keyword">Dim</span> FSO,MYFILE,RecordNbr <span class="hljs-comment">&#x27;FSO=访问系统文件对象，MYFILE=访问的文件，RecordNbr=记录条目数</span><br><span class="hljs-keyword">Set</span> FSO=CreateObject(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>) <span class="hljs-comment">&#x27;创建文件访问对象并引用</span><br><span class="hljs-keyword">Set</span> MYFILE=FSO.OpenTextFile(<span class="hljs-string">&quot;D:\TEST数据记录.csv&quot;</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">&#x27;打开文件并引用，8表示打开模式为在最后一行写入（1=只读；2=写入）；0代表ASCii显示方式</span><br><span class="hljs-keyword">Set</span> RecordNbr=SmartTags(<span class="hljs-string">&quot;test_数据记录条目&quot;</span>) <span class="hljs-comment">&#x27;引用数据记录条数</span><br>MYFILE.WriteLine MYFILE.Line-<span class="hljs-number">1</span> &amp; <span class="hljs-string">&quot;,&quot;</span>&amp; <span class="hljs-type">Date</span>()&amp;<span class="hljs-string">&quot;,&quot;</span> &amp; Time() &amp; <span class="hljs-string">&quot;,&quot;</span> &amp; SmartTags(<span class="hljs-string">&quot;test_喷涂量&quot;</span>) &amp; <span class="hljs-string">&quot;,&quot;</span> &amp; SmartTags(<span class="hljs-string">&quot;test_流量&quot;</span>) &amp; <span class="hljs-string">&quot;,&quot;</span> &amp; SmartTags(<span class="hljs-string">&quot;test_雾化量&quot;</span>) &amp; <span class="hljs-string">&quot;,&quot;</span> &amp; SmartTags(<span class="hljs-string">&quot;test_扇形量&quot;</span>)<br><span class="hljs-comment">&#x27;将变量记录的值写入到数据记录EXCEL中</span><br>RecordNbr.Value=RecordNbr.Value+<span class="hljs-number">1</span><br>MYFILE.Close<br><span class="hljs-keyword">Set</span> FSO=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Set</span> MYFILE=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Set</span> RecordNbr=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure></li></ul><p>建立表头，新建一个名为<code>TEST_TagRecord</code>的VBS脚本，代码内容如下：</p><ul><li>在触发事件来临的时候被调用，它是第一个被调用的脚本<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Sub</span> TEST_TagRecord()<br><span class="hljs-comment">&#x27;检查变量存储EXCEL是否存在，若不存在则建立新的文件</span><br><span class="hljs-keyword">Dim</span> FSO,MYFILE <span class="hljs-comment">&#x27;FSO=访问系统文件对象，MYFILE=访问的文件</span><br><span class="hljs-keyword">Set</span> FSO=CreateObject(<span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span>) <span class="hljs-comment">&#x27;创建文件访问对象并引用</span><br><span class="hljs-keyword">If</span> FSO.FileExists(<span class="hljs-string">&quot;D:\TEST数据记录.csv&quot;</span>)=<span class="hljs-literal">True</span> <span class="hljs-keyword">Then</span><br><span class="hljs-keyword">Call</span> TEST_Record <span class="hljs-comment">&#x27;若存在，直接进行数据记录</span><br><span class="hljs-keyword">Else</span><br><span class="hljs-keyword">Set</span> MYFILE=FSO.CreateTextFile(<span class="hljs-string">&quot;D:\TEST数据记录.csv&quot;</span>) <span class="hljs-comment">&#x27;创建文件并返回到MYFILE</span><br>MYFILE.WriteLine<span class="hljs-string">&quot;编号,日期,时间,喷涂量,流量,雾化量,扇形量&quot;</span> <span class="hljs-comment">&#x27;写入表头</span><br>MYFILE.Close <span class="hljs-comment">&#x27;关闭文件</span><br><span class="hljs-keyword">Set</span> MYFILE=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">Call</span> TEST_Record <span class="hljs-comment">&#x27;直接进行数据记录</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><span class="hljs-keyword">Set</span> FSO=<span class="hljs-literal">Nothing</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure>刷新数据，新建一个名为<code> TEST_ReadLog</code>的VBS脚本，代码内容如下：</li><li>为了翻页的时候刷新页面表格的内容，翻页的时候会有一个Int数记录变化的起始索引位置（列表行数）<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Sub</span> <span class="hljs-type">TEST_ReadLog</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">Dim</span> <span class="hljs-variable">FSO</span><span class="hljs-operator">,</span><span class="hljs-variable">MYFILE</span><span class="hljs-operator">,</span><span class="hljs-variable">TEXT</span><span class="hljs-operator">,</span><span class="hljs-built_in">I</span><span class="hljs-operator">,</span><span class="hljs-variable">HELP</span> <span class="hljs-operator">&#x27;</span><span class="hljs-variable">FSO</span><span class="hljs-operator">=</span>访问文件系统和对象，<span class="hljs-variable">MYFILE</span><span class="hljs-operator">=</span>需要访问的文件，<span class="hljs-variable">TXET</span><span class="hljs-operator">=</span>从<span class="hljs-variable">csv</span>文件中读取的信息，<span class="hljs-built_in">I</span><span class="hljs-operator">=</span>整数<br><span class="hljs-built_in">Set</span> <span class="hljs-variable">HELP</span><span class="hljs-operator">=</span><span class="hljs-variable">HmiRuntime</span><span class="hljs-operator">.</span><span class="hljs-variable">Screens</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;VBS脚本测试2&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">.</span><span class="hljs-variable">ScreenItems</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;文本域_19&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;脚本正在运行！&quot;</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">FSO</span><span class="hljs-operator">=</span><span class="hljs-variable">CreateObject</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Scripting.FileSystemObject&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&#x27;</span>创建引用文件系统对象<br><span class="hljs-built_in">If</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_当前显示的变量号&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">&lt;</span><span class="hljs-number">0</span> <span class="hljs-variable">Then</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_当前显示的变量号&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-operator">&#x27;</span>变量编号不能小于<span class="hljs-number">0</span><br><span class="hljs-built_in">If</span> <span class="hljs-variable">FSO</span><span class="hljs-operator">.</span><span class="hljs-variable">FileExists</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;D:\TEST数据记录.csv&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-built_in">True</span> <span class="hljs-variable">Then</span> <br><span class="hljs-built_in">Set</span> <span class="hljs-variable">MYFILE</span><span class="hljs-operator">=</span><span class="hljs-variable">FSO</span><span class="hljs-operator">.</span><span class="hljs-variable">OpenTextFile</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;D:\TEST数据记录.csv&quot;</span><span class="hljs-operator">,</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&#x27;</span><span class="hljs-number">1</span><span class="hljs-operator">=</span>只读打开方式；<span class="hljs-number">0</span><span class="hljs-operator">=</span><span class="hljs-variable">ASCii</span>编码方式<br><span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><span class="hljs-operator">=</span><span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">Chr</span><span class="hljs-punctuation">(</span><span class="hljs-number">13</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span> <span class="hljs-string">&quot;CSV文件已打开！&quot;</span><br><span class="hljs-built_in">For</span> <span class="hljs-built_in">I</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-variable">To</span> <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_当前显示的变量号&quot;</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&#x27;</span>利用<span class="hljs-variable">FOR</span><span class="hljs-operator">..</span><span class="hljs-variable">NEXT</span>进行跳过某行，达到从最后一行开始读取的目的<br><span class="hljs-built_in">If</span> <span class="hljs-variable">MYFILE</span><span class="hljs-operator">.</span><span class="hljs-variable">AtEndOfLine</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-built_in">True</span> <span class="hljs-variable">Then</span> <span class="hljs-operator">&#x27;</span>判断是否在最后一行，没有到达则跳转，到达则退出<span class="hljs-variable">FOR</span>循环<br><span class="hljs-variable">MYFILE</span><span class="hljs-operator">.</span><span class="hljs-variable">SkipLine</span><br><span class="hljs-variable">Else</span><br><span class="hljs-built_in">Exit</span> <span class="hljs-built_in">For</span><br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br><span class="hljs-built_in">Next</span><br><span class="hljs-operator">&#x27;---------------------</span>开始进行文件中信息读取<br><span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><span class="hljs-operator">=</span><span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">Chr</span><span class="hljs-punctuation">(</span><span class="hljs-number">13</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span> <span class="hljs-string">&quot;开始进行文件中信息读取！&quot;</span><br><span class="hljs-built_in">For</span> <span class="hljs-built_in">I</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-variable">To</span> <span class="hljs-number">5</span>                              <span class="hljs-operator">&#x27;</span>依据画面显示的行数，从<span class="hljs-number">0</span>到<span class="hljs-number">5</span>一共<span class="hljs-number">6</span>行<br><span class="hljs-built_in">If</span> <span class="hljs-variable">MYFILE</span><span class="hljs-operator">.</span><span class="hljs-variable">AtEndOfLine</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-built_in">True</span> <span class="hljs-variable">Then</span><br> <span class="hljs-variable">TEXT</span><span class="hljs-operator">=</span><span class="hljs-built_in">Split</span><span class="hljs-punctuation">(</span><span class="hljs-variable">MYFILE</span><span class="hljs-operator">.</span><span class="hljs-built_in">ReadLine</span><span class="hljs-operator">,</span><span class="hljs-string">&quot;,&quot;</span><span class="hljs-operator">,-</span><span class="hljs-number">1</span><span class="hljs-operator">,</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span>  <span class="hljs-operator">&#x27;</span>读取<span class="hljs-variable">EXCEL</span>文件中的一行数据，并用<span class="hljs-built_in">Split</span>进行分隔，并将分隔后的一维数组赋值给<span class="hljs-variable">TXET</span><span class="hljs-operator">,-</span><span class="hljs-number">1</span>表示输出所有字符串，<span class="hljs-number">1</span>表示一维数组<br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_编号&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><span class="hljs-operator">&#x27;</span>左边都是数组变量<br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_日期&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_时间&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">2</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_喷涂量&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_流量&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">4</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_雾化量&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">5</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_temp_扇形量&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">6</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">SmartTags</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;test_当前显示的变量号&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span><span class="hljs-variable">TEXT</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span><span class="hljs-punctuation">)</span><br>     <span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span><span class="hljs-operator">=</span><span class="hljs-variable">HELP</span><span class="hljs-operator">.</span><span class="hljs-built_in">Text</span> <span class="hljs-operator">&amp;</span> <span class="hljs-variable">Chr</span><span class="hljs-punctuation">(</span><span class="hljs-number">13</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">&amp;</span> <span class="hljs-string">&quot;数组读取成功！&quot;</span><br><span class="hljs-variable">Else</span><br><span class="hljs-built_in">Exit</span> <span class="hljs-built_in">For</span><br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span><br><span class="hljs-built_in">Next</span><br><span class="hljs-variable">MYFILE</span><span class="hljs-operator">.</span><span class="hljs-built_in">Close</span> <span class="hljs-operator">&#x27;</span>关闭文件<br><span class="hljs-built_in">Set</span> <span class="hljs-variable">MYFILE</span><span class="hljs-operator">=</span><span class="hljs-built_in">Nothing</span>  <span class="hljs-operator">&#x27;</span>释放<br><span class="hljs-built_in">End</span> <span class="hljs-built_in">If</span> <br><span class="hljs-built_in">Set</span> <span class="hljs-variable">FSO</span><span class="hljs-operator">=</span><span class="hljs-built_in">Nothing</span><br><span class="hljs-built_in">Set</span> <span class="hljs-variable">HELP</span><span class="hljs-operator">=</span><span class="hljs-built_in">Nothing</span><br><span class="hljs-built_in">End</span> <span class="hljs-variable">Sub</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>HMI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HMI</tag>
      
      <tag>industrial control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片保存到本地并替换markdown中的url地址</title>
    <link href="/2024/07/21/%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%B9%B6%E6%9B%BF%E6%8D%A2markdown%E4%B8%AD%E7%9A%84url%E5%9C%B0%E5%9D%80/"/>
    <url>/2024/07/21/%E5%9B%BE%E7%89%87%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%B9%B6%E6%9B%BF%E6%8D%A2markdown%E4%B8%AD%E7%9A%84url%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h2 id="为了本地备份随笔内容"><a href="#为了本地备份随笔内容" class="headerlink" title="为了本地备份随笔内容"></a>为了本地备份随笔内容</h2><ul><li>用到<code>requests</code>下载图片和<code>re</code>解析markdown文本</li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re  <br><span class="hljs-keyword">import</span> os  <br><span class="hljs-keyword">import</span> requests  <br><br><span class="hljs-comment"># markdown文件的路径，绝对路径</span><br>markdown_file_path = <span class="hljs-string">&quot;C:\\Users\\wuyucun\\Desktop\\1_sim_test\\2_md file\\基于ProDiag的监控视图-LAD篇.md&quot;</span><br><br><span class="hljs-comment"># 读取markdown文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(markdown_file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    markdown_content = file.read()<br><br><span class="hljs-comment"># 使用正则表达式匹配所有URL地址</span><br>urls = re.findall(<span class="hljs-string">r&#x27;!\[[^\]]*\]\(([^)]*\.png)\)&#x27;</span>, markdown_content)<br><br><span class="hljs-comment"># 存储所有URL地址</span><br>url_list = []<br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>    url_list.append(url)<br><br><span class="hljs-comment"># 下载图片到本地</span><br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> url_list:<br>    response = requests.get(url)<br>    <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>        image_name = os.path.basename(url)[:<span class="hljs-number">255</span>]  <span class="hljs-comment"># 限制图片名字长度不超过255个字符</span><br>        image_dir = os.path.join(os.path.dirname(markdown_file_path),<span class="hljs-string">&quot;picture_libs&quot;</span>)<span class="hljs-comment">#markdown文件目录同级下名为picture_libs的文件夹</span><br>        image_path = os.path.join(image_dir,image_name)<span class="hljs-comment">#带绝对路径带文件名</span><br>        image_relpath = os.path.relpath(image_path,os.path.dirname(markdown_file_path))<span class="hljs-comment">#计算相对路径</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(response.content)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图片 <span class="hljs-subst">&#123;image_name&#125;</span> 下载成功&quot;</span>)<br>            <span class="hljs-comment"># 替换markdown文件中的URL地址，这里的image_path需要改成相对路径</span><br>            markdown_content = markdown_content.replace(url, image_relpath)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图片 <span class="hljs-subst">&#123;url&#125;</span> 下载失败&quot;</span>)<br>        <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-comment"># 将替换后的内容写回markdown文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(markdown_file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(markdown_content)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="已找到为什么在Markdown中本地的url地址打不开的原因："><a href="#已找到为什么在Markdown中本地的url地址打不开的原因：" class="headerlink" title="已找到为什么在Markdown中本地的url地址打不开的原因："></a>已找到为什么在Markdown中本地的url地址打不开的原因：</h2><ul><li>对于本地图片而言，markdown<code>不支持绝对路径</code>；</li><li>图片或者路径名称中<code>不要带空格</code>，不然识别不了；</li><li><code>![picture_name](..\\my_picture.png &quot;相对路径演示，上一级目录&quot;)</code></li><li><code>![picture_name](.\\pics\\my_picture.png &quot;相对路径演示，下一级目录&quot;)</code></li></ul><h2 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">//url语法</span><br>[<span class="hljs-built_in">url</span>连接显示名，可省略](<span class="hljs-built_in">url</span>地址，相对或者绝对地址 <span class="hljs-string">&quot;url标题，可省略&quot;</span>)<br><span class="hljs-comment">//html对应语法</span><br>&lt;a href=<span class="hljs-string">&quot;url地址&quot;</span> title=<span class="hljs-string">&quot;url标题&quot;</span>&gt;<span class="hljs-built_in">url</span>连接显示名&lt;/a&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于ProDiag的监控视图-Graph篇</title>
    <link href="/2024/07/21/%E5%9F%BA%E4%BA%8EProDiag%E7%9A%84%E7%9B%91%E6%8E%A7%E8%A7%86%E5%9B%BE-Graph%E7%AF%87/"/>
    <url>/2024/07/21/%E5%9F%BA%E4%BA%8EProDiag%E7%9A%84%E7%9B%91%E6%8E%A7%E8%A7%86%E5%9B%BE-Graph%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>典型GraphFB如下：<br><img src="/img/blog_page/3427087-20240417142701774-429183214.png"></p><blockquote><p>.可在动作里面加<code>赋值，计算，调用，公式，计数，计时</code>等<br>.可以选择<code>并行分支</code>和<code>或分支</code><br>.可以加<code>连锁</code><br>.可以加<code>监控</code><br>.可以加<code>跳转</code>到步序，可以加步<code>结尾</code><br>.加<code>条件判断</code><br>.加前<code>固定指令</code>，加后<code>固定指令</code></p></blockquote><p>Graph的定义变量和梯形图视角：<br><img src="/img/blog_page/3427087-20240417143516160-1466981016.png"></p><blockquote><p>.变量名来自于用户用户对<code>step</code>和<code>trans</code>的描述。<br>.<code>变量结构</code>存储了graph状态的细节信息。</p></blockquote><h2 id="1-新建Graph程序"><a href="#1-新建Graph程序" class="headerlink" title="1. 新建Graph程序"></a>1. 新建Graph程序</h2><p>如上图，新建一个Graph程序，记得在编辑界面点开<code>编辑</code>，勾选<code>从HMI显示/访问内部参数</code>。如图：<br><img src="/img/blog_page/3427087-20240417164410692-1867942359.png"></p><h2 id="2-建立HMI显示画面"><a href="#2-建立HMI显示画面" class="headerlink" title="2. 建立HMI显示画面"></a>2. 建立HMI显示画面</h2><ul><li><p>拖拽一个<code>Graph_概览</code>，设置<code>属性</code>下面的<code>常规</code>下面的<code>过程</code>，连接<code>Graph_FB_DB</code>的内部变量<code>OFF_SQ</code>,如图：<br><img src="/img/blog_page/3427087-20240417164746738-1318983351.png"></p></li><li><p>在<code>Graph_概览</code>的时事件里面，分别定义一个<code>报警视图按钮单击事件</code>，和<code>PLC代码视图按钮单击事件</code>。如图：<br><img src="/img/blog_page/3427087-20240417165141086-1583252282.png"></p><blockquote><p>.报警视图单击事件关联到<code>全局画面</code>上新建的报警视图去。点击时弹出画面。<br>.PLC代码视图界面关联新建的PLC代码视图就行。</p></blockquote></li></ul><p>基本参数设置计算完成了。</p><h2 id="3-仿真"><a href="#3-仿真" class="headerlink" title="3. 仿真"></a>3. 仿真</h2><p><img src="/img/blog_page/3427087-20240417165431892-50310818.png"><br>仿真结果如上。</p><h2 id="4-Graph更多的参数设置"><a href="#4-Graph更多的参数设置" class="headerlink" title="4. Graph更多的参数设置**"></a>4. Graph更多的参数设置**</h2><p>如图：<br><img src="/img/blog_page/3427087-20240417165605212-1658831828.png"></p><p>配置input,按照注释内容，可以灵活的配置更多的相关操作。<font color=red>具体使用方法是做一组变量连接到Graph fb的input管脚，传给HMI。output管脚可以用来做显示。</font></p>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于ProDiag的监控视图-LAD篇</title>
    <link href="/2024/07/21/%E5%9F%BA%E4%BA%8EProDiag%E7%9A%84%E7%9B%91%E6%8E%A7%E8%A7%86%E5%9B%BE-LAD%E7%AF%87/"/>
    <url>/2024/07/21/%E5%9F%BA%E4%BA%8EProDiag%E7%9A%84%E7%9B%91%E6%8E%A7%E8%A7%86%E5%9B%BE-LAD%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="此篇的目的是对ProDiag的使用做一个回顾和加深。"><a href="#此篇的目的是对ProDiag的使用做一个回顾和加深。" class="headerlink" title="此篇的目的是对ProDiag的使用做一个回顾和加深。"></a>此篇的目的是对ProDiag的使用做一个回顾和加深。</h3><p>ProDiag是一个可选插件，小于25个使用点不需要授权，否则是需要授权的，另外它只支持1500PLC。<br>优点：</p><ul><li>不需要组态</li><li>报警随时在PLC侧修改，不影响HMI侧显示和运行</li><li>监控类型比较多，而且可以自定义</li><li>PLC触发报警，显示可以是HMI或者是WEB</li><li>每一条报警对应的程序段可以在HMI上查看到代码（LAD&#x2F;FBD有效）</li><li>可以显示Graph程序段</li><li>报警消息比较丰富，而且可以自定义</li></ul><h2 id="1-ProDiag的监控设置"><a href="#1-ProDiag的监控设置" class="headerlink" title="1. ProDiag的监控设置"></a>1. ProDiag的监控设置</h2><p>（非必要但可以）</p><p>在项目内，找到<code>公共数据</code>，展开它，找到<code>监控设置</code>，双击配置，打开<code>常规</code>，该页面就是配置监控文本和报警格式的详细配置表了。</p><ul><li><p>类别：分报警类别的，默认有<code>错误，警告，信息</code>，你也可以按照自己的想法添加更多。报警类为<code>Acknowledagement和 No Acknowledagement</code>,表示需要不需要确认，按照你的需求选择。</p></li><li><p>子类别：他是用来分类你的报警区域的，比如说，你可以分别定义三个子类别为<code>workshop1/workshop2/workshop3</code>。</p></li><li><p>监控类：他来定义你监控的触发器，监控类型，有默认的，不想可以不用设置。</p></li><li><p>中央时间戳：可以允许你定义一个时钟，以后你的所有PLC报警信息都以这个时间为时间基准。使用这个的要求是首先你要在PLC里面定义并赋值一个<code>LDT类型</code>的变量，其次是你要对ProDiag FB块的属性使能<code>使用中央时间戳</code>选项。</p></li><li><p>报警文本：用来设置<code>报警信息的格式</code>，这个可以分配一下，当出现报警的时候<code>报警文本的格式就是这个格式</code>。</p></li></ul><p>如下图：<br><img src="/img/blog_page/3427087-20240416133835823-1478487623.png"></p><blockquote><p>.监控设置的内容是应用到项目全局的，不单单是一个PLC。这些设置对大型项目和标准化项目有着重要的意义。</p></blockquote><h2 id="2-ProDiag变量监控"><a href="#2-ProDiag变量监控" class="headerlink" title="2. ProDiag变量监控"></a>2. ProDiag变量监控</h2><p>这里就直接实操了。</p><ul><li><p>创建一个PLC+HMI的系统，我用的1513F+TP1200</p></li><li><p>新建一个FB，语言选择<code>PRODIAG(含IDB)</code>，<br><img src="/img/blog_page/3427087-20240416135122151-181076489.png"></p><blockquote><p>.选择<code>初始值采集</code>，主要是HMI需要一个初始状态，出问题的时候能有对比（你要是不勾也行，不用这个功能而已，<code>它的原理是将初始状态和问题状态对比，给你高亮异常的点位</code>。）<br>.若先前设置了<code>使用中央时间戳</code>这里记得也要勾选，没有就算了。<br>.版本号<code>V1.0</code>可以最多支持250个变量，<code>V2.0</code>可以最多支持1000个变量</p></blockquote></li><li><p>新建一个程序段，监控程序线圈<br><img src="/img/blog_page/3427087-20240416164052642-2064478746.png"></p></li><li><p>去到你的DB里面，右键监控变量result，操作数类型，监控的变量触发器，设置延时和<code>C1/C2/C3触发器</code>，也不是飞的全部设置，看你需求。<br><img src="/img/blog_page/3427087-20240416212515330-1743571245.png"></p></li></ul><blockquote><p>.注意ProDiag FB改成自己想要的FB<br>.检查一下报警文本是不是自己想要的<br>.这里面有个大坑（也不能说坑，是我自己没搞明白）：**<font color=red> 监控类型如果选择操作数的话，是看不了PLC代码视图的，切记</font>**</p></blockquote><ul><li>对详细文本域的处理<br>每个报警文本最多可以添加3个相关值，<code>SD_4~SD_6，对应编号4/5/6</code>,添加相关值的格式如下：<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">@<span class="hljs-variable">&lt;相关值的编号&gt;</span><span class="hljs-variable">&lt;格式&gt;</span>@ <span class="hljs-comment">#字符@用于打开和关闭相关值 </span><br></code></pre></td></tr></table></figure></li></ul><p>HMI相关格式说明：</p><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>%[i]X</td><td>共i位数的十六进制数</td></tr><tr><td>%[i]u</td><td>共i位数的不带符号的十进制数</td></tr><tr><td>%[i]d</td><td>共i位数的带符号的十进制数</td></tr><tr><td>%[i]b</td><td>共i位数的二进制数</td></tr><tr><td>%[i].[y]f</td><td>共i位数的浮点数，小数点后y位</td></tr><tr><td>%[i]s</td><td>共i位数的ANSI字符串</td></tr><tr><td>%t#&lt;文本库内容&gt;</td><td>访问文本库</td></tr></tbody></table><p><img src="/img/blog_page/3427087-20240416164422119-1727154683.png"></p><blockquote><p>.这样警报文本就能<code>带上你想要的关键变量信息</code>了。</p></blockquote><ul><li>文本库设置</li></ul><p>在<code>PLC报警文本列表</code>中，新建一条属于自己的文本列表<br><img src="/img/blog_page/3427087-20240416213232689-337290735.png"></p><blockquote><p>.可以带上文本列表条目，不满足条件的时候会输出想要的内容，比如报警文本就能详细告诉你哪个条件不满足了。</p></blockquote><ul><li>HMI需要变量<ul><li><p>需要一个从<code>ProDiag的iDB中引出的State</code>变量<br><img src="/img/blog_page/3427087-20240416165805114-321993035.png"></p><blockquote><p>.如果你去监控过这个<code>state</code>变量结构的话，你会发现其实代码视图的显示需要的源数据都是靠它。最后我再讲讲代码视图的实现逻辑的时候会再提到它。</p></blockquote></li><li><p>需要两个HMI内部变量，一个作为<code>条件分析视图控制变量（wstring类型）</code>，一个作为<code>内部开关量（bool）</code>。画面布局如下：</p></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240416213822267-220482835.png"></p><blockquote><p>.两个控制变量在报警视图中设置<br>.按钮引用bool类型的控制变量做<code>可见性</code>设置，按钮事件中选择<code>激活代码视图</code><br>.prodiag概览视图中需要<code>State</code>变量来获取来自Prodiiag_FB的全部信息<br>.代码视图拖出来就行。</p></blockquote><ul><li>按钮设置<ul><li><p>按钮动作事件，当按下按钮后，激活相应的<code>代码视图</code>；<br><img src="/img/blog_page/3427087-20240416214257039-1234585654.png"></p></li><li><p>按钮可见性连接到bool类型的控制变量。</p></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240416214418609-951902631.png"></p><ul><li><p>拖一个<code>概览视图</code></p><ul><li>视图的<code>常规</code>，<code>过程</code>，连接<code>变量state</code><br><img src="/img/blog_page/3427087-20240416214530607-436054341.png"></li></ul></li><li><p>拖一个代码视图<br><img src="/img/blog_page/3427087-20240416214607663-1062400783.png"></p></li><li><p>拖一个条件分析视图</p><ul><li>连到<code>代码分析视图变量（WSTRING）</code><br><img src="/img/blog_page/3427087-20240416214745098-557474605.png"></li></ul></li><li><p>拖一个报警视图<br><img src="/img/blog_page/3427087-20240416214831483-269034768.png"></p><ul><li>设置代码分析视图控制变量，（一共俩个）</li></ul></li></ul><p><img src="/img/blog_page/3427087-20240416214938713-1118005174.png"></p><blockquote><p>.这两个变量，都是自己在HMI变量表里面新建的<code>内部变量</code>，它没有任何其他地方写入</p></blockquote><ul><li>设置报警类型启用<br><img src="/img/blog_page/3427087-20240416215107415-634784767.png"></li></ul><blockquote><p>.这里也有个我踩过的坑：**<font color=red> 如果你触发的报警类别在这里没有被勾上的话是弹不出报警的</font>**</p></blockquote><ul><li>仿真效果如图：<br><img src="/img/blog_page/3427087-20240416215425181-2071469803.png"><blockquote><p>.注意右上角<code>编号53的是个操作数报警，它是我作对比用的一个prodiag类型，它能被Prodiag抓到并产生报警，但是它产生不了代码视图的，切记</code>。</p></blockquote> -prodiag概论视图简单解释</li></ul><p><img src="/img/blog_page/3427087-20240416215726816-1375533539.png"></p><blockquote><p>.名字显示的是你连接的Prodiag FB的背景DB<br>.类别：<code>E表示error,W表示warning</code>，都是你在监控设置里面设置的类别<br>.类型：<code>O表示操作数，I表示互锁</code>，都是你在建立prodiag监控时选择的。<br>.红色有表示现在出现的类型和类别。</p></blockquote><h2 id="3-内在逻辑梳理"><a href="#3-内在逻辑梳理" class="headerlink" title="3. 内在逻辑梳理"></a>3. 内在逻辑梳理</h2><p>这是本篇最重要的东西，虽然可能看上面看的一头雾水，但是只要你捋清楚了这个事的内生逻辑，我相信你可以自己摸索出自己的方法。</p><ol><li><p>ProDiag是基于PLC推送的，所以我们<code>需要将自己要监控的变量放在自己建立的Prodiag FB里面</code>，因为只有被ProDiag FB管理到的监控才会被正确的记录下来。</p></li><li><p>监控变量的<code>监控类型，互锁条件，触发条件是需要自己设置</code>的，因为只有自己才知道自己程序里面的触发逻辑。</p></li><li><p><code>报警类别，报警子类别，报警确认，报警格式，文本域等</code>需要自己去设置的原因是：如果你是一个大型项目或者一个标准化项目，报警再哪一个区域被触发，哪一个类型，是否对于维修有重大影响，是否需要现场确认，都是需要工程人员自己去思考和定义的。同理，报警格式和报警详细文本也是基于这一层意思的。如果你是做来玩，或者根本不需要详细内容，那你甚至可以不用关心这些看似枯燥又繁琐的东西。</p></li><li><p>ProDiag FB关于是否选择<code>初始值采集</code>和使用<code>中央时间戳</code>的属性，完全取决于你对最后输出结果的把控和需求。</p></li><li><p>在PLC侧做完之后其实本质已经结束了，因为ProDiag是一个PLC主动推送的过程，和HMI或者WEB没有半毛钱关系，说白了，它们就是显示工具而已。（从这个角度看<code>ProDiag的好处就是完全不会对HMI造成多大的通信负载和完全不依靠HMI的通信响应时间，因为PLC是主动端</code>）。</p></li><li><p>HMI侧首先要配置的是<code>ProDiag概览</code>，因为我们需要它连接来自于<code>ProDiag FB背景DB的State结构</code>全部内容，State存储了Prodiag推送的详细的，细节的内容。</p></li><li><p>接下来我们需要配置<code>报警视图</code>，我们在报警视图里面放入了两个HMI内部变量<code>代码分析视图变量(wstring)</code>和<code>控制变量（bool）</code>，这两个内部变量存储了报警推送过来时的文本和使能信息。</p></li><li><p>基于报警视图的内容，我们配置了<code>条件分析视图</code>，这个视图是解析了<code>代码分析视图变量(wstring)</code>，让我们能在控件里面看的明白哪些条件导致的结果被触发。</p></li><li><p>然后，我们需要建立一个按钮，按钮按下的时候去<code>激活代码视图</code>，刷新为我们看到的LAD代码。但是我们不能再没有推送的时候去也按这个按钮，因为没有意义。所以我们使用了<code>控制变量（bool）</code>，让按钮在报警来但的时候才能被显示和使用。</p></li><li><p>整个代码视图的思维导向基本就是这样。</p></li></ol><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>实践才能得到自己想要的结果。<br>之后可能会总结ProDiag显示Graph顺序步，这个相对容易些。</p><h2 id="5-update"><a href="#5-update" class="headerlink" title="5. update"></a>5. update</h2><p>在<code>ProDiag概览</code>中，右键增加一个<code>报警视图按钮单击</code>事件，选择<code>显示窗口报警</code>。选择<code>对象名称</code>为相应的报警视图，选择<code>显示模式</code>切换模式，如图：<br><img src="/img/blog_page/3427087-20240417155840892-952155377.png"></p><blockquote><p>.用于关联报警视图</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解析HMI面板实例</title>
    <link href="/2024/07/21/%E8%A7%A3%E6%9E%90HMI%E9%9D%A2%E6%9D%BF%E5%AE%9E%E4%BE%8B/"/>
    <url>/2024/07/21/%E8%A7%A3%E6%9E%90HMI%E9%9D%A2%E6%9D%BF%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="拆解一个已有的画面面板实例来看看画面面板是怎么实现的。"><a href="#拆解一个已有的画面面板实例来看看画面面板是怎么实现的。" class="headerlink" title="拆解一个已有的画面面板实例来看看画面面板是怎么实现的。"></a><font face="黑体" color=green>拆解一个已有的画面面板实例来看看画面面板是怎么实现的</font>。</h3><h2 id="1-使用实例，需要从项目库里面拖出来。"><a href="#1-使用实例，需要从项目库里面拖出来。" class="headerlink" title="1. 使用实例，需要从项目库里面拖出来。"></a>1. <u>使用实例，需要从项目库里面拖出来。</u></h2><p> <img src="/img/blog_page/3427087-20240417221038997-1936650484.png"></p><h2 id="2-拖出来之后画面如图，它是一个组合画面。"><a href="#2-拖出来之后画面如图，它是一个组合画面。" class="headerlink" title="2. 拖出来之后画面如图，它是一个组合画面。"></a>2. <u>拖出来之后画面如图，它是一个组合画面。</u></h2><p> <img src="/img/blog_page/3427087-20240417221133330-344635444.png"></p><h2 id="3-这个画面有四个属性，以及一个事件。"><a href="#3-这个画面有四个属性，以及一个事件。" class="headerlink" title="3. 这个画面有四个属性，以及一个事件。"></a><u>3. 这个画面有四个属性，以及一个事件。</u></h2><p> <img src="/img/blog_page/3427087-20240417221245254-57791359.png"><br> <img src="/img/blog_page/3427087-20240417221335935-1533519575.png"></p><h2 id="4-需要传入的数据类型"><a href="#4-需要传入的数据类型" class="headerlink" title="4. 需要传入的数据类型"></a><u>4. 需要传入的数据类型</u></h2><font color=red>   - FnCselInHMI属性需要传入一个bool类型数据   - H_lAnim需要传入一个DWORD类型数据   - Type和ValveName是静态变量，直接在接口填写静态值</font><h2 id="5-右键编辑面板，可以看到一个总体属性"><a href="#5-右键编辑面板，可以看到一个总体属性" class="headerlink" title="5. 右键编辑面板，可以看到一个总体属性"></a><u>5. 右键编辑面板，可以看到一个总体属性</u></h2><p> <img src="/img/blog_page/3427087-20240417221906617-586745262.png"></p><blockquote><p>.左侧分别是组合控件的各个元素，蓝色表示对其有设置。<br>.箭头表示设置指示<br>.右侧<code>属性</code>，在这里新建定义了共4个变量，因为<code>HMI没有DWORD，所以用UDINT</code>替代</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#定义好的属性</span><br>Properties&#123;ValveName,<span class="hljs-keyword">string</span>;H_IAnim,UDINT;H_FncSelInHMI,<span class="hljs-keyword">BOOL</span>;<span class="hljs-built_in">Type</span>,<span class="hljs-keyword">STRING</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-在事件中，分配了一个事件名字叫做IconClick"><a href="#6-在事件中，分配了一个事件名字叫做IconClick" class="headerlink" title="6. 在事件中，分配了一个事件名字叫做IconClick"></a><u>6. 在事件中，分配了一个事件名字叫做IconClick</u></h2><p> <img src="/img/blog_page/3427087-20240417222617643-1265903486.png"></p><blockquote><p>.这里的事件不是按钮或者其他元素的事件，它是这个<code>画面面板的事件</code></p></blockquote><h2 id="7-拆分组合"><a href="#7-拆分组合" class="headerlink" title="7. 拆分组合"></a><u>7. 拆分组合</u></h2><p> <img src="/img/blog_page/3427087-20240417222819726-679725863.png"></p><h2 id="8-分别查看每个元素的属性，动画，事件。"><a href="#8-分别查看每个元素的属性，动画，事件。" class="headerlink" title="8. 分别查看每个元素的属性，动画，事件。"></a><u>8. 分别查看每个元素的<code>属性</code>，<code>动画</code>，<code>事件</code>。</u></h2><p> <img src="/img/blog_page/3427087-20240417222931041-140801234.png"></p><blockquote><p>.这是背景的属性，<font color=green>变量地址是ScreenModules</font>,表示变量来自刚刚建立的<font color=green>Properties{ValveName,string;H_IAnim,UDINT;H_FncSelInHMI,BOOL;Type,STRING}</font>。<br>.用DWORD的bit表示一个颜色等级，减少HMI接口数量，变相增加HMI Tags点数。</p></blockquote><p> <img src="/img/blog_page/3427087-20240417223222150-1377043855.png"></p><blockquote><p>.小圆点属性，用了DWORD为它预留的bits</p></blockquote><h2 id="9-其实箭头指向H-IAnim的每个元素都意味着这个元素使用了H-IAnim"><a href="#9-其实箭头指向H-IAnim的每个元素都意味着这个元素使用了H-IAnim" class="headerlink" title="9. 其实箭头指向H_IAnim的每个元素都意味着这个元素使用了H_IAnim"></a><u>9. 其实箭头指向H_IAnim的每个元素都意味着这个元素使用了H_IAnim</u></h2><p> <img src="/img/blog_page/3427087-20240417223643521-1885037241.png"></p><blockquote><p>.<font color=green>实操过程中，其实会发现每当你对某个元素使用了某个Properties中的元素（比如H_IAnim）,都会新增加一个指向箭头。</font></p></blockquote><h2 id="10-按钮有个自己事件，按下按钮的时候取反"><a href="#10-按钮有个自己事件，按下按钮的时候取反" class="headerlink" title="10. 按钮有个自己事件，按下按钮的时候取反"></a><u>10. 按钮有个自己事件，按下按钮的时候取反</u></h2><p> <img src="/img/blog_page/3427087-20240417224001402-1317599325.png"><br> <img src="/img/blog_page/3427087-20240417224043663-1860276638.png"></p><h2 id="11-面板整个事件中（不是某一元素的事件）建立了一个叫做IconClick的事件，同理，我们在使用这个画面面板的时候就可以选择事件了。"><a href="#11-面板整个事件中（不是某一元素的事件）建立了一个叫做IconClick的事件，同理，我们在使用这个画面面板的时候就可以选择事件了。" class="headerlink" title="11. 面板整个事件中（不是某一元素的事件）建立了一个叫做IconClick的事件，同理，我们在使用这个画面面板的时候就可以选择事件了。"></a><u>11. 面板整个事件中（不是某一元素的事件）建立了一个叫做IconClick的事件，同理，我们在使用这个画面面板的时候就可以选择事件了。</u></h2><p> <img src="/img/blog_page/3427087-20240417224245108-26474349.png"><br> <img src="/img/blog_page/3427087-20240417224310000-1728003403.png"></p><h2 id="12-查看完这个面板实例后，如果不想修改库文件，请点击放弃更改并删除版本。"><a href="#12-查看完这个面板实例后，如果不想修改库文件，请点击放弃更改并删除版本。" class="headerlink" title="12. 查看完这个面板实例后，如果不想修改库文件，请点击放弃更改并删除版本。"></a><u>12. 查看完这个面板实例后，如果不想修改库文件，请点击<code>放弃更改并删除版本</code>。</u></h2><p> <img src="/img/blog_page/3427087-20240417224612771-652710552.png"></p><h2 id="13-解析的目的是想要模仿别人，最后做一个自己的东西："><a href="#13-解析的目的是想要模仿别人，最后做一个自己的东西：" class="headerlink" title="13. 解析的目的是想要模仿别人，最后做一个自己的东西："></a><u>13. 解析的目的是想要模仿别人，最后做一个自己的东西：</u></h2><p> <img src="/img/blog_page/3427087-20240417224753239-246897517.png"></p><h2 id="14-总结："><a href="#14-总结：" class="headerlink" title="14. 总结："></a><u>14. 总结：</u></h2><font color=red>   - 面板实例一定是会保存到库里面的，因为它就相当于一个没有被new的class,你在创建它的时候只是创建了一个模板，每次拖拽出来使用的时候相当于new了一个新的实例化对象。   - 在自己创建面板实例的时候，需要用到变量就在画面面板整体属性里面自己新建一个，就像下面的例子：</font><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#定义好的属性</span><br>Properties&#123;ValveName,<span class="hljs-keyword">string</span>;H_IAnim,UDINT;H_FncSelInHMI,<span class="hljs-keyword">BOOL</span>;<span class="hljs-built_in">Type</span>,<span class="hljs-keyword">STRING</span>&#125;<br></code></pre></td></tr></table></figure><font color=red>   - 建立了属于自己的属性之后才能被元素使用，这里建立的属性相当于在函数里面建立的临时变量，当然也可以给元素分配外边的HMI变量，这时候外部的变量就相当于全局变量，它失去了可复用的属性了。<ul><li>建立了自己的事件，就可以得到一个事件接口，你也不必在创建模板的时候就把事件定义出来，它只是个接口而已。</li></ul></font><p><span style="background-color:#D3D3D3"><big><strong>结束。</strong></big></span></p>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>HMI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HMI</tag>
      
      <tag>industrial control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>200Smart的一些关于寄存器和地址的用法实例</title>
    <link href="/2024/07/21/200Smart%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E5%92%8C%E5%9C%B0%E5%9D%80%E7%9A%84%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B/"/>
    <url>/2024/07/21/200Smart%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E5%92%8C%E5%9C%B0%E5%9D%80%E7%9A%84%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-累加器"><a href="#1-累加器" class="headerlink" title="1. 累加器"></a>1. 累加器</h2><ul><li>200smart 有<code>AC0  AC1 AC2  AC3</code>四个累加器，不能作为位访问</li><li>累加器大小均是<code>32位</code></li><li>累加器的数值不会自动清零，中断会保持并重新装载累加器（进入中断时先把原来的值保存起来，退出中断程序后恢复原程序）</li><li>只有<code>AC1/AC2/AC3可以用作指针</code></li><li><code>AC0不用作指针,不用作间接寻址</code><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">LD     SM0.<span class="hljs-number">0</span> <span class="hljs-comment">//Always_On</span><br>MOVD   <span class="hljs-meta">&amp;VB0, AC1 <span class="hljs-comment">//把从VB的起始的地址存入到AC1中，传地址用的DWORD</span></span><br>MOVW   *AC1<span class="hljs-punctuation">,</span> VW2 <span class="hljs-comment">//*，把AC1地址所指向的内容给到VW2，值本身用的WORD</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-指针"><a href="#2-指针" class="headerlink" title="2. 指针"></a>2. 指针</h2><ul><li>指针的目的，实现数据寻址<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//一个案例，实现VW0,VW2,VW4,VW6累加</span><br><span class="hljs-comment">//Network 1</span><br>LD     SM0.<span class="hljs-number">0</span><br>MOVD   <span class="hljs-meta">&amp;VB0, AC1 <span class="hljs-comment">//把起始地址给累加器1</span></span><br><br><span class="hljs-comment">//Network 2</span><br>LD     M0.<span class="hljs-number">0</span> <span class="hljs-comment">//启动信号,启动循环</span><br>EU         <span class="hljs-comment">//上升沿</span><br>FOR    VW100<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span> <span class="hljs-comment">//for循环，VW100只是用来装当前循环次数的容器，不需要赋值。对应成SCL表示为`for VW100:=1 to 4 by 1 do`</span><br><br><span class="hljs-comment">//Network 3</span><br>LD     SM0.<span class="hljs-number">0</span><br>MOVD   AC1<span class="hljs-punctuation">,</span> LD0 <span class="hljs-comment">//自己新建了一个地址是LD0的DWORDL区变量，用来存地址</span><br><span class="hljs-punctuation">+</span>D     <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> LD0 <span class="hljs-comment">//把LD的地址+2,结果存在LD中，表示AC1的下一个地址</span><br><span class="hljs-punctuation">+</span>I     *AC1<span class="hljs-punctuation">,</span> *LD0 <span class="hljs-comment">//把两个地址对应的数据相加，结果存在*LD0里面</span><br><span class="hljs-punctuation">+</span>D     <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> AC1 <span class="hljs-comment">//把AC1的地址+2，开始下一次循环</span><br><br><span class="hljs-comment">//Network 4</span><br>NEXT <span class="hljs-comment">//FOR..NEXT</span><br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">注意：<br>`+D`/`+I`/`MOVD`等指令，它的计算结果放在第二个数里面，比如`&lt;+D     <span class="hljs-number">2</span>, LD0&gt;`，运算结果存回LDO中。<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-冒泡排序里面应用累加器和"><a href="#3-冒泡排序里面应用累加器和" class="headerlink" title="3. 冒泡排序里面应用累加器和&amp;"></a>3. 冒泡排序里面应用<code>累加器</code>和<code>&amp;</code></h2><pre><code class="hljs">  - 原理：比较相邻的两个元素，如果第一个比第二个大，则交换位置；一轮结束后，最后一个元素将会是最大的数，针对所有元素重复上述循环</code></pre><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//子程序开始，表示一些块信息，标识符：&lt;SUBROUTINE_BLOCK&gt;</span><br>SUBROUTINE_BLOCK 冒泡排序:SBR0 <br>TITLE=子程序注释<br><br><span class="hljs-comment">//符号表内容，标识符：&lt;VAR_INPUT..END_VAR&gt;</span><br>VAR_INPUT<br><span class="hljs-symbol">start:</span>BOOL<span class="hljs-punctuation">;</span><br><span class="hljs-symbol">Data_Ptr:</span>DWORD<span class="hljs-punctuation">;</span><span class="hljs-comment">// 双字地址指针</span><br><span class="hljs-symbol">Count:</span>INT<span class="hljs-punctuation">;</span><span class="hljs-comment">// 长度</span><br>END_VAR<br><br><span class="hljs-comment">//变量表内容,标识符：&lt;VAR..END_VAR&gt;</span><br>VAR<br><span class="hljs-symbol">Index:</span>INT<span class="hljs-punctuation">;</span><span class="hljs-comment">// For循环使用变量</span><br><span class="hljs-symbol">Middle:</span>INT<span class="hljs-punctuation">;</span><span class="hljs-comment">// 中间变量</span><br>END_VAR<br><br><span class="hljs-comment">//程序段正式开始,标识符：&lt;BEGIN..END_SUBROUTINE_BLOCK&gt;</span><br>BEGIN<br>Network <span class="hljs-number">1</span> <br><span class="hljs-comment">// 创建指针地址</span><br>LD     SM0<span class="hljs-number">.0</span><br>MOVD   LD1, AC1 <span class="hljs-comment">//这里的LD1指的是Data_Ptr,要排序的数的首地址</span><br>Network <span class="hljs-number">2</span> <br>LD     L0<span class="hljs-number">.0</span> <span class="hljs-comment">//表示start，开始排序触发</span><br>FOR    LW7, <span class="hljs-number">2</span>, LW5 <span class="hljs-comment">//for循环，LW7表示index,LW5表示Count</span><br>Network <span class="hljs-number">3</span> <br>LD     SM0<span class="hljs-number">.0</span><br>LPS <span class="hljs-comment">//逻辑进栈，STL自动生成。表示并联梯形图扫描的先后</span><br>MOVD   AC1, AC2<br>+D     +<span class="hljs-number">2</span>, AC2 <span class="hljs-comment">//AC2=AC1+2</span><br>AW&gt;    *AC1, *AC2 <span class="hljs-comment">//比较指令，*AC1是否大于*AC2</span><br>MOVW   *AC1, LW9 <span class="hljs-comment">//LW9，定义的一个中间变量</span><br>MOVW   *AC2, *AC1<br>MOVW   LW9, *AC2<br>LPP <span class="hljs-comment">//逻辑出栈，STL自动生成。开始读另一个分支</span><br>+D     <span class="hljs-number">2</span>, AC1<br>Network <span class="hljs-number">4</span> <br>NEXT<br>END_SUBROUTINE_BLOCK<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>LOGO and Smart</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LOGO</tag>
      
      <tag>Smart</tag>
      
      <tag>S7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PLC指针和引用类型</title>
    <link href="/2024/07/21/PLC%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/07/21/PLC%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>使用环境是PLC1500，在1200中可能某些数据类型不可用。</p><ul><li><p>Pointer</p></li><li><p>Any</p></li><li><p>Variant</p></li><li><p>References</p></li><li><p>数组，数组DB，动态数组</p></li></ul><h2 id="1-Pointer"><a href="#1-Pointer" class="headerlink" title="1. Pointer"></a>1. Pointer</h2><p>Pointer实际上会占用<code>6个Bytes地址空间（一个单字指针+一个双字指针组合）</code>。前两个byte用来放DB块号（B#16#81表示I，82表示Q，83表示M，84表示DB，等等）或者0，后面四个放数据区，字节地址，位地址。<br>写法如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>指向db2.dbx12.<span class="hljs-number">0</span><br>P<span class="hljs-comment"># DB2.DBX12.0</span><br><br><span class="hljs-regexp">//</span>也可以不带P<span class="hljs-comment">#</span><br>DB2.DBX12.<span class="hljs-number">0</span><br>M12.<span class="hljs-number">0</span><br><br><span class="hljs-regexp">//</span>指向M12.<span class="hljs-number">0</span><br>P<span class="hljs-comment"># M12.0</span><br></code></pre></td></tr></table></figure><p>Pointer可以配合<code>AT</code>使用拆分输入的地址区：<br><img src="/img/blog_page/3427087-20240418133953581-145443367.png"></p><blockquote><p>.将输入的Pointer映射给DataStruct的结构。<br>.DataStruct并不会在FB&#x2F;FC接口中表现出来。<br>.如果实际的In_Data比DataStruct长，则DataStruct只会映射出自己已有的内容。<br>.如果实际的In_Data比DataStruct短，则DataStruct会全部映射In_Data,多出来的部分保持初始值。</p></blockquote><h2 id="2-Any"><a href="#2-Any" class="headerlink" title="2. Any"></a>2. Any</h2><p>Any和Pointer有点相似，但是Any不一样的是它<code>带有数据长度</code>。<br>Any实际上会占用<code>10个Bytes地址空间</code>，分别由数据类型，数据长度，DB块号，存储器开始地址组成。<br>写法如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//从db2.dbx12.0开始，往后数100个字节</span><br>P<span class="hljs-meta"># DB2.DBX12.0 BYTE 100</span><br>P<span class="hljs-meta"># DB2.DBB12 BYTE 100</span><br><br><span class="hljs-comment">//从M12.1开始，往后数10个位长度</span><br>P<span class="hljs-meta"># M12.1 BOOL 1O</span><br></code></pre></td></tr></table></figure><p>也可用<code>AT</code>拆分Any指针：<br><img src="/img/blog_page/3427087-20240418135352125-1913343474.png"></p><h2 id="3-Variant"><a href="#3-Variant" class="headerlink" title="3. Variant"></a>3. Variant</h2><ul><li>相比于Pointer和Any,Variant无疑是更先进和占优的。前两者本质还是对一个简单数据类型的绝对地址寻址，如果是被优化块，或者是一样STRUCT和UDT一类复杂类型，他们就显得要麻烦一些。</li><li>Variant可以指向基本的数据类型（BOOL,INT,WORD）。</li><li>Variant不占用任何背景数据块或者工作存储器的空间，因为Variant的变量不是一个对象，而是实实在在对变量的<code>引用</code>。也正是因为如此，所以它不能在函数的static部分被定义，只能定义在输入输出等接口区域或者temp区域。<br>如图，建立了两个Variant类型变量，它们可以指向任何数据。<br><img src="/img/blog_page/3427087-20240418140414480-1164437107.png"></li></ul><p><strong>有一些常用的指令来处理Variant：</strong></p><ul><li><p><code>TypeOf()</code>和<code>VariantGet（）</code>和<code>VariantPut()</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//判断time相加</span><br>IF TypeOf(#I_var1) = Time AND TypeOf(#I_var2) = Time THEN<br>    VariantGet(SRC := #I_var1,<br>               DST =&gt; #statTime1);<br>    VariantGet(SRC := #I_var2,<br>               DST =&gt; #statTime2);<br>    VariantPut(SRC:=#statTime2,<br>               DST:=#inout_var);<br>    <br>    #out_time := #statTime1 + #statTime2;<br>END_IF;<br></code></pre></td></tr></table></figure></li><li><p><code>TypeOfelements()</code>和<code>CountOfelements</code>不常用，主要配合数组使用。</p></li><li><p>使用<code>DB_ANY_TO_VARAINT</code>把DB_ANY变成VARIANT,然后自动判断引用对象类型。</p><ul><li>在某些场景中，比如物料信息，MES下发报文给PLC的时候，需要PLC自己去判断是哪个类型。在这种情况下自己建立几个表达物料类型的UDT，然后在DB中实例化。当报文进来的时候，去判断相应的类型然后做相应的事件，代码如下：<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//DB_ANY_to_Varaint</span><br>#inout_var := DB_ANY_TO_VARIANT(<span class="hljs-keyword">in</span> := #I_DB_Any, err =&gt; #statError);<br><span class="hljs-keyword">IF</span> #statError = <span class="hljs-number">0</span> THEN<br>    <span class="hljs-keyword">CASE</span> TypeOf(#inout_var) OF<br>        <span class="hljs-string">&quot;_PracticeDBB&quot;</span>.UDT_Type_A: <span class="hljs-comment">//自建类型1</span><br>            ;<br>        <span class="hljs-string">&quot;_PracticeDBB&quot;</span>.UDT_Type_B: <span class="hljs-comment">//自建类型2</span><br>            ;<br>    END_CASE;<br>END_IF;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>用<code>IS_ARRAY</code>指令判断是否是数组</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//2.is_array</span><br>IF IS_ARRAY<span class="hljs-punctuation">(</span><span class="hljs-meta">#I_var1) THEN</span><br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-meta">#temp := 0;   </span><br>END_IF<span class="hljs-punctuation">;</span><br><br></code></pre></td></tr></table></figure></li></ul><h2 id="4-References"><a href="#4-References" class="headerlink" title="4. References"></a>4. References</h2><p>在优化块中使用<code>Ref()</code>。</p><ul><li><p>使用范围：</p><ul><li>FC：Input&#x2F;Output&#x2F;Temp&#x2F;Return</li><li>FB:Temp</li><li>OB:Temp</li></ul></li><li><p>要进行引用声明用<code>REF_TO</code>，指定被引用变量所需要的数据类型，不支持bool，如图：<br><img src="/img/blog_page/3427087-20240418151558645-818716676.png"></p></li><li><p>使用ref</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//ref</span><br><span class="hljs-comment">//#temp_int是temp区的int类型数据;#my_int是static区的int数据类型</span><br>#temp_int := #my_int;<span class="hljs-comment">//不使用ref直接赋值</span><br>#my_ref_int:=#my_int;   &gt;&gt;&gt; Error <span class="hljs-comment">//使用ref后不能直接赋值了,这句话在TIA portail中显示报错。</span><br>#my_ref_int := REF(#my_int);<span class="hljs-comment">//可以使用ref()引用</span><br></code></pre></td></tr></table></figure><blockquote><p>.<font color=red><code>#my_ref_int:=#my_int</code>在博图中是编程错误的。</font></p></blockquote></li><li><p>ref的引用场景<br>用<code>^</code>解引用，完成地址到值得转换。类似C语言中的p和*p。<br>建立如下变量：<br><img src="/img/blog_page/3427087-20240418153353475-542228106.png"><br>对应测试代码如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//ref应用</span><br>#c := #a + #b;<span class="hljs-comment">//此处c=15</span><br>#my_ref_int := REF(#a);<span class="hljs-comment">//把#a的地址给引用</span><br>#my_ref_int^ := <span class="hljs-number">20</span>;<span class="hljs-comment">//因为引用类型指向#a，所以现在#a=20</span><br>#c := #a + #b;<span class="hljs-comment">//由此，#c=25</span><br>#c := #my_ref_int^ + #b;<span class="hljs-comment">//等同于c=a+b</span><br></code></pre></td></tr></table></figure></li><li><p><code>ref不支持ARRAY[*]</code>。</p></li><li><p>尝试用<code>？=</code>指令将varaint分配给一个ref，可以使得程序更加灵活。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//尝试结合varaint使用</span><br>#my_ref_UDT ?= #inout_var;<br>IF #my_ref_UDT &lt;&gt; null THEN<br>    #my_ref_UDT^.Array_byte[<span class="hljs-number">15</span>] := #my_UDT.Array_byte[<span class="hljs-number">15</span>];<br>END_IF;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-数组，数组DB，动态数组"><a href="#5-数组，数组DB，动态数组" class="headerlink" title="5. 数组，数组DB，动态数组"></a>5. 数组，数组DB，动态数组</h2><ul><li>数组本身没啥好说的，常用数据类型，格式如下:<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Array</span> [n..j] <span class="hljs-keyword">of</span> &lt;数据类型&gt;<br></code></pre></td></tr></table></figure></li><li>数组DB<br> 在项目新添加块中添加自己想要的数组DB。注意的是数组DB的属性始终是<code>优化访问</code>的。<br> 创建如下图：<br><img src="/img/blog_page/3427087-20240418155720624-723071530.png"><br><img src="/img/blog_page/3427087-20240418160011931-1830679040.png"><blockquote><p>.选择想要建立的数据类型，基本类型和复杂类型都可以<br>.选择需要的数组限值<br>.它用来存初始化阶段建立的类型和数量，后期<code>只能修改数组元素个数</code>。适合用来做固定不变的，比如物料信息一类的存储。</p></blockquote></li></ul><ol><li>数组DB的两个重要方法</li></ol><ul><li><code>ReadFromArrayDB</code></li><li><code>WriteToArrayDB</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//数组DB </span><br>#TmpInt:=ReadFromArrayDB(db := <span class="hljs-string">&quot;my_array_DB&quot;</span>, index := <span class="hljs-number">10</span>,value =&gt;#my_IM0);<br>#TmpInt:=WriteToArrayDB(db := <span class="hljs-string">&quot;my_array_DB&quot;</span>, index := <span class="hljs-number">5</span>, value := #my_IM0);<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>在数组DB的<code>属性</code>设置中，有一个勾选项叫做<code>仅存储在装载存储器中</code>。这个是为了不占用<code>数据工作存储器</code>资源而设置的。因为如配方一类的数据量会比较大，用工作存储器存太浪费了，存在装载存储器中，内存不足还可以更换。<br>选择<code>数据工作存储器</code>之后，两个指令要换成<code>ReadFromArrayDBL</code>和<code>WriteToArrayDBL</code>。</li></ol><ul><li>动态数组<br>动态数组（可变数组）的结构如下：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Array</span> [*] <span class="hljs-keyword">of</span> &lt;数据类型&gt;<br></code></pre></td></tr></table></figure></li></ul><ol><li><p>动态数组可以被定义为多维化。</p></li><li><p>动态数组因为是基于引用做的，一般只能用In&#x2F;InOut类型接口创建。</p></li><li><p>使用案例<br>在创建FB的时候，有些时候可能并不是很清楚外部传入的数组长度到底是多长的（取决于外部调用FB时连接的管脚）。但是如果某一个计算需要用到数组边界（比如算平均值或者其他的），这时候动态数组的灵活性就显现出来了。我们可以用<code>LOWER_BOUND</code>和<code>UPPER_BOUND</code>来动态化我们的边界值。<font color=red>需要注意的是，计算出来的边界值是外部连接的固定数组的边界值，相当于外部管脚连接了数组长度就固定了，并不是高级语言里面的那种<code>动态分配内存</code>的概念，我因理解错误在这里踩过坑</font><br><img src="/img/blog_page/3427087-20240418163144982-981149171.png"><br>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//动态数组方法</span><br><span class="hljs-comment">//DIM表示数组维度，1=一维数组</span><br>#L_value := LOWER_BOUND(ARR := #array_var, DIM := <span class="hljs-number">1</span>);<br>#U_value := UPPER_BOUND(ARR := #array_var, DIM := <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p> 这就是一些指针数据类型的应用了，其实PLC里面还有些指令是用来操作地址的，比如<code>PEEK和POKE</code>。以后再讲。</p>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些提高自动化率的指令</title>
    <link href="/2024/07/21/%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%87%E7%9A%84%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/07/21/%E4%B8%80%E4%BA%9B%E6%8F%90%E9%AB%98%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%87%E7%9A%84%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-地址相关"><a href="#1-地址相关" class="headerlink" title="1. 地址相关"></a>1. 地址相关</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//依据HWIO计算IW QW地址</span><br>#tempAIw := RD_ADDR(LADDR := #Interface_panel.AI_HW_IO, PIADDR =&gt; #AI_rdaddr.piadder, PICount =&gt; #AI_rdaddr.picount, PQADDR =&gt; #AI_rdaddr.temppiadder, PQCount =&gt; #AI_rdaddr.temppicount);<br>#tempAQw := RD_ADDR(LADDR := #Interface_panel.AQ_HW_IO, PIADDR =&gt; #AQ_rdaddr.temppqadder, PICount =&gt; #AQ_rdaddr.temppqcount, PQADDR =&gt; #AQ_rdaddr.pqadder, PQCount =&gt; #AQ_rdaddr.pqcount);<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//将IW值赋值给中间变量</span><br><span class="hljs-comment">//PEEK默认读取一个BYTE的地址长度，可以_选择长度</span><br>#params_AI4ST.CurrentDigitalvalue := PEEK_WORD(area := <span class="hljs-number">16</span>#<span class="hljs-number">81</span>, dbNumber := <span class="hljs-number">0</span>, byteOffset := #AI_rdaddr.piadder);<br><span class="hljs-comment">//将中间变量赋值给QW，POKE根据Value的地址长度赋值（程序内部应该判断了TypeOf(#Value)来指定长度）</span><br>POKE(area := <span class="hljs-number">16</span>#<span class="hljs-number">82</span>,<br>      dbNumber := <span class="hljs-number">0</span>,<br>      byteOffset := #AQ_rdaddr.pqadder,<br>      value := #params_AQ2ST.CurrentDigitalvalue);<br></code></pre></td></tr></table></figure><h2 id="2-序列化和反序列化"><a href="#2-序列化和反序列化" class="headerlink" title="2. 序列化和反序列化"></a>2. 序列化和反序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//序列化，结构变BYTE或者CHAR数组（不能是其他类型）</span><br>#ser1 := Serialize(SRC_VARIABLE := <span class="hljs-string">&quot;_ralrm&quot;</span>.ra.out.status, DEST_ARRAY =&gt; <span class="hljs-string">&quot;_ralrm&quot;</span>.status, POS := #dpos);<br><span class="hljs-comment">//反序列化，ARRAY [*] of BYTE 或者 CHAR 变成结构</span><br>#deser1 := Deserialize(SRC_ARRAY := <span class="hljs-string">&quot;_ralrm&quot;</span>.ra.out.ti, DEST_VARIABLE =&gt; <span class="hljs-string">&quot;_ralrm&quot;</span>.ti_buffer, POS := #dpos_1<br></code></pre></td></tr></table></figure><h2 id="3-设备状态，网络禁用指令"><a href="#3-设备状态，网络禁用指令" class="headerlink" title="3. 设备状态，网络禁用指令"></a>3. 设备状态，网络禁用指令</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go">REGION get device status <br>    <span class="hljs-comment">//st1</span><br>    <span class="hljs-comment">//use or disable IO device</span><br>    <span class="hljs-comment">//mode=0:find device status</span><br>    <span class="hljs-comment">//mode=1:use mode=2:disable</span><br>    <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.D_ACT.hw_device := <span class="hljs-number">262</span>;<br>    <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.D_ACT.TmpWord := D_ACT_DP(REQ := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.D_ACT.req, MODE := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.D_ACT.mode, LADDR := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.D_ACT.hw_device, BUSY =&gt; <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.D_ACT.busy);<br>    <br>    <span class="hljs-comment">//st2</span><br>    <span class="hljs-comment">//device status</span><br>    <span class="hljs-comment">//mode=2,IO/DP error</span><br>    <span class="hljs-comment">//state: device number in condfiguration view</span><br>    <span class="hljs-comment">//258: all the status in system.</span><br>    <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Device.io_sys := <span class="hljs-number">258</span>;<br>    <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Device.mode := <span class="hljs-number">2</span>;<br>    <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Device.TmpWord := DeviceStates(LADDR := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Device.io_sys, MODE := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Device.mode, STATE := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Device.state);<br>    <br>    <span class="hljs-comment">//st3</span><br>    <span class="hljs-comment">//module status</span><br>    <span class="hljs-comment">//mode=2 module error</span><br>    <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Module.TmpWord := ModuleStates(LADDR := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Module.io_device, MODE := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Module.mode, STATE := <span class="hljs-string">&quot;_GlobleDB_Manual&quot;</span>.State.Module.state);<br>    <br>    <span class="hljs-comment">//st4</span><br>    <span class="hljs-comment">//io_pn status </span><br>END_REGION<br></code></pre></td></tr></table></figure><h2 id="4-模拟量缩放和取消缩放"><a href="#4-模拟量缩放和取消缩放" class="headerlink" title="4. 模拟量缩放和取消缩放"></a>4. 模拟量缩放和取消缩放</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//OUT = [((FLOAT (IN) – K1)/(K2–K1)) * (HI_LIM–LO_LIM)] + LO_LIM</span><br><span class="hljs-comment">//Current channel，十进制数变模拟量</span><br>#ScalePara1.HI_LIM := <span class="hljs-number">20.0</span>;<br>#ScalePara1.LO_LIM := <span class="hljs-number">-20.0</span>;<br>#ScalePara1.BIP := <span class="hljs-number">1</span>;<br>#tempScaleInt := SCALE(IN := <span class="hljs-string">&quot;AIchannel1&quot;</span>, HI_LIM := #ScalePara1.HI_LIM, LO_LIM := #ScalePara1.LO_LIM, BIPOLAR := #ScalePara1.BIP, OUT =&gt; <span class="hljs-string">&quot;TEST_DB&quot;</span>.AImodule.channel1);<br><br><span class="hljs-comment">//UNSCALE，模拟量转换成十进制数</span><br>#tempUNScaleWord := UNSCALE(IN := #repeataccur.ana_value, HI_LIM := <span class="hljs-number">10.0</span>, LO_LIM := <span class="hljs-number">-10.0</span>, BIPOLAR := <span class="hljs-number">1</span>, OUT =&gt; #repeataccur.di_value);<br></code></pre></td></tr></table></figure><h2 id="5-组合序列和序列解析"><a href="#5-组合序列和序列解析" class="headerlink" title="5. 组合序列和序列解析"></a>5. 组合序列和序列解析</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//SCATTER,解析</span><br>SCATTER<span class="hljs-punctuation">(</span>IN <span class="hljs-punctuation">:</span><span class="hljs-punctuation">=</span> <span class="hljs-meta">#SourceWord,</span><br>OUT <span class="hljs-punctuation">=</span>&gt; <span class="hljs-meta">#DestinationArray);</span><br><br><span class="hljs-comment">//GATHER，组合</span><br>GATHER<span class="hljs-punctuation">(</span>IN <span class="hljs-punctuation">:</span><span class="hljs-punctuation">=</span> <span class="hljs-meta">#SourceArray,</span><br>OUT <span class="hljs-punctuation">=</span>&gt; <span class="hljs-meta">#DestinationWord);</span><br><br></code></pre></td></tr></table></figure><h2 id="6-交换"><a href="#6-交换" class="headerlink" title="6. 交换"></a>6. 交换</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">观察输出bit交换规律</span><br><span class="hljs-string">&quot;Tag_Result&quot;</span> <span class="hljs-string">:=</span> <span class="hljs-string">SWAP(&quot;Tag_Value&quot;);</span><br><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">Tag_Value：0000</span> <span class="hljs-number">1111 </span><span class="hljs-number">0101 </span><span class="hljs-number">0101</span><br><span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">Tag_Result:0101</span> <span class="hljs-number">0101 </span><span class="hljs-number">0000 </span><span class="hljs-number">1111</span><br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组态控制方法</title>
    <link href="/2024/07/21/%E7%BB%84%E6%80%81%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/21/%E7%BB%84%E6%80%81%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>什么叫组态控制？</p><ul><li>从应用场景上来看，如果现在集成了一个系统，它既包括了生产A要用的全部I&#x2F;O系统，又包括可生产B和C等等要用的全部I&#x2F;O系统。但是ABC的生产I&#x2F;O不一样（硬件组态不尽相同）。</li><li>这个时候我就想用一套程序（包括硬件组态）就能适配全部的ABC生产。另外我在切换硬件组态的时候还要要求不能停机。<br>以上的案例就衍生出来了<code>组态控制</code>。它实现了一种只需要一套程序和硬件组态，通过程序的方式（意味着可以通过HMI，WEB，上位机等更多方式）轻松的选择和设置相应的设备型号的方法。<br>如图：<br><img src="/img/blog_page/3427087-20240419152815011-1860432149.png"><br><font color=red>如果想要现成的程序和实例，请直接访问<a href="https://support.industry.siemens.com" title="西门子工业在线支持" >sios</a>,输入文档编号<u><font color=green>29430270</font></u>获取详细资料</font>。<strong>官网有详细的LCC库文件来实现用户的组态控制需求。</strong>本文是纯折腾用的，不想折腾就不用往下看了。</li></ul><h2 id="1-在1500中央机架上做组态控制"><a href="#1-在1500中央机架上做组态控制" class="headerlink" title="1. 在1500中央机架上做组态控制"></a>1. 在1500中央机架上做组态控制</h2><ul><li><p>先来介绍一下硬件配置数据的记录格式（直接截图了，累了）：<br><img src="/img/blog_page/3427087-20240419153514489-385441592.png"></p><ul><li>块长度计算：[4bytes+(slot数量*(bytes in per slot))]，simtic1500系列每个slot占1个字节数量</li><li>ID：DS196,它是组态控制专用DS</li><li>版本：用来区分产品类别（ET200MP,ET200SP或者SIMATIC S71500中央机架），中央机架我们就填4；另外subversion子版本1500填0。</li><li>组态slot0，值16#0表示正在使用，值16#FF表示此模块在实际安装系统中不存在</li><li>slot1:表示CPU，因为CPU始终只能在插槽1里面，值16#1表示实际安装系统中正在使用</li><li>slot2~n:表示对应模块在实际安装系统中的插槽号，16#FF表示不存在。（<u><font color=red>比如中央机架最大插槽数是31，那么结构可以到slot31去</font></u>）</li><li><u><font color=red>实际没有的slot标记为16#FF，可以在组态里面把该插槽位忽略掉</font></u></li></ul></li><li><p>操作方法<br> 1 .在硬件组态里面勾选<code>允许通过用户程序重新组态设备</code>：右键<code>PLC</code>&gt;选择<code>组态控制</code>&gt;<code>勾选</code>。</p><ol start="2"><li>建立DS196数据结构如下（<font color=red>空缺运行的注释写错了，这里和<del>空缺运行</del>没有任何关系</font>）：<br><img src="/img/blog_page/3427087-20240419160509148-2016988708.png"></li><li>DS写入设备中，靠<code>WRREC</code>指令<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//用repeat..until直到完全写入程序再往下跑<br>REPEAT  <br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">WRREC_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">I</span>.<span class="hljs-variable">REQ</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">I</span>.<span class="hljs-variable">ID</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>对于集中式设备，始终填写33（<span class="hljs-variable">Local</span>~<span class="hljs-variable">Configuration</span>）</span><br><span class="hljs-params">                    <span class="hljs-variable">INDEX</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">I</span>.<span class="hljs-variable">INDEX</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">I</span>.<span class="hljs-variable">LEN</span>, <span class="hljs-operator">/</span><span class="hljs-operator">/</span>给<span class="hljs-variable">byte0</span>中填写的字节数。</span><br><span class="hljs-params">                    <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">O</span>.<span class="hljs-variable">DONE</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">O</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">O</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">O</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">RECORD</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_DS196&quot;</span>)</span>;<br>    //status memerary<br>    IF &quot;_RD_WR&quot;.WR.O.ERROR THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">memerary</span> := &quot;_RD_WR&quot;.WR.O.STATUS;<br>    END_IF;<br>    //configDown<br>    IF 16<span class="hljs-punctuation">#</span>0070_0200 = &quot;_RD_WR&quot;.WR.O.STATUS THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">ConfigDown</span> := TRUE;<br>        &quot;_RD_WR&quot;.WR.I.REQ := FALSE;<br>    END_IF;  <br>UNTIL <span class="hljs-punctuation">#</span><span class="hljs-keyword">ConfigDown</span> END_REPEAT;<br></code></pre></td></tr></table></figure><blockquote><p>.实测过，配置组态控制之后<code>CPU启动速度</code>会变得极慢，但是最终还是要起起来的。</p></blockquote></li></ol></li></ul><h2 id="2-在I-O上做组态控制"><a href="#2-在I-O上做组态控制" class="headerlink" title="2. 在I&#x2F;O上做组态控制"></a>2. 在I&#x2F;O上做组态控制</h2><ul><li>在I&#x2F;O上做组态控制的场景如图：<br><img src="/img/blog_page/3427087-20240419161829800-710284738.png"></li><li>继续介绍IO系统的组态控制的数据格式<br><img src="/img/blog_page/3427087-20240419162656488-1687126836.png"></li><li>操作方法</li></ul><ol><li>在<code>网络视图</code>的<code>IO通信</code>下面更改标签，使能<code>可选IO设备</code>，如图：<br><img src="/img/blog_page/3427087-20240419163121466-871137239.png"><br><img src="/img/blog_page/3427087-20240419163539526-381599062.png"></li><li>如果还需要通过程序重新定义端口互连的话，则还需要去设置以太网口端口的<code>伙伴端口连接选项</code>改为<code>伙伴由用户程序设置</code>，如图：<br><img src="/img/blog_page/3427087-20240419163400282-248652718.png"><br><img src="/img/blog_page/3427087-20240419163439480-1811731726.png"></li><li>数据记录：<br><img src="/img/blog_page/3427087-20240419171334048-1237314838.png"></li><li>调用<code>ReconfigIOSystem</code><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//IO的组态控制<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">ReconfigIOSystem_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_RD_WR&quot;</span>.<span class="hljs-variable">WR</span>.<span class="hljs-variable">I</span>.<span class="hljs-variable">REQ</span>,</span><br><span class="hljs-params">                            <span class="hljs-variable">MODE</span>:<span class="hljs-operator">=</span>2,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>本质调用<span class="hljs-variable">D_ACT_DP</span>，<span class="hljs-operator">=</span>1则禁用<span class="hljs-variable">IO</span>系统中的所有网络，<span class="hljs-operator">=</span>3启用<span class="hljs-variable">IO</span>系统中的所有网络，<span class="hljs-operator">=</span>2按照<span class="hljs-variable">CTRCREC</span>重新组态<span class="hljs-variable">IO</span>网络</span><br><span class="hljs-params">                           <span class="hljs-variable">LADDR</span>:<span class="hljs-operator">=</span>64,<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-variable">CPU</span>的<span class="hljs-variable">PN</span>接口硬件标识符</span><br><span class="hljs-params">                           <span class="hljs-variable">CTRLREC</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;resys_IO&quot;</span>.<span class="hljs-variable">my_ctrlrec</span>)</span>;//上面建立的resys_IO的数据结构的内容<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-1200系统中的组态控制"><a href="#3-1200系统中的组态控制" class="headerlink" title="3. 1200系统中的组态控制"></a>3. 1200系统中的组态控制</h2><p>如图：<br><img src="/img/blog_page/3427087-20240419171325269-208943039.png"><br><img src="/img/blog_page/3427087-20240419193522865-239623283.png"></p><ul><li>1200依旧使用<code>DS196</code>来完成组态控制</li><li>实际没有的slot标记为16#FF，理解如上图</li></ul><h2 id="4-ET200MP-ET200SP-ET200PRO-ET200AL的控制组态"><a href="#4-ET200MP-ET200SP-ET200PRO-ET200AL的控制组态" class="headerlink" title="4. ET200MP_ET200SP_ET200PRO_ET200AL的控制组态"></a>4. ET200MP_ET200SP_ET200PRO_ET200AL的控制组态</h2><ul><li>总体方法和SIMATIC 1500上差不多，但是细节和DS结构上会有一些差别，详情参考TIA博图帮助信息。</li><li>ET200MP的version是3，ET200SP的version是2，AL和PRO也有自己的version</li><li>ET200SP,ET200MP,AL,PRO除了使用DS196写入（<code>WRREC</code>）配置之外，都可以使用DS197回读（<code>RDREC</code>）配置</li><li>ET200SP和ET200MP中<code>slot不存在用值127</code>表示。（ET200SP&#x2F;ET200MP支持。AL和PRO没了解）</li><li>WRREC的ID填写<code>输入扩展名为“∼Head”的 IM 子模块的硬件标识符</code>。（ET200SP&#x2F;ET200MP支持。AL和PRO没了解）</li><li>ET200SP在建立DS时除了需要slot之外，还有一个变量叫<code>info_slot</code>,<code>info_slot=1表示打开新的电位组</code>,DS197回读的时候结构需要注意一下。</li><li><strong><u><font color=red>实际使用的时候请参见博图帮助，因为这一节是摘抄的帮助的相关信息，没有自己动手做。<font></u></strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PROFINET IO应用层数据结构</title>
    <link href="/2024/07/21/PROFINET%20IO%E5%BA%94%E7%94%A8%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/07/21/PROFINET%20IO%E5%BA%94%E7%94%A8%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="从远古时代讲起"><a href="#从远古时代讲起" class="headerlink" title="从远古时代讲起"></a>从远古时代讲起</h2><ul><li><p>在300&#x2F;400的年代，SIMATIC模块要提供一些特定的信息的方法是将特定信息保存到<code>SSL</code>里，通过查询的方法获得。</p><ul><li>SSL中文名叫做<code>系统状态列表</code>，帮助里面有些时候有写成SZL，不过都是一样的东西。</li><li>在Step7中使用<code>SFC51(RDSYSST)</code>，<code>SFB54(RALRM)</code>来获取SSL和报告系统错误，具体的records数据结构会根据你的<code>SSL ID</code>在博图帮助里索引出来<br> 部分SSL ID如图：<br><img src="/img/blog_page/3427087-20240422141635419-776917532.png"></li></ul></li><li><p>在Step7中如果要获得数据记录和诊断记录，依旧可以通过SFB52(RDREC)和SFB53(WRREC)获得，因为早期PLC没有硬件标识符的概念，所以SFB的ID管脚填写IO组件的实际逻辑地址，<code>如果是输出模块，第15位必须设置为1</code>；如果是混合模块，则依据15位状态选择输入或者输出。</p></li></ul><h2 id="PN-IO的设备模型"><a href="#PN-IO的设备模型" class="headerlink" title="PN-IO的设备模型"></a>PN-IO的设备模型</h2><p><img src="/img/blog_page/3427087-20240422144025199-1466320511.png"></p><ul><li>slot:插槽，和硬件组态里面的插槽概念一致，一般来说slot1是PLC,IM那些（slot0一般是ps，MP系统最大插槽号31）</li><li>subslot：位于物理的slot中，是个虚拟的概念。比如混合模块Input和Output位于不同的两个subslots；又比如带有MSO&#x2F;MSI(最多分4个subslot)和Submodule功能的IO模块，他们可以根据需求和组态配置分出多个subslot出来。</li><li>Channel: 最小级别，也是实际承载数据的级别，它的理解就是正常里面里面的通道概念。</li></ul><h2 id="应用关系AR和应用程序进程标识符API"><a href="#应用关系AR和应用程序进程标识符API" class="headerlink" title="应用关系AR和应用程序进程标识符API"></a>应用关系AR和应用程序进程标识符API</h2><ul><li>AR:控制器或者监管者必须通过AR终端才能链接到AR设备，举个具体的例子，<code>AR</code>指的就是数据交互的传输管道（pn网络，DP所承载的数据管道等）</li><li>CR:符合PN规定的每一个AR中必须至少满足以下三个通信关系（CR）：分别是<code>records data（异步）</code>,<code>alarm data（中断）</code>,<code>I/O data（循环或同步刷新_IRT）</code>。除它们三个外，其余的CR是可选项。</li><li>API:<code>应用程序进程标识符</code>。可以理解为一个PN IO系统里面的逻辑设备。API0（默认的）是PN指定的设备（API地址范围是0x00000000和0x00010000-0x0001FFFF），其他的是供应商指定的设备。<br><img src="/img/blog_page/3427087-20240422202107321-2110906025.png"><br><img src="/img/blog_page/3427087-20240422202447718-875842832.png"><blockquote><p>.如上，还有一些地址段的API表示DP，一些地址段表示编码器，一些表示，LO-Link设备等等很多很多地址段来分类很多很多设备类型</p></blockquote></li></ul><h2 id="用户结构标识符USI"><a href="#用户结构标识符USI" class="headerlink" title="用户结构标识符USI"></a>用户结构标识符USI</h2><ul><li>USI：<code>用户结构标识符</code>。用于标识以下设备（第15位&#x3D;1的都表示子插槽级别，就是16#8000开头的USI）<ul><li>（在诊断记录中）通道诊断，W#16#8000</li><li>（在诊断记录中）拓展通道诊断, W#16#8002</li><li>（在诊断记录中）供应商特定的通道诊断, W#16#000-W#16#7FFF</li><li>（在组态记录中）用于请求目标组态，W#16#8000</li><li>（在组态记录中）用于请求实际组态，W#16#8001</li><li>上面的例子都是16#80xx开头的，表示子插槽级别，结构内容最小到通道</li><li>16#C0xx开头的是插槽级别的，结构内容最小到Slot下面的子插槽</li><li>16#F0xx开头的是API级别的</li><li>16#E0xx开头的是AR级别的</li><li>不同的寻址级别的差别是定义具体寻址结构的时候所带信息量的多少，16#80xx能够带的信息最多最丰富<br><img src="/img/blog_page/3427087-20240423132439191-169037629.png"></li></ul></li><li><font color=red>USI可以认为等同于用户程序（RDREC&#x2F;WRREC）请求数据的寻址index号但是又不完全等同，比如诊断用的800A&#x2F;E00C这类index号就属于叠加了基础USI&#x3D;16#8000&#x2F;16#8002的结果，但你不能直接用USI&#x3D;16#8000去寻址诊断，因为USI&#x3D;16#8000是寻址组态记录的index号。</font></li><li>诊断数据记录和组态数据记录的寻址结构：<br><img src="/img/blog_page/3427087-20240422202022588-374365820.png"><blockquote><p>.组态数据记录寻址结构<br><img src="/img/blog_page/3427087-20240422202139507-79281090.png"><br>.诊断数据记录寻址结构</p></blockquote></li></ul><h2 id="组态和诊断记录的结构及含义"><a href="#组态和诊断记录的结构及含义" class="headerlink" title="组态和诊断记录的结构及含义"></a>组态和诊断记录的结构及含义</h2><ul><li>头结构(组态和诊断记录具有相同的header结构)：<br><img src="/img/blog_page/3427087-20240423102052603-1122622650.png"><ul><li><code>Blocktype</code>:<ol><li>用W#16#0001和W#16#0002分别表示中断传输通道1和2（中断类）</li><li>用W#16#0010表示诊断记录（诊断类）</li><li>用W#16#0012,W#16#0013,W#16#8104分别表示目标，实际，目标实际比较（组态类）</li></ol></li><li><code>BlockLength</code>:<ol><li>块长度包含了请求来的结构的长度信息，但是不包括BlockType和BlockLength本身（共4字节），意味着我们计算<code>总长度=(BlockLength值 + 4)bytes</code>。</li></ol></li><li><code>BlockVersion</code>:<ol><li>Version本身由高字节版本（01）和低字节版本（01或者00）两个字节构成</li><li>对于W#16#0100的版本，它所表现的内容更少，它没有承载关于API的信息；</li><li>对于W#16#0101的版本，它所表现的内容更多，它承载了关于API的信息；</li></ol></li></ul></li></ul><h2 id="组态记录集结构"><a href="#组态记录集结构" class="headerlink" title="组态记录集结构"></a>组态记录集结构</h2><ul><li><p>16#80xx级别，组态USI(这里和用户程序的<code>index</code>号对应)的最后一位只有0和1，其中<code>0表示请求的是目标组态，1表示请求的是实际组态</code>。<br><img src="/img/blog_page/3427087-20240422203657987-370649958.png"></p><blockquote><p>.由图，其实如果<code>USI=E#16#E002</code>的话，是可以得到实际和目标组态的差异信息的。这个索引号<code>特殊</code>一点。</p></blockquote></li><li><p>组态记录的结构（USI为16#xx01和xx00结构一致）<br>如上介绍，组态记录的包括了BlockType,BlockLength,BlockVersion三个word。我们直接接着header的结构往下介绍：</p></li></ul><ol><li><p>当BlocVersion&#x3D;W#16#0100时（不带API信息），整体结构就该为header+numberodslots+根据slotsnumber迭代的slots结构+根据slots结构里面的subslotsnumber迭代而来的subslots结构。如图：<br><img src="/img/blog_page/3427087-20240423113921682-318463166.png"></p><blockquote><p>.因为NumberOfSlots&#x3D;2,所以调用了2遍Rec_Slot_000_001结构<br>.因为第一个Slots里面NumberOfSubSlots&#x3D;2，所以第一个Slots下面跟了2个SubSlots,同理，第二个Slots下面只跟了一个Subslots<br>.计算总长度：header(6bytes)+numberofslots(2bytes)+slots1(8bytes)+subslots1&#x2F;2(6bytes+6bytes)+slots2(8bytes)+subslots1(6bytes)&#x3D;42bytes;<br>.BlockLength显示值应该是：42-4&#x3D;38bytes。</p></blockquote></li><li><p>当BlocVersion&#x3D;W#16#0101时（带API信息），整体结构会在上述基础上迭代一个NumberOfAPIs的个数。如图：<br><img src="/img/blog_page/3427087-20240423120309312-870640852.png"></p><blockquote><p>请自行体会和上述0100版本的差异，注意各个number的值。</p></blockquote></li><li><p>当USI&#x3D;W#16#E002时（特殊情况）<br><img src="/img/blog_page/3427087-20240423122058982-1893854012.png"></p><blockquote><p>.也请自行体会结构和上面两种结构的差异，除了number外，还需注意看命名的差异。</p></blockquote></li><li><p>ModuleState的含义：<br><img src="/img/blog_page/3427087-20240423140925482-1043848103.png"></p></li><li><p>SubmoduleState的含义用bit表达，详情查找帮助</p></li></ol><h2 id="诊断记录集"><a href="#诊断记录集" class="headerlink" title="诊断记录集"></a>诊断记录集</h2><ul><li><p>诊断USI的类型比较多。例如上面提到的<code>W#16#8000（通道诊断）和W#16#8002（扩展通道诊断），这俩是反馈回来的基础USI，不属于用户寻址的index</code>就属于标准化USI值的范围，除此之外还有0A,0B,0C,10,11,12,13（<code>属于用户最终使用的index</code>）等一系列标准化USI。剩下的一些则是供应商定制的结构。</p></li><li><p>0A,0B,0C,10,11,12,13的区别：他们<code>在数据结构上没有什么太多区别</code>。<br><img src="/img/blog_page/3427087-20240423132602745-755010602.png"></p></li><li><p>A,B,C,10,11,12,13在具体信息量和触发条件上有一点细微的区别（前提不变，若第一位是8则为子插槽级，C为模块级，E为AR级，F为API级）：</p><ul><li>xx0A，10，11：诊断通道数据和扩展通道数据（由反馈的USI？&#x3D;8000&#x2F;8002确定）</li><li>xx0B，12，113: 在上述基础增加供应商特定的数据 </li><li>xx0C: 在xx0B基础上可能多包含IE&#x2F;PB连接器状态信息</li></ul></li><li><p>诊断结构</p><ol><li>header:<br><img src="/img/blog_page/3427087-20240423134049408-1999304422.png"></li><li>判断BlockVersion，等于0100时如下：<br><img src="/img/blog_page/3427087-20240423134303717-1908844309.png"></li><li>判断BlockVersion，等于0101时如下（依旧只多API信息）：<br><img src="/img/blog_page/3427087-20240423134356412-23282886.png"></li><li>根据给出的USI结构中的值判断下挂的诊断结构，当USI&#x3D;8000时：<br><img src="/img/blog_page/3427087-20240423135412181-663067120.png"></li><li>当USI&#x3D;8002时：<br><img src="/img/blog_page/3427087-20240423135455050-605215538.png"></li><li>当USI&#x3D;0-16#7FFF时：<br><img src="/img/blog_page/3427087-20240423135559434-91899254.png"></li><li>迭代次数由发生<code>诊断的模块</code>和<code>模块里面的通道数</code>决定。</li><li>ChannelErrorType:表示故障类型，不完全举例如下：<br><img src="/img/blog_page/3427087-20240423140329308-2061732091.png"></li><li>ChannelNumber:如果值等于<code>W#16#8000则为子模块</code>，其他值都属于供应商特定或保留内容。</li><li>ChannelPropertes:每一位拆分表达了不同的含义，所传递的信息比较多，详情查找帮助。</li></ol></li><li><p>应用案例说明<br><img src="/img/blog_page/3427087-20240423141417135-2096926989.png"><br>如图，一共两个子模块故障，一个子模块上两个通道故障，一个子模块上一个通道故障，用<code>E00C</code>(AR层级去请求)，迭代结构如下：<br><img src="/img/blog_page/3427087-20240423142617897-1277464026.png"></p><blockquote><p>.我们平时由RALRM得到的error_code其实本质就是在这里给出的。<br>.用E（AR级）去请求是因为发生了跨插槽的多种故障，如果用8(channel级)则只会得到一个插槽的内容，当然一个插槽可以有多个通道诊断。</p></blockquote></li></ul><h2 id="其他记录号"><a href="#其他记录号" class="headerlink" title="其他记录号"></a>其他记录号</h2><p>以下均是和用户程序index号直接对应的记录号（<code>DS </code>number）</p><ol><li>在PN IO中读取I&#x2F;O的记录<br><img src="/img/blog_page/3427087-20240423144130450-153679549.png"></li><li>返回PN的接口状态信息<br><img src="/img/blog_page/3427087-20240423144207513-1941115211.png"></li><li>返回I&amp;M标识和维护数据<br><img src="/img/blog_page/3427087-20240423144252070-1996683463.png"></li><li>返回协议参数<br><img src="/img/blog_page/3427087-20240423144322494-554334810.png"></li></ol><h2 id="I-M数据的结构"><a href="#I-M数据的结构" class="headerlink" title="I&amp;M数据的结构"></a>I&amp;M数据的结构</h2><ol><li>I&amp;M0：<br><img src="/img/blog_page/3427087-20240423144714856-2085916315.png"></li><li>I&amp;M1:<br><img src="/img/blog_page/3427087-20240423144741894-394791315.png"></li><li>I&amp;M2:<br><img src="/img/blog_page/3427087-20240423144815541-1304158415.png"></li><li>I&amp;M3：<br><img src="/img/blog_page/3427087-20240423144848135-1624380343.png"></li><li>I&amp;M4:<br><img src="/img/blog_page/3427087-20240423144914172-1133343699.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Proctocol related</category>
      
      <category>Profinet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>S7</tag>
      
      <tag>PN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】html+css基础知识</title>
    <link href="/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5Dhtml+css%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5Dhtml+css%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1>1. html标签</h1><h3>单标签</h3><ul><li><p><code>&lt;br/&gt;</code>:换行用</p></li><li><p><code>&lt;meta/&gt;</code>:存字符编码，作者，版权，关键字，网页说明等信息，不显示在浏览器中<br>a. 比如：<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=gb2312&quot;/&gt;</code></p></li><li><p><code>&lt;hr/&gt;</code>：插入一条水平线，两个标签表示插入两条</p></li><li><p><code>&lt;img/&gt;</code>:插入图片<br> a. <code>src</code>是图像存储url或名字，<code>alt</code>是图像的预备替换文本；比如：<code>&lt;img src=&quot;1.png&quot; width=&quot;100px&quot; heigh=&quot;200px&quot; alt=&quot;当显示不出来图像时就显示这句文本&quot;&gt;</code></p></li></ul><h3>成对标签</h3><ul><li><p><code>&lt;html&gt;&lt;/html&gt;</code>:html文档</p></li><li><p><code>&lt;style&gt;&lt;/style&gt;</code>:存CSS风格样式<br> a. 放在head内或者body内（body内用于设置单个标签的属性，如<code>&lt;p style=&quot;...&quot;&gt;xxx&lt;/p&gt;</code>）都行</p></li><li><p><code>&lt;link&gt;&lt;/link&gt;</code>:<a href=#session1>链接外部样式表</a></p></li><li><p><code>&lt;script&gt;&lt;/script&gt;</code>:存客户端脚本，如javascript脚本</p></li><li><p><code>&lt;head&gt;&lt;/head&gt;</code>:头</p></li><li><p><code>&lt;body&gt;&lt;/body&gt;</code>：内容</p></li><li><p><code>&lt;p&gt;&lt;/p&gt;</code>：文本段落大小<br> a. p加<code>id</code>或<code>class</code>成为css的定位点</p></li><li><p><code>&lt;title&gt;&lt;/title&gt;</code>:标题</p></li><li><p><code>&lt;a&gt;&lt;/a&gt;</code>：放超链接，锚点</p></li><li><p><code>&lt;h1&gt;&lt;/h1&gt;</code>：标题大小</p></li><li><p><code>&lt;ul&gt;&lt;/ul&gt;</code>:无序标签</p></li><li><p><code>&lt;ol&gt;&lt;/ol&gt;</code>:有序列表</p></li><li><p><code>&lt;li&gt;&lt;/li&gt;</code>:列表中的子列表</p></li><li><p><code>&lt;div&gt;&lt;/div&gt;</code>：容器，什么都能装<br> a. div标签加<code>id</code>或<code>class</code>可以成为css代码的定位点</p></li><li><p><code>&lt;table&gt;&lt;/table&gt;</code>：表格</p></li><li><p><code>&lt;span&gt;&lt;/span&gt;</code>：行内元素标签<br> a. <font color=green>span和div的区别是：div只能一段一段的选择；span只能选择单个元素，如一个图，一个链接等等；不能将div标签放在span标签内。</font></p></li></ul><h3>文档类型</h3><ul><li><code>&lt;!DOCTYPE&gt;</code>:位于文档最前端，不属于文档结构的一部分，但是它很重要，它定义的<code>Strict（严格）</code>&#x2F;<code>Transitional（过渡）</code>&#x2F;<code>Frameset（框架）</code>对网页甚至对CSS代码都有影响</li></ul><h3>内部样式表</h3><ul><li><code>&lt;!--与--&gt;</code>：为了防止一些浏览器不支持css，把css代码当普通文本显示出来<br> a. 写在<code>&lt;head&gt;&lt;/head&gt;</code>中，用<code>&lt;style&gt;&lt;/style&gt;</code>声明</li></ul><p><a name="session1"><h3>链接样式表</h3></a></p><ul><li><p><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;外部样式表的path&quot;&gt;</code>：用来分离html文件和css文件，方便用一个css文件控制多个html文件；靠link标签导入，外部样式表后缀只能是<code>.css</code>；这段标签放在head内。</p></li><li><p><code>@import url(外部样式表的path)</code>：和link的作用一样，只是引入方法不同，写法不一样</p></li></ul><h3>块元素和行内元素</h3><ul><li><p>块元素：<code>&lt;div&gt;&lt;/div&gt;</code>，<code>&lt;hn&gt;&lt;/hn&gt;</code>，<code>&lt;p&gt;&lt;/p&gt;</code>，<code>&lt;from&gt;&lt;/from&gt;</code>，<code>&lt;ul&gt;&lt;/ul&gt;</code>，<code>&lt;li&gt;&lt;/li&gt;</code>等。</p></li><li><p>行内元素：<code>&lt;span&gt;&lt;/span&gt;</code>，<code>&lt;a&gt;&lt;/a&gt;</code>，<code>&lt;img/&gt;</code>，<code>&lt;input/&gt;</code>等。</p></li><li><p><font color=green>使用css为行内元素加上<code>display:block</code>属性将其转换为块元素。</font></p></li></ul><h1>2. CSS常用设置</h1><h3>文字样式常用属性</h3><ul><li><p><code>font-family</code>:设置字体<br> a. 宋体<br> b. 楷书<br> c. 隶书<br> d. …</p></li><li><p><code>font-size</code>：设置字号</p></li><li><p><code>font-style</code>:设置斜体<br> a. <code>normal</code>:正常显示<br> b. <code>italic</code>：斜体显示文字<br> c. <code>oblique</code>:比斜体更斜的斜体</p></li><li><p><code>font-weight</code>:设置加粗<br> a. <code>normal</code>:正常粗细<br> b. <code>bold</code>:粗体<br> c. <code>bolder</code>:加粗体<br> d. <code>lighter</code>:细体<br> e. <code>number</code>:100-900共九个级别，数字越大字数越粗</p></li><li><p><code>color</code>:设置颜色<br> a. rgb显示：rgb（255,0,0）<br> b. 十六进制数：#ff0000</p></li><li><p><code>font-variant</code>:设置变体<br> a. <code>normal</code>:正常字母<br> b. <code>small-caps</code>:小型大写字母</p></li><li><p><code>font</code>:组合设置字体属性<br> a. 比如<code>p&#123;font:italic bold small-caps 15pt 宋体&#125;</code></p></li></ul><h3>段落和其他文字常用属性</h3><ul><li><p>元素的长度单位<br> a. 绝对长度：<code>in(英寸)</code>，<code>cm(厘米)</code>，<code>mm(毫米)</code>，<code>pt(印刷点数)</code>，<code>pc(1pc=12pt)</code><br> b. 相对长度：<code>px(像素)</code>，<code>%（字体默认大小的比例）</code>，<code>em(字体元素的倍数)</code></p></li><li><p><code>text-decoration</code>:修饰文字<br> a. <code>underline</code>：添加下划线<br> b. <code>overline</code>：添加上划线<br> C. <code>line-through</code>:添加删除线<br> d. <code>blink</code>:添加文字闪烁效果，多数浏览器不支持<br> c. <code>none</code>:没有修饰文字，常用于取消超链接的下划线</p></li><li><p><code>text-transform</code>:转换英文字母大小<br> a. <code>capitalize</code>:每个单词首字母大写<br> b. <code>uppercase</code>:所有字母大写<br> c. <code>lowercase</code>:所有字母小写<br> d. <code>none</code>:默认值</p></li><li><p><code>letter-spacing</code>:设置中文字符间距<br> a. <code>normal</code>：正常<br> b. <code>12px</code>:设置绝对数值<br> c. <code>2em</code>:字体高</p></li><li><p><code>word-spacing</code>：设置英文字符间距<br> a. <code>normal</code>：正常<br> b. <code>12px</code>:设置绝对数值<br> c. <code>2em</code>:字体高</p></li><li><p><code>text-align</code>:设置段落的水平对齐方式<br> a. <code>left</code>:文本左对齐<br> b. <code>right</code>:文本右对齐<br> c. <code>center</code>:文本居中<br> d. <code>justify</code>:文本两端对齐</p></li><li><p><code>text-indent</code>:设置段落缩进</p></li><li><p><code>line-height</code>:设置行高</p></li></ul><h3>常用符号</h3><table><thead><tr><th>符号</th><th>html码</th></tr></thead><tbody><tr><td>“</td><td><code>&amp;quot;</code></td></tr><tr><td>‘</td><td><code>&amp;qpos;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>￥</td><td><code>&amp;yen;</code></td></tr><tr><td>&copy;</td><td><code>&amp;copy;</code></td></tr><tr><td>&reg;</td><td><code>&amp;reg;</code></td></tr><tr><td>空格</td><td><code>&amp;nbsp;</code></td></tr></tbody></table><h3>列表样式常用属性</h3><ul><li><p><code>list-style-type</code>:设置列表符号<br> a. <code>disc</code>:黑色圆点，默认设置<br> b. <code>circle</code>:空心圆圈<br> c. <code>square</code>:黑色正方形<br> d. <code>decimal或</code>l:数字<br> e. <code>lower-roman或i</code>:小写罗马文字<br> f. <code>upper-roman或I</code>:大写罗马文字<br> g. <code>lower-latin或a</code>：小写拉丁文<br> h. <code>upper-latin或A</code>：大写拉丁文<br> i. <code>none</code>:不显示任何符号</p></li><li><p><code>list-style-image</code>:使用图片符号<br> a. 基本语法：<code>list-style-image:url</code>,用来将图片作为列表符号，从而美化列表。</p></li><li><p><code>list-style-position</code>：调整列表位置<br> a. <code>outside</code>:默认值，列表符号不向内缩进<br> b. <code>inside</code>:列表符号向内缩进</p></li></ul><h3>图片样式常用属性</h3><ul><li><p><code>border-style</code>：边框样式：属性自查</p></li><li><p><code>border-width</code>:边框宽度：属性自查</p></li><li><p><code>border-color</code>：边框颜色：属性自查</p></li><li><p><code>text-align</code>:图片水平对齐：属性自查</p></li><li><p><code>vertical-align</code>:图片垂直对齐：属性自查</p></li><li><p><code>float:right</code>：图片居于文字右边</p></li><li><p><code>float:left</code>:图片居于文字左边</p></li><li><p><code>background-color</code>:设置图片颜色，有<code>关键字</code>，<code>rgb</code>,<code>transparent</code></p></li><li><p>设置背景图片<br> a. <code>background-img:url</code>:插入背景图<br> b. <code>background-repeat</code>:设置重复方式：<code>repeat</code>,<code>repeat-x</code>,<code>repeat-y</code>,<code>no-repeat</code><br> c. <code>background-position</code>:设置图位置：属性自查<br> d. <code>background-attachment</code>:固定背景图：属性自查</p></li><li><p>图片背景样式综合设置：<br> a. 如<code>background:red url(p1.png) no-repeat fixed 5px 10px</code></p></li></ul><h1>3. html整体框架</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>XXX<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>/*link或者@二选一*/<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;外部样式表的path&quot;</span>&gt;</span><br>@import url(外部样式表的path)<br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=gb2312&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/*内部样式表*/</span></span><br><span class="language-css">&lt;!--</span><br><span class="language-css">selector1&#123;property:value;&#125;</span><br><span class="language-css">selector2&#123;property:value;&#125;</span><br><span class="language-css">selector3&#123;property:value;&#125;</span><br><span class="language-css">...</span><br><span class="language-css">--&gt;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/*选择器及选择器格式：property:value;*/</span></span><br><span class="language-css"><span class="hljs-comment">/*标签选择器*/</span></span><br><span class="language-css"><span class="hljs-comment">/*类选择器*/</span></span><br><span class="language-css"><span class="hljs-comment">/*id选择器*/</span></span><br><span class="language-css"><span class="hljs-comment">/*嵌套选择器*/</span></span><br><span class="language-css"><span class="hljs-comment">/*通用选择器*/</span></span><br><span class="language-css"><span class="hljs-comment">/*集体选择器*/</span></span><br><span class="language-css"><span class="hljs-comment">/*选择器优先级：行内样式表&gt;内嵌样式表&gt;链接样式表&gt;导入样式表*/</span></span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>:<span class="hljs-number">#ffe5e5</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">42px</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:<span class="hljs-number">#9d3151</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#link1</span>&#123;<span class="hljs-comment">/*id=link1的div容器css风格*/</span></span><br><span class="language-css"><span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#link1</span> <span class="hljs-selector-tag">a</span>&#123;<span class="hljs-comment">/*id=link1的div容器中的&lt;a&gt;标签的css风格*/</span></span><br><span class="language-css"><span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#bg</span> <span class="hljs-selector-tag">img</span>&#123;<span class="hljs-comment">/*id=bg的div容器中的img图片css风格（文字环绕）*/</span></span><br><span class="language-css"><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.p1</span>&#123;<span class="hljs-comment">/*class等于p1的css风格，类名前要加&quot;.&quot;*/</span></span><br><span class="language-css"><span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">42px</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:<span class="hljs-number">#9d3151</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">*&#123;<span class="hljs-comment">/* &quot;*&quot;表示通配符 */</span></span><br><span class="language-css"><span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">42px</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:<span class="hljs-number">#9d3151</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>，<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">h3</span>,<span class="hljs-selector-tag">h4</span>,<span class="hljs-selector-tag">h5</span>&#123;<span class="hljs-comment">/*集体选择*/</span></span><br><span class="language-css"><span class="hljs-attribute">text-align</span>:center;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">42px</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:<span class="hljs-number">#9d3151</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end application</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO v8 环境搭建</title>
    <link href="/2024/07/21/YOLO%20v8%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/21/YOLO%20v8%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Anaconda3安装："><a href="#1-Anaconda3安装：" class="headerlink" title="1. Anaconda3安装："></a>1. Anaconda3安装：</h2><ul><li>下载：<a href="https://www.anaconda.com/" title="anaconda">anaconda download</a><br>默认：<br><img src="/img/blog_page/3427087-20240424105335272-89511551.png"><br>安装到<code>根目录</code>下：<br><img src="/img/blog_page/3427087-20240424105410846-1280854706.png"><br>默认：<br><img src="/img/blog_page/3427087-20240424105659900-1930409797.png"><br>下面一路默认，直至安装完成。</li><li>配置anaconda环境变量：<br><img src="/img/blog_page/3427087-20240424192115607-800661570.png"><br><img src="/img/blog_page/3427087-20240424192139835-1039518583.png"><br>我的安装路径是C盘，所以这么写，如果anaconda安装路径不是C盘，请按照实际更换。</li></ul><h2 id="2-安装VScode并在vscode中配置anaconda"><a href="#2-安装VScode并在vscode中配置anaconda" class="headerlink" title="2. 安装VScode并在vscode中配置anaconda"></a>2. 安装VScode并在vscode中配置anaconda</h2><h5 id="section1">配置解释器</h5><ul><li>安装，我有vscode所以不用重新安装了，去官网安装即可。</li><li>配置anaconda<ul><li>Vscode中使用<code>Ctrl+P</code>打开搜索</li><li>搜索栏里输入：<code>&gt;select interpreter</code></li><li>找到自己想要的anaconda路径下来的python.exe，<del>如果找不到的话自己去anaconda的安装路径下把python.exe的路径复制过来</del>。<font color=red> <em>最好等确定了anaconda虚拟环境后再来做这个工作，不然基于虚拟环境的python在这里也用不了。</em></font></li><li>（<font color=red> <em>终端最好使用anaconda自带的终端，因为可以在anaconda建立虚拟环境，使用的python环境也是基于虚拟环境的</em></font>）<br><img src="/img/blog_page/3427087-20240424112437783-1454796338.png"></li></ul></li></ul><h2 id="3-配置镜像源："><a href="#3-配置镜像源：" class="headerlink" title="3. 配置镜像源："></a>3. 配置镜像源：</h2><ul><li>pip配置镜像源（这里是清华镜像源）<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//复制到终端执行，或者复制到anaconda的终端运行</span><br>pip install -i https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br>pip config set global.index-url https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure></li><li>检查配置是否OK<ul><li>只要终端输出<code>pip.ini</code>就装好了<br><img src="/img/blog_page/3427087-20240424113650002-1053817887.png"></li><li>去文件管理器路径下输入<code>%APPDATE%</code>，找到pip.ini的文件，记事本打开，看是否是我们使用的源。<br><img src="/img/blog_page/3427087-20240424140907912-2040140447.png"></li></ul></li><li>conda配置镜像源：<ul><li><p>在终端输入<code>conda config --set show_channel_urls yes</code>,执行后会在用户里面生成一个后缀名为<code>.condarc</code>的文件<br><img src="/img/blog_page/3427087-20240424114235365-595188138.png"></p></li><li><p>使用记事本打开，复制以下镜像源并保存</p></li></ul></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/<span class="hljs-attribute">r</span><br><span class="hljs-attribute">  - https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="hljs-attribute">custom_channels</span>:<br>  <span class="hljs-attribute">conda-forge</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">msys2</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">bioconda</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">menpo</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">pytorch</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">pytorch-lts</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br>  <span class="hljs-attribute">simpleitk</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//上述完成后，在终端清除索引缓存，保证用的是镜像索引</span><br>conda clean <span class="hljs-punctuation">-</span>i<br></code></pre></td></tr></table></figure><h2 id="4-安装pytorch"><a href="#4-安装pytorch" class="headerlink" title="4. 安装pytorch"></a>4. 安装pytorch</h2><ul><li><p>创建conda虚拟环境<br>因为在创建虚拟环境的时候会顺带下载一个python,所以接下来在虚拟环境里面写的一切代码其实都是在虚拟环境的python中<br><font color=red> <em><strong>虚拟环境python请指定3.9！！！</strong></em></font><br><font color=red> <em><strong>虚拟环境python请指定3.9！！！</strong></em></font><br><font color=red> <em><strong>虚拟环境python请指定3.9！！！</strong></em></font></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">//查看安装的conda包</span><br>conda list<br><span class="hljs-comment">//查看已有的conda环境</span><br>conda env list<br><span class="hljs-comment">//查看conda版本</span><br>conda --version<br><span class="hljs-comment">//查看conda信息</span><br>conda info<br><span class="hljs-comment">//python创建虚拟环境</span><br>conda create -n your_env_name python=<span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span><br><span class="hljs-comment">//删除虚拟环境</span><br>conda remove -n your_env_name --<span class="hljs-symbol">all</span><br><span class="hljs-comment">//激活环境</span><br>conda activate your_env_name<br></code></pre></td></tr></table></figure></li><li><p>在线安装：（我的电脑没有显卡，所以选择CPU加速安装）：<br>(<del><font color=red>有坑，这里不要去带版本，对于网上教程要求的版本，可能你看到的时间已经不适用于你现在的python了。</font></del>)<br>(<del><font color=red>conda install pytorch&#x3D;&#x3D; 1.8.1 torchvision&#x3D;&#x3D; 0.9.1 torchaudio&#x3D;&#x3D; 0.8.1 cpuonly -c pytorch</font></del>)<br><font color=red><em><strong>报错如下：</strong></em></font></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 这个报错是在告诉我们0.81的torchaudio是找不到适合python3.9的包的</span><br><span class="hljs-comment"># 虽然在下表中找到了0.8.1可以用在py3.9里，可能是清华源的镜像太老了没有更新导致的</span><br>The following packages are incompatible<br>├─ pin<span class="hljs-number">-1</span> is <span class="hljs-keyword">installable </span><span class="hljs-keyword">and </span>it requires<br>│  └─ python <span class="hljs-number">3</span>.<span class="hljs-number">9</span>.* , which can <span class="hljs-keyword">be </span><span class="hljs-keyword">installed;</span><br><span class="hljs-keyword"></span>└─ torchaudio <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>  is not <span class="hljs-keyword">installable </span><span class="hljs-keyword">because </span>there are no viable options<br>   ├─ torchaudio <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span> would require<br>   │  └─ python &gt;=<span class="hljs-number">3</span>.<span class="hljs-number">6</span>,&lt;<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span><span class="hljs-built_in">a0</span> , which conflicts with any <span class="hljs-keyword">installable </span>versions previously reported;<br>   ├─ torchaudio <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span> would require<br>   │  └─ python &gt;=<span class="hljs-number">3</span>.<span class="hljs-number">7</span>,&lt;<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span><span class="hljs-built_in">a0</span> , which conflicts with any <span class="hljs-keyword">installable </span>versions previously reported;<br>   ├─ torchaudio <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span> would require<br>   │  └─ python &gt;=<span class="hljs-number">3</span>.<span class="hljs-number">8</span>,&lt;<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span><span class="hljs-built_in">a0</span> , which conflicts with any <span class="hljs-keyword">installable </span>versions previously reported;<br>   └─ torchaudio <span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span> would require<br>      └─ python_abi <span class="hljs-number">3</span>.<span class="hljs-number">9</span>.* *_cp39, which does not exist (perhaps a missing channel).<br></code></pre></td></tr></table></figure></li><li><p>python&#x2F;pytorch&#x2F;torchvision&#x2F;torchaudio版本关系一览：<br><img src="/img/blog_page/3427087-20240425101555113-691871935.png"><br><img src="/img/blog_page/3427087-20240425101629510-557482046.png"></p></li></ul><p>(<font color=green><strong>指定pyhon版本3.9，并用这个版本安装pytorach:</strong></font><font color=red><del>conda install pytorch&#x3D;&#x3D; 1.10.0 torchvision&#x3D;&#x3D; 0.11.1 torchaudio&#x3D;&#x3D; 0.10.0 cpuonly -c pytorch</del></font>)</p><p><a href="#section3">转到版本问题最终解决方案</a></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br><span class="hljs-comment">//反复测试后，不是一定要带版本号才行</span><br><span class="hljs-comment">//确认装的python版本正确后，安装pytorch和 torchvision最好不要去带版本，让pip/conda自动帮你选最合适的版本</span><br>conda install pytorch torchvision torchaudio cpuonly <span class="hljs-punctuation">-</span>c pytorch<br></code></pre></td></tr></table></figure><p>下载如图所示，选择<code>Y</code>就行：<br><img src="/img/blog_page/3427087-20240425104726646-1237986810.png"></p><p>因为是国内的源，下载速度还是很快的，完成会出现<code>done</code>。</p><ul><li>若卡在solving environment或有其他问题(<strong><font color=red> 问题可能是python版本导致的，如果确定不是因为版本问题引起的可以折腾下面的内容，没有这个问题的不用折腾下面的内容</font></strong>)，可以选择从pytorch官网安装：<ul><li>下载：<a href="https://www.pytorch.org/" title="pytorch">pytorch online downlaod</a></li><li>选择版本，OS,package，等等信息，最后生成了一个command。<br><img src="/img/blog_page/3427087-20240424143156687-1425978902.png"></li><li>将command复制到终端或者conda中下载（看你怎么选的package）；如下图,包很大,但是因为上面配置了镜像源，所以下起来还挺快（包特别大，下了个开头我心疼流量直接取消了）。<br><img src="/img/blog_page/3427087-20240424143308672-936963127.png"></li></ul></li><li>除了在线下载之后，还可以选择去镜像源离线下载，下载后用命令安装<ul><li>下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/" title="pytorch">pytorch offline downlaod</a></li><li>查看自己处理器架构，在终端输入<code>systeminfo</code>，</li><li>下载<code>pytorch</code>和<code>torchivision</code>和<code>torchaudio</code>包</li><li>下载好后，终端输入<code>cd 包位置</code></li><li>输入安装命令<code>conda install --offline pytorch包名</code></li><li>输入安装命令<code>conda install --offline torchvision包名</code></li><li>输入安装命令<code>conda install --offline torchaudio包名</code></li><li>安装好后，在终端输入<code>import torch</code>和<code>torch.cuda.is_available()</code>，不管返回true或者false,不报错就证明装好了。</li></ul></li></ul><h2 id="5-CV2安装"><a href="#5-CV2安装" class="headerlink" title="5. CV2安装"></a>5. CV2安装</h2><p><font color=red> <strong>先默认，pip会去找适合py3.9的最新版</strong></font></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> opencv-python<br></code></pre></td></tr></table></figure><h2 id="6-YOLO-v8代码库下载安装："><a href="#6-YOLO-v8代码库下载安装：" class="headerlink" title="6. YOLO v8代码库下载安装："></a>6. YOLO v8代码库下载安装：</h2><p><font color=red> <strong>默认</strong></font></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">pip install ultralytics  <span class="hljs-comment">--user</span><br></code></pre></td></tr></table></figure><h2 id="7-yolo数据集"><a href="#7-yolo数据集" class="headerlink" title="7. yolo数据集"></a>7. yolo数据集</h2><p><font color=red> <strong>默认</strong></font></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> labelImg<br></code></pre></td></tr></table></figure><ul><li>终端敲<code>labelImg</code>使用<ul><li>open:打开单张图片</li><li>open Dir:打开文件夹中的所有图片</li><li>Change Save Dir:更改标签存放路径</li><li>格式选择yolo格式<br><img src="/img/blog_page/3427087-20240424174544540-966719915.png"><br><img src="/img/blog_page/3427087-20240424181421883-1283171647.png"></li></ul></li></ul><h2 id="8-yolo文件夹建立"><a href="#8-yolo文件夹建立" class="headerlink" title="8. yolo文件夹建立"></a>8. yolo文件夹建立</h2><h5 id="section2">yolo可以按如下层级和命名`建立文件夹`：</h5>（<font color=green>命名尽量规范，不然yolo可能识别不出而报错</font>）<ul><li>dataset<ul><li>images<ul><li>test</li><li>train</li><li>val</li></ul></li><li>labels<ul><li>test</li><li>train</li><li>val</li></ul></li></ul></li></ul><h2 id="9-标注-训练图片"><a href="#9-标注-训练图片" class="headerlink" title="9. 标注&#x2F;训练图片"></a>9. 标注&#x2F;训练图片</h2><ul><li><p>原始图集放<code>dataset-images</code>里面。<br><img src="/img/blog_page/3427087-20240424181040935-1996790290.png"></p></li><li><p>启动<code>LabelImg</code>，找到图片路径<br><img src="/img/blog_page/3427087-20240424180829407-1425225907.png"></p></li><li><p>点击<code>Change Save Dir</code>选择保存标签的路径，保存标签路径为<code>dataset-labels</code>。<br><img src="/img/blog_page/3427087-20240424181207798-1152549194.png"></p></li><li><p>设置自动保存图片和标签<br><img src="/img/blog_page/3427087-20240424181551159-1223181770.png"></p></li><li><p>打标签<br><img src="/img/blog_page/3427087-20240425111000811-186101704.png"></p></li><li><p>（<font color=red> <strong>有坑：python版本太高（<del>本来装的3.11</del>）会导致LabelLmg闪退，报错如下：</strong></font>）<br><font color=red> <strong>最好把之前安装的环境统一降到兼容python3.9的环境</strong></font><br><font color=red><em><strong>报错如下：</strong></em></font></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">TypeError: arguments did not <span class="hljs-keyword">match</span> any overloaded <span class="hljs-keyword">call</span>:<br>  drawLine(self, <span class="hljs-keyword">l</span>: QLineF): <span class="hljs-keyword">argument</span> <span class="hljs-number">1</span> <span class="hljs-built_in">has</span> unexpected <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span><br>  drawLine(self, <span class="hljs-built_in">line</span>: QLine): <span class="hljs-keyword">argument</span> <span class="hljs-number">1</span> <span class="hljs-built_in">has</span> unexpected <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span><br>  drawLine(self, x1: <span class="hljs-keyword">int</span>, y1: <span class="hljs-keyword">int</span>, x2: <span class="hljs-keyword">int</span>, y2: <span class="hljs-keyword">int</span>): <span class="hljs-keyword">argument</span> <span class="hljs-number">1</span> <span class="hljs-built_in">has</span> unexpected <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span><br>  drawLine(self, p1: QPoint, p2: QPoint): <span class="hljs-keyword">argument</span> <span class="hljs-number">1</span> <span class="hljs-built_in">has</span> unexpected <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span><br>  drawLine(self, p1: Union[QPointF, QPoint], p2: Union[QPointF, QPoint]): <span class="hljs-keyword">argument</span> <span class="hljs-number">1</span> <span class="hljs-built_in">has</span> unexpected <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span><br><br># 总体来说，就是<span class="hljs-keyword">python</span>版本没有对应上导致闪退<br># 解决方案，如下代码：<br># 相当于是新建立了一个名字叫labelimg的conda虚拟空间，但是这个空间里面还是需要重新装符合<span class="hljs-number">3.9</span>版本的pytorach那些<br>conda create -n labelimag <span class="hljs-keyword">python</span>=<span class="hljs-number">3.9</span><br></code></pre></td></tr></table></figure></li><li><p>标签<br>打标签是个简单而繁琐的事情，我这里就打了5张标注，标准名为<code>highspeedrail</code><br><img src="/img/blog_page/3427087-20240425111438476-1644608744.png"></p></li></ul><h2 id="10-数据集"><a href="#10-数据集" class="headerlink" title="10. 数据集"></a>10. 数据集</h2><ul><li><p>自动生成的标签<br>打完标签之后可以看一眼<code>dataset-labels</code>，里面已经为我们打的每一个标签都新建了一个txt文件（<font color=green>class装的是标签信息，其他装的是一些模型参数信息，不要去手动改</font>）了。<br>打完标注之后就可以直接<code>关闭labelImg</code>了。<br><img src="/img/blog_page/3427087-20240425111836539-1973083189.png"></p></li><li><p>整理数据</p><ul><li><p>在<code>images</code>和<code>labels</code>的文件夹下分别存放<code>test</code>,<code>train</code>,<code>val</code>三个子文件夹。<br><a href="#section2">转到文件夹建立</a></p></li><li><p>把图片按比例放入<code>images</code>文件夹中，一般<code>train</code>训练集放<code>60%</code>（比如10张图片就放6张）；剩下的<code>test和val</code>各占<code>20%</code>（2张&#x2F;2张）</p></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240425114823601-1842963332.png"></p><ul><li><p><code>标签与之一一对应</code>，<font color=green>图片的位置和它的标签对应好</font>，不然可能会报错!<br><code>class.txts</code>文件放到dataset下一级去（和labels同级）<br><img src="/img/blog_page/3427087-20240425115402534-1044476186.png"><br><img src="/img/blog_page/3427087-20240425123515822-878997939.png"></p></li><li><p>为数据集创建一个<code>data.yaml</code>文件，文件位于dataset的根目录下，文件应该包括数据路径，类别数，类别信息等必要的内容。<br>把dataset放进之前建立的yolo_v8（其实就是为vscode工作区建立的一个工作文件夹）的空文件夹中去<br><img src="/img/blog_page/3427087-20240425123934150-1484668699.png"><br><code>data.yaml如下:</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">train:</span> .<span class="hljs-keyword">/images/</span>train <span class="hljs-meta">#自己的训练集地址</span><br><span class="hljs-symbol">val:</span> .<span class="hljs-keyword">/images/</span>val <span class="hljs-meta">#自己的验证集地址</span><br><span class="hljs-symbol">test:</span> .<span class="hljs-keyword">/images/</span>test <span class="hljs-meta">#自己的测试集地址</span><br><br><span class="hljs-meta"># Classes</span><br><span class="hljs-symbol">nc:</span> <span class="hljs-number">1</span> <span class="hljs-meta"># 自己定义的类别数 number of classes</span><br><span class="hljs-symbol">names:</span> [ <span class="hljs-meta">#类别的名字</span><br><span class="hljs-string">&quot;highspeedrail&quot;</span><br><br>]<br></code></pre></td></tr></table></figure></li></ul><h2 id="11-开始训练"><a href="#11-开始训练" class="headerlink" title="11. 开始训练"></a>11. 开始训练</h2><ul><li><p>python的解释器路径，终端敲<code>where python</code></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">(yolo_v8) <span class="hljs-name">C</span>:\WINDOWS\system32&gt;where python<br><span class="hljs-name">C</span>:\Users\wuyucun\.conda\envs\yolo_v8\python.exe<br><span class="hljs-name">C</span>:\anaconda3\python.exe<br><span class="hljs-name">C</span>:\Users\wuyucun\AppData\Local\Programs\Python\Python311\python.exe<br></code></pre></td></tr></table></figure><p>volo_v8\环境下的就是我们在虚拟环境中使用的python解释器，去vscode中把解释器选中为它就好了。<br><a href="#section1">转到配置解释器</a></p></li><li><p>yolo V8训练<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ultralytics <span class="hljs-keyword">import</span> YOLO<br><br><span class="hljs-comment"># Load a model</span><br><span class="hljs-comment">#model = YOLO(&#x27;yolov8n.yaml&#x27;)  # build a new model from YAML</span><br><span class="hljs-comment">#model = YOLO(&#x27;yolov8n.pt&#x27;)  # load a pretrained model (recommended for training)</span><br>model = YOLO(<span class="hljs-string">&#x27;yolov8n.yaml&#x27;</span>).load(<span class="hljs-string">&#x27;yolov8n.pt&#x27;</span>)  <span class="hljs-comment">#加载模型和预训练权重</span><br><br><span class="hljs-comment"># Train the model</span><br>model.train(data=<span class="hljs-string">r&#x27;C:\Users\wuyucun\Desktop\yolo_v8\dataset\data.yaml&#x27;</span>, epochs=<span class="hljs-number">100</span>, imgsz=<span class="hljs-number">640</span>,workers=<span class="hljs-number">2</span>) <span class="hljs-comment">#训练数据集路径，epochs，迭代次数；imgsz，图片大小；works,线程。</span><br></code></pre></td></tr></table></figure><h5 id="section3">训练时又产生了因版本问题引起的报错：</h5></li></ul><p><font color=red>这里面又有个坑，虽然我们前面已经很认真的在选版本的，但是在训练的时候依旧报了个错误告诉我pytorch和torchvision版本不兼容（因为这个报错的存在，我weights里面的权重并没有生成）</font><br><font color=red><em><strong>报错如下</strong></em></font></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">RuntimeError: Couldn&#x27;t load custom C++ ops. This can happen<span class="hljs-built_in"> if </span>your PyTorch<span class="hljs-built_in"> and </span>torchvision versions are incompatible,<span class="hljs-built_in"> or </span>if you had errors while compiling torchvision from source. For further information on the compatible v<br>ersions,<span class="hljs-built_in"> check </span>https://github.com/pytorch/vision<span class="hljs-comment">#installation for the compatibility matrix. Please check your PyTorch version with torch.__version__ and your torchvision version with torchvision.__version__ and verify if the</span><br>y are compatible,<span class="hljs-built_in"> and </span>if<span class="hljs-built_in"> not </span>please reinstall torchvision so that it matches your PyTorch install.<br></code></pre></td></tr></table></figure><p>于是我又按照pytorch官网建议，全部不带版本去安装：<br><img src="/img/blog_page/3427087-20240425145131824-1813757175.png"><br>敲入终端后，终端回了我一些信息：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">...<br><br>The following packages will be UPDATED:<br><br>  <span class="hljs-function"><span class="hljs-title">pytorch</span>                                1.10.0-py3.9_cpu_0 --&gt;</span> <span class="hljs-number">2.3</span>.<span class="hljs-number">0</span>-py3.<span class="hljs-number">9</span>_cpu_0<br>  <span class="hljs-function"><span class="hljs-title">torchaudio</span>                              0.10.0-py39_cu113 --&gt;</span> <span class="hljs-number">2.3</span>.<span class="hljs-number">0</span>-py39_cpu<br>  <span class="hljs-function"><span class="hljs-title">torchvision</span>                             0.11.1-py39_cu113 --&gt;</span> <span class="hljs-number">0.18</span>.<span class="hljs-number">0</span>-py39_cpu<br><br>...<br></code></pre></td></tr></table></figure><p><font color=green>他把我原来的旧版本全部变成py3.9适用的最新版本了。首先保证你python环境是对的话。不指定版本安装也是可以的，我用这个成功了</font></p><p>如果环境没问题，最后跑出来的结果应该如下图所示：<br><img src="/img/blog_page/3427087-20240425150438677-2028751450.png"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Vision</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
      <tag>Yolo v8</tag>
      
      <tag>Anaconda3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>制作表格_表单并用CSS美化</title>
    <link href="/2024/07/21/%E5%88%B6%E4%BD%9C%E8%A1%A8%E6%A0%BC_%E8%A1%A8%E5%8D%95%E5%B9%B6%E7%94%A8CSS%E7%BE%8E%E5%8C%96/"/>
    <url>/2024/07/21/%E5%88%B6%E4%BD%9C%E8%A1%A8%E6%A0%BC_%E8%A1%A8%E5%8D%95%E5%B9%B6%E7%94%A8CSS%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="1-制作表格"><a href="#1-制作表格" class="headerlink" title="1. 制作表格"></a>1. 制作表格</h2><ul><li>用到<code>background-img</code>设置表头背景图片（导航栏也可以这么用）</li><li>用到<code>设置单双行不同颜色</code>的方法</li><li>用到合并列<code>colspan=number</code>,合并行用<code>rowspan=number</code></li><li>用到<code>设置表格范围宽度</code>方法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">table</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#3a3a3a</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">td</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#3a3a3a</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">th</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">image/屏幕截图.jpg</span>);<span class="hljs-comment">/*用图片来当表头的背景*/</span></span><br><span class="language-css">            <span class="hljs-attribute">background-repeat</span>: repeat-x;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;<span class="hljs-comment">/*设置的高度和图片的高度一致，可以让图片刚好在一行显示，没有间隙*/</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5f5f5f</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.2px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*单双行不同颜色*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.row</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d7d7d7</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置表格范围边框--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellsapcing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--合并单元格--&gt;</span><br>        <span class="hljs-comment">&lt;!--合并列用colspan--&gt;</span><br>        <span class="hljs-comment">&lt;!--合并行用rowspan--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>表头合并<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行1列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行2列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行3列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行3列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行3列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行3列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行3列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行4列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行4列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行4列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行4列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行4列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行5列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行5列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行5列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行5列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行5列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行6列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行6列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行6列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行6列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行6列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行7列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行7列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行7列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行7列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行7列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行8列1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行8列2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行8列3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行8列4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>行8列5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-制作表单"><a href="#2-制作表单" class="headerlink" title="2. 制作表单"></a>2. 制作表单</h2><ul><li>用到<code>form</code>放置表单元素，比如文本字段，复选框，单选框，按钮等</li><li>用到<code>input</code>标签和<code>text</code>type输入文本框</li><li>用到<code>input</code>标签和<code>password</code>type输入密码</li><li>用到<code>input</code>标签和<code>radio</code>type成为单选框，单选框互斥需要名字一致</li><li>用到<code>input</code>标签和<code>checkbox</code>type复选框</li><li>用到<code>select</code>标签和它的子标签<code>option</code>做选择器</li><li>用到<code>input</code>标签和<code>submit</code>type做提交按钮</li><li>用到<code>input</code>标签和<code>reset</code>做复位按钮</li><li>用到<code>textarea</code>标签做文本输出显示</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span>此处显示 ID &quot;logo&quot;的内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>此处显示ID &quot;title&quot;的内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--form用于放置表单元素，比如文本字段，复选框，单选框，按钮等--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--label标签文本--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>输入账号：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--input输入文本框，类型text--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>输入密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--input输入文本框，类型password--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass word&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass word&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;txt&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--把两个radio类型做成单选按钮--&gt;</span><br>                    <span class="hljs-comment">&lt;!--两个单选按钮name必须一样，才能做成互斥--&gt;</span><br>                    <span class="hljs-comment">&lt;!--checked表示默认--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>单选项：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rdoSex&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">checked</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;man.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;21&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rdoSex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;woman.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;23&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--checkbox做复选框--&gt;</span><br>                    <span class="hljs-comment">&lt;!--input后面的值内容是显示文本--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>复选项：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sport&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cbxHobby&quot;</span> /&gt;</span>sport<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;chat&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cbxHobby&quot;</span> /&gt;</span>chat<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;game&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cbxHobby&quot;</span> /&gt;</span>game<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>日期：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--select选择和它的子标签option--&gt;</span><br>                    <span class="hljs-comment">&lt;!--多个选择器组合为日期--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;year&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2020&quot;</span>&gt;</span>2020<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2021&quot;</span>&gt;</span>2021<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2022&quot;</span>&gt;</span>2022<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2023&quot;</span>&gt;</span>2023<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2024&quot;</span>&gt;</span>2024<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>年<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;month&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>月<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;day&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;day&quot;</span>/&gt;</span>日<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--添加按钮--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;buton&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;同意条款并提交&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重来&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fwxy&quot;</span>&gt;</span><br>                     <span class="hljs-comment">&lt;!--添加文本显示--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;70&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...显示输出文本信息...<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;about&quot;</span>&gt;</span>此处显示ID &quot;about&quot;的内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-常见的表单html标签"><a href="#3-常见的表单html标签" class="headerlink" title="3. 常见的表单html标签"></a>3. 常见的表单html标签</h2><ul><li><p>表单标签<code>&lt;form&gt;&lt;/form&gt;</code></p></li><li><p>输入标签<code>&lt;input/&gt;</code>常用格式为<code>&lt;input type=&quot;&quot; value=&quot;&quot; name=&quot;&quot; class=&quot;&quot;/&gt;</code>,常用属性如下：</p><ul><li><code>text</code>:文本框</li><li><code>checkbox</code>：复选框，同一组的checkbox的name应该相同，方便js后台查数据；不同的checkbox组名字不同</li><li><code>file</code>:文件选择框</li><li><code>hidden</code>:隐藏域，<code>&lt;input type=&quot;hidden&quot; value=&quot;1&quot;/&gt;</code></li><li><code>image</code>:图片框</li><li><code>password</code>:密码框</li><li><code>radio</code>:单选按钮框，注意一组radio名字要一样，才能单选</li><li><code>button</code>:按钮框：<code>&lt;input type=&quot;button&quot; value=&quot;value值会显示在按钮上&quot;&gt;</code>，value值会显示在按钮上</li><li><code>reset</code>:重置按钮框，按下后会清空表单内全部数据</li><li><code>submit</code>:提交按钮框，和button不一样的是，它会提交表单数据到指定位置</li></ul></li><li><p>下拉列表标签<code>&lt;select&gt;&lt;/select&gt;</code>及其子标签<code>&lt;option&gt;&lt;/option&gt;</code></p></li><li><p>文本域标签<code>textarea</code>,它的格式<code>&lt;textarea cols=&quot;&quot; rows=&quot;&quot;&gt;&lt;/textarea&gt;</code>可以定义显示长宽</p></li><li><p><strong>任何一个表单元素标签其实都能脱离表单form标签使用，这一点和table标签不一样</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Front-end application</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/07/21/%E5%88%B6%E4%BD%9C%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%B9%B6%E7%94%A8CSS%E7%BE%8E%E5%8C%96/"/>
    <url>/2024/07/21/%E5%88%B6%E4%BD%9C%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%B9%B6%E7%94%A8CSS%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<ol><li><p>纵向导航栏</p><ul><li>用到<code>伪类</code>来做鼠标悬停的变色，伪类的关键字是<code>：</code>开头。</li><li>用到<code>display:block;</code>来块化超链接，不然超链接文本看起来就是简单的文字效果。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>纵向菜单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*消除小黑点并设置列表样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">list-style</span>: none; <span class="hljs-comment">/*列表项无编号*/</span></span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-comment">/*列表宽度*/</span></span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<span class="hljs-comment">/*列表高度*/</span></span><br><span class="language-css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;<span class="hljs-comment">/*行高*/</span></span><br><span class="language-css">                <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1px</span>;<span class="hljs-comment">/*列表项之间的底部间距*/</span></span><br><span class="language-css">                <span class="hljs-attribute">text-align</span>: center;<span class="hljs-comment">/*文本居中*/</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-comment">/*消除下划线，设置文字大小颜色*/</span></span><br><span class="language-css">            <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">display</span>: block;<span class="hljs-comment">/*超链接显示为块元素*/</span></span><br><span class="language-css">                <span class="hljs-attribute">text-decoration</span>: none;<span class="hljs-comment">/*超链接无下划线*/</span></span><br><span class="language-css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<span class="hljs-comment">/*文字尺寸*/</span></span><br><span class="language-css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFCC00</span>;<span class="hljs-comment">/*颜色*/</span></span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000066</span>;<span class="hljs-comment">/*背景色*/</span></span><br><span class="language-css">                <span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">10px</span>;<span class="hljs-comment">/*超链接左边框宽度为10，预览黄色那个就是左边框*/</span></span><br><span class="language-css">                <span class="hljs-attribute">border-left-style</span>: solid;<span class="hljs-comment">/*左边框为实线*/</span></span><br><span class="language-css">                <span class="hljs-attribute">border-left-color</span>: <span class="hljs-number">#FF9900</span>;<span class="hljs-comment">/*左边框颜色*/</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-comment">/*鼠标移动使文字颜色变化并加粗*/</span></span><br><span class="language-css">            <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<span class="hljs-comment">/*hover伪类：开头用“：”作为关键字。它用于选择处于特定状态的元素，或者是当鼠标指针悬浮在元素上面的时候。它们表现得会像是你向你的文档的某个部分应用了一个类一样，帮你在你的标记文本中减少多余的类，让你的代码更灵活、更易于维护*/</span></span><br><span class="language-css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000033</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border-left-width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">border-left-style</span>: solid;</span><br><span class="language-css">                <span class="hljs-attribute">border-left-color</span>: <span class="hljs-number">#d8d803</span>;</span><br><span class="language-css">            &#125;   </span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>横向导航栏</p><ul><li>用到<code>float: left;</code>来把列表横向。</li><li>用到<code>&lt;div&gt;</code>及其id</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>横向菜单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/*设置div中的样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-id">#topmenu</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">background</span>: <span class="hljs-number">#515151</span>;</span><br><span class="language-css">                <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>:<span class="hljs-number">#ffffff</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">27px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-comment">/*列表标签样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-id">#topmenu</span> <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">list-style-type</span>:none;<span class="hljs-comment">/*去掉列表编号*/</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-comment">/*列表项标签样式*/</span></span><br><span class="language-css">            <span class="hljs-selector-id">#topmenu</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left;<span class="hljs-comment">/*横向*/</span></span><br><span class="language-css">                <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">                <span class="hljs-attribute">line-height</span>: <span class="hljs-number">27px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-id">#topmenu</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">                <span class="hljs-attribute">text-decoration</span>: none;<span class="hljs-comment">/*去掉超链接下划线*/</span></span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-id">#topmenu</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">background</span>: <span class="hljs-number">#ff0</span>;<span class="hljs-comment">/*鼠标悬停变色*/</span></span><br><span class="language-css">                <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;topmenu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>下拉菜单设置<ul><li>用到通配符<code>*</code></li><li>用到类<code>class</code></li><li>用到<code>嵌套</code>做对特定标签下的子标签设置，语法规则是<code>父标签 子标签 孙标签 曾孙标签 .. &#123;&#125;</code></li><li>用到设置<code>一级标签``和二级标签</code>的方法，就是ul,li,ul,li嵌套使用</li><li>用到显示二级标签方法，用<code>display:block;</code>做二级标签显示</li><li>不管一级标签还是二级标签，都用<code>伪类</code>做鼠标悬停效果</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>下拉菜单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/*通配符*/</span></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*页面标签外边距*/</span></span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*页面标签内边距*/</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*列表项样式*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;<span class="hljs-comment">/*居中，居网页的中*/</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*超链接效果*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*div容器内ul下的li元素调整,没打“，”不是集体声明*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-number">#333</span> dashed;<span class="hljs-comment">/*设置li边框粗细颜色线型*/</span></span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffd2d2</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*设置二级菜单隐藏*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*设置显示被隐藏的二级菜单*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">ul</span>,<span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;<span class="hljs-comment">/*设置为块即可显示*/</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*设置鼠标悬停效果*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#BB0916</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*设置二级菜单*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FEE</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*设置二级菜单悬停效果*/</span></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#F7F7B9</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#666666</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>菜单5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单5<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>子菜单6<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单理解盒子模型</title>
    <link href="/2024/07/21/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/07/21/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么叫盒子模型"><a href="#1-什么叫盒子模型" class="headerlink" title="1. 什么叫盒子模型"></a>1. 什么叫盒子模型</h2><p>在html中大部分元素，特别是块元素<code>display:block;</code>都可以被看做一个盒子。网页布局就是一个一个盒子的平铺，堆叠，嵌套摆放。这么多的盒子放在一起，最重要的就是去关注他们的各种尺寸，边界等等，主要怕意料外的重叠一类导致的显示不正常。</p><h2 id="2-W3C和IE盒子模型指的什么？"><a href="#2-W3C和IE盒子模型指的什么？" class="headerlink" title="2. W3C和IE盒子模型指的什么？"></a>2. W3C和IE盒子模型指的什么？</h2><ul><li>W3C标准盒子模型<br><img src="/img/blog_page/3427087-20240427164642663-12122278.png"><br>如图，它由<code>content</code>,<code>padding</code>,<code>border</code>,<code>margin</code>几个属性构成，这几个都是css里面用到最多的一些属性设置项。在这个图里可以知道为啥css的一些属性要这么设置，以及值是怎么来的。<br>下图可以直观的表示margin&#x2F;padding的作用范围：<br><img src="/img/blog_page/3427087-20240427170118940-2140548929.png"><br><strong>padding和margin之间的虚线线宽，就可以称作边界<code>border</code></strong><br>padding和margin都有<code>上下左右</code>的作用范围，写作<code>-left</code>,<code>-right</code>,<code>-top</code>,<code>-bottom</code>。<br>padding和margin长度设置方法可以用<code>auto</code>,<code>legth(px/cm单位)</code>,<code>%(父元素宽度的百分比计算)</code>,<code>inherit（集成父元素的边距）</code>。<br>padding和margin可以用<code>组合属性</code>，感觉有些约定俗成的东西在里面，如下理解，顺序方向记住就行：<ul><li><code>margin：4px</code>表示上下左右都是4px（<strong>表示四个方向</strong>）</li><li><code>margin：4px 8px</code>表示上下4px,左右8px（<strong>前一个表示上下，后一个表示左右</strong>）</li><li><code>margin:4px 8px 5px</code>表示上4px,左右8px,下5px（<strong>第一个用于上，第二个用于左右，第三个用于下</strong>）</li><li><code>margin：4px 8px 5px 3px</code>表示上4px,右8px，下5px，左3px（<strong>顺时针，上右下左</strong>）</li></ul></li></ul><p>关于盒子尺寸的计算，如下简单加减法：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 在W3C模型中</span><br>actual width = width + padding-<span class="hljs-literal">left</span> + padding-<span class="hljs-literal">right</span> + border-<span class="hljs-literal">left</span> + border-<span class="hljs-literal">right</span> + margin-<span class="hljs-literal">left</span> + margin-<span class="hljs-literal">right</span><br>actual height = height + padding-<span class="hljs-literal">top</span> + padding-<span class="hljs-literal">bottom</span> + border-<span class="hljs-literal">top</span> + border-<span class="hljs-literal">bottom</span> + margin-<span class="hljs-literal">top</span> + margin-<span class="hljs-literal">bottom</span><br></code></pre></td></tr></table></figure><ul><li><p>IE标准盒子模型<br><img src="/img/blog_page/3427087-20240427172741335-1592020104.png"><br>和W3C盒子模型不一样的是，IE盒子模型把<code>border的（left+right）算到width里面</code>去了，把<code>border的（top+bottom）算到height里面</code>去了；<br>如此看来，IE的设置精度和W3C比起来算是变差了。</p></li><li><p>如何让浏览器选择对应的盒子模型<br>不同的盒子模型就带来了不一样的差异，这就是为什么用不同的浏览器，显示效果有时会有差异的原因<br>在<code>&lt;DOCTYPE&gt;</code>中加入声明，让浏览器知道应该以那种方式解释盒子</p></li></ul><h2 id="3-margin使用的一些注意事项"><a href="#3-margin使用的一些注意事项" class="headerlink" title="3. margin使用的一些注意事项"></a>3. margin使用的一些注意事项</h2><ul><li>增加块<code>marigin-bottom</code>或者<code>margin-top</code>值之后，元素却没有变化<br>这是因为合并后的就发生交叉重叠。<br><img src="/img/blog_page/3427087-20240427175108907-1073571063.png"><br>这种效果就和PPT<code>置入顶层</code>，<code>置于底层</code>的效果是一样的<br><img src="/img/blog_page/3427087-20240427175214015-152655102.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Front-end application</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO的数据集使用案例</title>
    <link href="/2024/07/21/IO%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/07/21/IO%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-用AQ2ST和AI4ST做回环测试，主要是验证AQ2和AI4手册上的DS数据集"><a href="#1-用AQ2ST和AI4ST做回环测试，主要是验证AQ2和AI4手册上的DS数据集" class="headerlink" title="1. 用AQ2ST和AI4ST做回环测试，主要是验证AQ2和AI4手册上的DS数据集"></a>1. 用AQ2ST和AI4ST做回环测试，主要是验证AQ2和AI4手册上的DS数据集</h2><h2 id="2-DS参数写入"><a href="#2-DS参数写入" class="headerlink" title="2. DS参数写入"></a>2. DS参数写入</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lasso">REGION <span class="hljs-keyword">params</span> input<br>    <span class="hljs-keyword">IF</span> <span class="hljs-literal">NOT</span> #In_SelectedChannel THEN<br>        #params_AQ2ST.RDREC.index := <span class="hljs-number">64</span>;<br>        #params_AQ2ST.WRREC.index := <span class="hljs-number">64</span>;<br>        #params_AI4ST.RDREC.index := <span class="hljs-number">0</span>;<br>        #params_AI4ST.WRREC.index := <span class="hljs-number">0</span>;<br>        <br>    <span class="hljs-keyword">ELSE</span><br>        #params_AQ2ST.RDREC.index := <span class="hljs-number">65</span>;<br>        #params_AQ2ST.WRREC.index := <span class="hljs-number">65</span>;<br>        #params_AI4ST.RDREC.index := <span class="hljs-number">1</span>;<br>        #params_AI4ST.WRREC.index := <span class="hljs-number">1</span>;<br>    END_IF;<br>    #params_AQ2ST.RDREC.id := #In_AQhwio;<br>    #params_AI4ST.RDREC.id := #In_AIhwio;<br>    #params_AQ2ST.WRREC.id := #In_AQhwio;<br>    #params_AI4ST.WRREC.id := #In_AIhwio;<br>    <br>END_REGION<br></code></pre></td></tr></table></figure><h2 id="3-通道类型切换选择"><a href="#3-通道类型切换选择" class="headerlink" title="3. 通道类型切换选择"></a>3. 通道类型切换选择</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs clean">REGION type choice<br>    CASE #In_TypeChoic OF<br>        <span class="hljs-number">11</span>:<br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000000</span>;<span class="hljs-comment">//-10.0v-10.0v</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">11000101</span>;<span class="hljs-comment">//voltage diagnotic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00001001</span>;<span class="hljs-comment">//-10.0v-10.0v</span><br>        <span class="hljs-number">12</span>:<br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//0.0v-10.0v</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">11000101</span>;<span class="hljs-comment">//voltage diagnotic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00001001</span>;<span class="hljs-comment">//-10.0v-10.0v(no 0.0to10.0v)</span><br>        <span class="hljs-number">13</span>:<br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000011</span>;<span class="hljs-comment">//1.0v-5.0v</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">11000101</span>;<span class="hljs-comment">//voltage diagnotic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00001010</span>;<span class="hljs-comment">//1.0v-5.0v</span><br>        <span class="hljs-number">21</span>:<br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//current</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000000</span>;<span class="hljs-comment">//-20.0mato20.0ma</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">11010001</span>;<span class="hljs-comment">//current diagnotic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//current(4-wire)</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000100</span>;<span class="hljs-comment">//-20.0mato20.0ma</span><br>        <span class="hljs-number">22</span>:<br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//current</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//0.0mato20.0ma</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">11010001</span>;<span class="hljs-comment">//current diagnotic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//current(4-wire)</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//0.0mato20.0ma</span><br>        <span class="hljs-number">23</span>:<br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//current</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//4.0mato20.0ma</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">11010001</span>;<span class="hljs-comment">//current diagnotic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000010</span>;<span class="hljs-comment">//current(4-wire)</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000011</span>;<span class="hljs-comment">//4.0mato20.0ma</span><br>        ELSE<br>            <span class="hljs-comment">//default voltage</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000000</span>;<span class="hljs-comment">//-10.0v-10.0v</span><br>            #params_AQ2ST.recorddata[<span class="hljs-number">4</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000000</span>;<span class="hljs-comment">//no diagnostic</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">2</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00000001</span>;<span class="hljs-comment">//voltage</span><br>            #params_AI4ST.recorddata[<span class="hljs-number">3</span>] := <span class="hljs-number">2</span>#<span class="hljs-number">00001001</span>;<span class="hljs-comment">//-10.0v-10.0v</span><br>    END_CASE;<br>    <br>END_REGION<br></code></pre></td></tr></table></figure><h2 id="4-切换使能"><a href="#4-切换使能" class="headerlink" title="4. 切换使能"></a>4. 切换使能</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs lasso">REGION Operate enable<br>    <span class="hljs-keyword">IF</span> #In_OperateEnable <span class="hljs-literal">AND</span> <span class="hljs-literal">NOT</span> #paluse_bool THEN<br>        #stepInt := <span class="hljs-number">10</span>;<br>    END_IF;<br>    #paluse_bool := #In_OperateEnable;<br>    <br>    <span class="hljs-keyword">CASE</span> #stepInt OF<br>        <span class="hljs-number">10</span>:<br>            <span class="hljs-comment">//read AQ2</span><br>            #params_AQ2ST.RDREC.req := <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">IF</span> #params_AQ2ST.RDREC.valid THEN<br>                #stepInt := <span class="hljs-number">20</span>;<br>            ELSIF #params_AQ2ST.RDREC.error THEN<br>                #Status_Error := <span class="hljs-literal">true</span>;<br>            END_IF;<br>        <span class="hljs-number">20</span>:<br>            <span class="hljs-comment">//read AI4</span><br>            #params_AQ2ST.RDREC.req := <span class="hljs-literal">FALSE</span>;<br>            #params_AI4ST.RDREC.req := <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">IF</span> #params_AI4ST.RDREC.valid THEN<br>                #stepInt := <span class="hljs-number">30</span>;<br>            ELSIF #params_AI4ST.RDREC.error THEN<br>                #Status_Error := <span class="hljs-literal">true</span>;<br>            END_IF;<br>        <span class="hljs-number">30</span>:<br>            <span class="hljs-comment">//write AQ2</span><br>            #params_AI4ST.RDREC.req := <span class="hljs-literal">FALSE</span>;<br>            #params_AQ2ST.WRREC.req := <span class="hljs-literal">TRUE</span>;<br>            <span class="hljs-keyword">IF</span> #params_AQ2ST.WRREC.done THEN<br>                #stepInt := <span class="hljs-number">40</span>;<br>            ELSIF #params_AQ2ST.WRREC.error THEN<br>                #Status_Error := <span class="hljs-literal">true</span>;<br>            END_IF;<br>        <span class="hljs-number">40</span>:<br>            <span class="hljs-comment">//write ai4</span><br>            #params_AQ2ST.WRREC.req := <span class="hljs-literal">FALSE</span>;<br>            #params_AI4ST.WRREC.req := <span class="hljs-literal">TRUE</span>;<br>            <span class="hljs-keyword">IF</span> #params_AI4ST.WRREC.done THEN<br>                #stepInt := <span class="hljs-number">50</span>;<br>            ELSIF #params_AI4ST.WRREC.error THEN<br>                #Status_Error := <span class="hljs-literal">true</span>;<br>            END_IF;<br>        <span class="hljs-number">50</span>:<br>            <span class="hljs-comment">//write finish</span><br>            #Status_Done := <span class="hljs-literal">true</span>;<br>            #params_AQ2ST.RDREC.req := <span class="hljs-literal">false</span>;<br>            #params_AQ2ST.WRREC.req := <span class="hljs-literal">false</span>;<br>            #params_AI4ST.RDREC.req := <span class="hljs-literal">false</span>;<br>            #params_AI4ST.WRREC.req := <span class="hljs-literal">false</span>;<br>            #stepInt := <span class="hljs-number">0</span>;<br>    END_CASE;<br>    <br>    <span class="hljs-keyword">IF</span> <span class="hljs-literal">NOT</span> #In_OperateEnable THEN<br>        #Status_Done := <span class="hljs-literal">false</span>;<br>        #Status_Error := <span class="hljs-literal">false</span>;<br>        #params_AQ2ST.RDREC.req := <span class="hljs-literal">false</span>;<br>        #params_AQ2ST.WRREC.req := <span class="hljs-literal">false</span>;<br>        #params_AI4ST.RDREC.req := <span class="hljs-literal">false</span>;<br>        #params_AI4ST.WRREC.req := <span class="hljs-literal">false</span>;<br>        #stepInt := <span class="hljs-number">0</span>;<br>    END_IF;<br>    <br>END_REGION<br></code></pre></td></tr></table></figure><h2 id="5-执行"><a href="#5-执行" class="headerlink" title="5. 执行"></a>5. 执行</h2><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs leaf">REGION execute <br>    //AQ2ST<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">RdrecControl_AQ2ST</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">id</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">INDEX</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-keyword">in</span><span class="hljs-variable">dex</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">VALID</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">valid</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">LEN</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">len</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">RECORD</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">recorddata</span>)</span>;<br>    <br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">WrrecControl_AQ2ST</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">id</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">INDEX</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-keyword">in</span><span class="hljs-variable">dex</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> 8,</span><br><span class="hljs-params">                        <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">done</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">RECORD</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AQ2ST</span>.<span class="hljs-variable">recorddata</span>)</span>;<br>    //AI4ST<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">RdrecControl_AI4ST</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">id</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">INDEX</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-keyword">in</span><span class="hljs-variable">dex</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">VALID</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">valid</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">LEN</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">RDREC</span>.<span class="hljs-variable">len</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">RECORD</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">recorddata</span>)</span>;<br>    <br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">WrrecControl_AI4ST</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">id</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">INDEX</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-keyword">in</span><span class="hljs-variable">dex</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> 28,</span><br><span class="hljs-params">                        <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">done</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">WRREC</span>.<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">RECORD</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">params_AI4ST</span>.<span class="hljs-variable">recorddata</span>)</span>;<br>END_REGION<br></code></pre></td></tr></table></figure><h2 id="6-输出"><a href="#6-输出" class="headerlink" title="6. 输出"></a>6. 输出</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">REGION output<br>    #Out_Status_Error := #Status_Error;<br>    #Out_Status_Done := #Status_Done;<br>    <br>END_REGION<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PLC程序中的配方应用</title>
    <link href="/2024/07/21/PLC%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%85%8D%E6%96%B9%E5%BA%94%E7%94%A8/"/>
    <url>/2024/07/21/PLC%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%85%8D%E6%96%B9%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-建立ARRAYDB"><a href="#1-建立ARRAYDB" class="headerlink" title="1. 建立ARRAYDB"></a>1. 建立ARRAYDB</h2><ul><li>集合配方需要的所有元素结构，组成一个UDT（包含范围最全）</li><li>新建一组ARRAY DB，元素的个数就是配方需要的副本的个数</li><li>数组DB勾选<code>仅存储在装载内存中</code>，以便数据量大的配方不占用<code>数据工作存储器</code>空间，节省资源</li><li>在ARRAY DB的起始值处填写配方的具体值</li><li>1200不支持ARRAY DB,所以用普通全局DB替代也可<br><img src="/img/blog_page/3427087-20240430225416875-2004286799.png"></li></ul><h2 id="2-配方表的导入导出"><a href="#2-配方表的导入导出" class="headerlink" title="2. 配方表的导入导出"></a>2. 配方表的导入导出</h2><ul><li><p>导入</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//export<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statExRecipe</span>.req := <span class="hljs-punctuation">#</span><span class="hljs-keyword">H_animinal</span>.start_export_button;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">RecipeExport_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">statExRecipe</span>.<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">statExRecipe</span>.<span class="hljs-variable">done</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">statExRecipe</span>.<span class="hljs-variable">busy</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">statExRecipe</span>.<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">statExRecipe</span>.<span class="hljs-variable">status</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">RECIPE_DB</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;Product_Recipe&quot;</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>导出</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//import<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statImRecipe</span>.req := <span class="hljs-punctuation">#</span><span class="hljs-keyword">H_animinal</span>.start_import_button;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">RecipeImport_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statImRecipe</span>.<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">DONE</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statImRecipe</span>.<span class="hljs-variable">done</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">BUSY</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statImRecipe</span>.<span class="hljs-variable">busy</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">ERROR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statImRecipe</span>.<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">STATUS</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statImRecipe</span>.<span class="hljs-variable">status</span>,</span><br><span class="hljs-params">                       <span class="hljs-variable">RECIPE_DB</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;Product_Recipe&quot;</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>导入导出位置<br><img src="/img/blog_page/3427087-20240430230507892-4690704.png"></p></li></ul><h2 id="3-DBL的读出和写入"><a href="#3-DBL的读出和写入" class="headerlink" title="3. DBL的读出和写入"></a>3. DBL的读出和写入</h2><ul><li>从DBL读出到程序中使用，靠index索引,靠req使能，statReturnRDDBL&#x3D;16#7002时表示读出完成</li><li>read_DBL本身是<code>异步指令</code>，整个过程会横跨多个扫描周期，另外因为是从存储卡读取而来，读取速度上不是很快</li><li>DBL因为使能了<code>仅存储在装载内存中</code>，故不能在线，它只有起始值，没有在线值。</li><li>写入同理<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//read_DBL</span><br>#statReadDBL.req := #H_animinal.start_readDBL_button;<br>#statReturnRDDBL:=READ_DBL(REQ := #statReadDBL.req, SRCBLK :=<span class="hljs-string">&quot;Product_Recipe&quot;</span>.<span class="hljs-string">&quot;THIS&quot;</span>[#H_animinal.recipe_index] , BUSY =&gt; #statReadDBL.busy, DSTBLK =&gt; #H_current_params);<br>IF <span class="hljs-number">16</span>#<span class="hljs-number">7002</span> = #statReturnRDDBL THEN<br>    #H_animinal.start_readDBL_button := FALSE;<br>END_IF;<br><br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//write DBL</span><br>#statWriteDBL.req := #H_animinal.start_writeDBL_button;<br>#statReturnWRDBL := WRIT_DBL(REQ := #statWriteDBL.req, SRCBLK :=#H_current_params, BUSY =&gt; #statWriteDBL.busy, DSTBLK =&gt; <span class="hljs-string">&quot;Product_Recipe&quot;</span>.<span class="hljs-string">&quot;THIS&quot;</span>[#H_animinal.recipe_index]);<br>IF <span class="hljs-number">16</span>#<span class="hljs-number">7002</span> = #statReturnWRDBL THEN<br>    #H_animinal.start_writeDBL_button := FALSE;<br>END_IF;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python进制转换指令</title>
    <link href="/2024/07/21/python%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/07/21/python%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-十进制转二进制，bin"><a href="#1-十进制转二进制，bin" class="headerlink" title="1. 十进制转二进制，bin()"></a>1. 十进制转二进制，<code>bin()</code></h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">decimal</span>=10<br><span class="hljs-attribute">binary</span>=bin(deciaml)<br><span class="hljs-built_in">print</span>(binary)<br></code></pre></td></tr></table></figure><h2 id="2-十进制转八进制，oct"><a href="#2-十进制转八进制，oct" class="headerlink" title="2. 十进制转八进制，oct()"></a>2. 十进制转八进制，<code>oct()</code></h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">decimal</span>=10<br><span class="hljs-attribute">octal</span>=oct(deciaml)<br><span class="hljs-built_in">print</span>(octal)<br></code></pre></td></tr></table></figure><h2 id="3-十进制转十六进制，hex"><a href="#3-十进制转十六进制，hex" class="headerlink" title="3. 十进制转十六进制，hex()"></a>3. 十进制转十六进制，<code>hex()</code></h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># case1</span><br><span class="hljs-attribute">decimal</span>=10<br><span class="hljs-attribute">hexadecimal</span>=hex(deciaml)<br><span class="hljs-built_in">print</span>(hexadecimal)<br><br><span class="hljs-comment"># case2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(255,1,-1):<br>    <span class="hljs-built_in">print</span>(hex(i))<br><br></code></pre></td></tr></table></figure><h2 id="4-字符串转数值，int-params1-params2"><a href="#4-字符串转数值，int-params1-params2" class="headerlink" title="4. 字符串转数值，int(params1,params2)"></a>4. 字符串转数值，<code>int(params1,params2)</code></h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var1= <span class="hljs-string">&#x27;1010&#x27;</span><br><span class="hljs-attribute">decimal1</span>=int(var1,2)<br><span class="hljs-attribute">decimal2</span>=int(var1,8)<br><span class="hljs-attribute">decimal3</span>=int(var1,16)<br>decimal=[decimal1,decimal2,decimal3]<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> decimal:<br>    <span class="hljs-built_in">print</span>(var)<br><br></code></pre></td></tr></table></figure><h2 id="5-关于vscode注释快捷方式"><a href="#5-关于vscode注释快捷方式" class="headerlink" title="5. 关于vscode注释快捷方式"></a>5. 关于vscode注释快捷方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + K + C : 快捷注释</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + K + U : 取消快捷注释</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + / : 单行快捷注释</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ctrl + <span class="hljs-built_in">shift</span> + / : 取消单行快捷注释</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">shift</span> + alt + A : 注释代码块</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用PLC扫描周期实现一些小技巧</title>
    <link href="/2024/07/21/%E5%88%A9%E7%94%A8PLC%E6%89%AB%E6%8F%8F%E5%91%A8%E6%9C%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2024/07/21/%E5%88%A9%E7%94%A8PLC%E6%89%AB%E6%8F%8F%E5%91%A8%E6%9C%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="1-上升沿"><a href="#1-上升沿" class="headerlink" title="1. 上升沿"></a>1. 上升沿</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//pulse generate</span><br><br>IF #my_singal AND NOT #pulse_bool THEN<br>    ;<br>END_IF;<br>#pulse_bool := #my_singal;<br></code></pre></td></tr></table></figure><h2 id="2-数值记忆，记录当数值变化时事件"><a href="#2-数值记忆，记录当数值变化时事件" class="headerlink" title="2. 数值记忆，记录当数值变化时事件"></a>2. 数值记忆，记录当数值变化时事件</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"> <span class="hljs-comment">//memory，my_order由外部主动触发</span><br><br>IF #my_order &lt;&gt; #memory_order THEN<br>    ;<br>END_IF;<br>#memory_order := #my_order;<br></code></pre></td></tr></table></figure><h2 id="3-清数据之前先转存"><a href="#3-清数据之前先转存" class="headerlink" title="3. 清数据之前先转存"></a>3. 清数据之前先转存</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//transfer data before clear</span><br>IF #my_singal AND NOT #pulse_bool THEN<br>    #Tmp_data_set := #my_data_set;<br>    #my_data_set := #null_data_set;<br>END_IF;<br>#pulse_bool := #my_singal;<br><br></code></pre></td></tr></table></figure><h2 id="4-手动做一个GRAPH顺控管理器"><a href="#4-手动做一个GRAPH顺控管理器" class="headerlink" title="4. 手动做一个GRAPH顺控管理器"></a>4. 手动做一个GRAPH顺控管理器</h2><figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs ruleslanguage"><span class="hljs-comment">//初始化</span><br><span class="hljs-keyword">IF</span> <span class="hljs-literal">#H</span>_Collection.Button_StepMode <span class="hljs-keyword">THEN</span><br>    <span class="hljs-literal">#H</span>_Collection.Button_ContinuousMode := FALSE;<br>END_IF;<br><span class="hljs-keyword">IF</span> NOT <span class="hljs-literal">#In</span>_home <span class="hljs-keyword">THEN</span><br>    <span class="hljs-literal">#H</span>_Collection.StationByPass := FALSE;<br>END_IF;<br><br><span class="hljs-comment">//连续模式</span><br><span class="hljs-keyword">IF</span> <span class="hljs-literal">#H</span>_Collection.Button_ContinuousMode <span class="hljs-keyword">AND</span> (NOT <span class="hljs-literal">#H</span>_Collection.Button_StepMode) <span class="hljs-keyword">AND</span><br>    (NOT <span class="hljs-literal">#H</span>_Collection.StationByPass) <span class="hljs-keyword">THEN</span><br>    <br>    <span class="hljs-keyword">IF</span> <span class="hljs-literal">#In</span>_Mode.AutoMode <span class="hljs-keyword">AND</span> <span class="hljs-literal">#In</span>_home <span class="hljs-keyword">AND</span> <span class="hljs-number">0</span> = <span class="hljs-literal">#InOut</span>_NextStep <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_NextStep := <span class="hljs-number">10</span>;<br>    END_IF;<br>    <br>    <span class="hljs-keyword">IF</span> (NOT <span class="hljs-literal">#In</span>_Mode.AlarmMode) <span class="hljs-keyword">AND</span> (NOT <span class="hljs-literal">#In</span>_Mode.StopMode) <span class="hljs-keyword">AND</span> <span class="hljs-literal">#In</span>_Mode.AutoMode <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-literal">#InOut</span>_NextStep;<br>    <span class="hljs-keyword">ELSE</span><br>        <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-literal">#InOut</span>_CurrentStep;<br>    END_IF;<br>    <br>    <span class="hljs-keyword">IF</span> <span class="hljs-literal">#In</span>_Mode.ManualMode <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-number">0</span>;<br>        <span class="hljs-literal">#InOut</span>_NextStep := <span class="hljs-number">0</span>;<br>    END_IF;<br>    <br>END_IF;<br><br><span class="hljs-comment">//单步模式</span><br><span class="hljs-keyword">IF</span> <span class="hljs-literal">#H</span>_Collection.Button_StepMode <span class="hljs-keyword">AND</span> (NOT <span class="hljs-literal">#H</span>_Collection.StationByPass) <span class="hljs-keyword">THEN</span><br>    <br>    <span class="hljs-keyword">IF</span> <span class="hljs-literal">#In</span>_Mode.AutoMode <span class="hljs-keyword">AND</span> <span class="hljs-literal">#In</span>_home <span class="hljs-keyword">AND</span> <span class="hljs-number">0</span> = <span class="hljs-literal">#InOut</span>_NextStep <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_NextStep := <span class="hljs-number">10</span>;<br>    END_IF;<br>    <br>    <span class="hljs-keyword">IF</span> (NOT <span class="hljs-literal">#In</span>_Mode.AlarmMode) <span class="hljs-keyword">AND</span> (NOT <span class="hljs-literal">#In</span>_Mode.StopMode) <span class="hljs-keyword">AND</span> <span class="hljs-literal">#In</span>_Mode.AutoMode <span class="hljs-keyword">AND</span> NOT <span class="hljs-literal">#st</span>_Pluse[<span class="hljs-number">0</span>] <span class="hljs-keyword">AND</span> <span class="hljs-literal">#H</span>_Collection.Button_NextStep <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-literal">#InOut</span>_NextStep;<br>    ELSIF <span class="hljs-literal">#In</span>_Mode.AlarmMode <span class="hljs-keyword">OR</span>  <span class="hljs-literal">#In</span>_Mode.StopMode <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-literal">#InOut</span>_CurrentStep;<br>    END_IF;<br>    <span class="hljs-literal">#st</span>_Pluse[<span class="hljs-number">0</span>] := <span class="hljs-literal">#H</span>_Collection.Button_NextStep;<br>    <br>    <span class="hljs-keyword">IF</span> <span class="hljs-literal">#In</span>_Mode.ManualMode <span class="hljs-keyword">THEN</span><br>        <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-number">0</span>;<br>        <span class="hljs-literal">#InOut</span>_NextStep := <span class="hljs-number">0</span>;<br>    END_IF;<br>    <br>END_IF;<br><br><span class="hljs-comment">//工位屏蔽</span><br><span class="hljs-keyword">IF</span> <span class="hljs-literal">#H</span>_Collection.StationByPass <span class="hljs-keyword">AND</span> <span class="hljs-literal">#In</span>_home <span class="hljs-keyword">THEN</span><br>    <span class="hljs-literal">#InOut</span>_CurrentStep := <span class="hljs-number">0</span>;<br>    <span class="hljs-literal">#InOut</span>_NextStep := <span class="hljs-number">0</span>;<br>END_IF;<br><br></code></pre></td></tr></table></figure><p>使用顺控器方法:</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lasso">Call Graph_Manager;<span class="hljs-comment">//如上代码，填好接口</span><br><span class="hljs-keyword">CASE</span> #currentstep OF<br><br><span class="hljs-number">10</span>:<br>;<br>#nextstep:=<span class="hljs-number">20</span>;<br><br><span class="hljs-number">20</span>:<br>;<br>#nextstep:=<span class="hljs-number">30</span>;<br><br><span class="hljs-number">30</span>:<br><span class="hljs-params">...</span><br>#nextstep:=<span class="hljs-number">0</span>;<br><br>END_CASE;<br></code></pre></td></tr></table></figure><h2 id="5-利用定时器做一个脉冲发生器"><a href="#5-利用定时器做一个脉冲发生器" class="headerlink" title="5. 利用定时器做一个脉冲发生器"></a>5. 利用定时器做一个脉冲发生器</h2><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//此处周期为2S，可以用time变量把定时器时间接口化<br>REGION 脉冲发生器<br>    IF (NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVoh</span>) AND (NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVol</span>) THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVoh</span> := true;<br>    END_IF;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">on_time</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">statVoh</span>,</span><br><span class="hljs-params">             <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">t</span>#1<span class="hljs-variable">s</span>)</span>;<br>    IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">on_time</span>.Q THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVoh</span> := false;<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVol</span> := true;<br>    END_IF;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">off_time</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">statVol</span>,</span><br><span class="hljs-params">              <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">t</span>#1<span class="hljs-variable">s</span>)</span>;<br>    IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">off_time</span>.Q THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVoh</span> := true;<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statVol</span> := FALSE;<br>    END_IF;<br>END_REGION<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在html中应用JavaScript</title>
    <link href="/2024/07/21/%E5%9C%A8html%E4%B8%AD%E5%BA%94%E7%94%A8JavaScript/"/>
    <url>/2024/07/21/%E5%9C%A8html%E4%B8%AD%E5%BA%94%E7%94%A8JavaScript/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在html中调用js"><a href="#1-在html中调用js" class="headerlink" title="1. 在html中调用js"></a>1. 在html中调用js</h2><ul><li>js需要用<code>&lt;script&gt;脚本写入位置&lt;/script&gt;</code>声明；也可以用外部文件引入，如<code>&lt;script type=&quot;text/javascript&quot; src=&quot;script1.js&quot;&gt;&lt;/script&gt;</code>。</li><li>当js位于html的<code>&lt;head&gt;</code>内：这些脚本在选择触发它的时候被触发</li><li>当js位于html的<code>&lt;body&gt;</code>内:这些脚本在页面加载时触发</li></ul><h2 id="2-js的数据类型-变量-运算符-方法-基本语句-事件"><a href="#2-js的数据类型-变量-运算符-方法-基本语句-事件" class="headerlink" title="2. js的数据类型&#x2F;变量&#x2F;运算符&#x2F;方法&#x2F;基本语句&#x2F;事件"></a>2. js的数据类型&#x2F;变量&#x2F;运算符&#x2F;方法&#x2F;基本语句&#x2F;事件</h2><ul><li><p>数据类型</p><ul><li>string：用<code>&quot; &quot;</code>或者<code>&#39; &#39;</code>括起来都行</li><li>数值类型：包括整数和浮点数</li><li>boolean布尔类型：<code>true</code> or <code>false</code></li><li>undefined未定义变量类型：一个<code>类型为undefined的值</code>指当变量被创建时，还未给变量赋值时具有的默认值</li><li>null空数据类型</li><li>object:对象类型</li></ul></li><li><p>变量</p><ul><li>作为一个弱数据类型语言，其实是可以不用事先声明变量类型的，不过用<code>var</code>推断来在使用前声明变量是个好习惯。</li><li>区分大小写</li></ul></li><li><p>运算符</p><ul><li>运算：<code>+ - * / % | &amp; &lt;&lt; &gt;&gt; &gt;&gt;&gt; - ~ ++ --</code></li><li>赋值：<code>= += -= *= /= %=</code></li><li>比较：<code>&gt; &lt; &lt;= &gt;= == != |= | ^= ^ ?: || </code></li></ul></li><li><p>方法</p><ul><li>用<code>function</code>声明，注意关键字是小写</li><li>调用方法，比如在点击事件中调用 <code>&lt;input type=&quot;submit&quot; OnClick=&quot;my_func()&quot;&gt;</code></li><li><code>return</code>返回值</li></ul></li><li><p>基本语句<br>js本身对加不加<code>；</code>不敏感，不过加上是个好习惯。</p></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// if和if..else<br>if(表达式)&#123;<br>语句<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">3</span><span class="hljs-comment">;</span><br>&#125;<br>else<br>&#123;<br>语句<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">3</span><span class="hljs-comment">;</span><br>&#125;<br><br>//for<br>for(初值；条件；增量)<br>&#123;<br>语句<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">3</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>事件<ul><li><code>onload</code>:文档已加载完成</li><li><code>onunload</code>:文档卸载或删除时</li><li><code>onclick</code>:单击</li><li><code>onmousedown</code>:按下鼠标</li><li><code>onmouseup</code>:抬起鼠标</li><li><code>onmouseover</code>鼠标移动到指定地</li><li><code>onmousemove</code>:指定地的鼠标移动</li><li><code>onmouseout</code>:鼠标移出</li><li><code>onkeypress</code></li><li><code>onkeydown</code></li><li><code>onkeyup</code></li><li><code>onfocus</code></li><li><code>onblur</code></li><li><code>onsubmit</code>:提交表单</li><li><code>onreset</code>:复位表单</li><li><code>onselect</code>:用户选择了某些文本</li><li><code>onchange</code></li></ul></li></ul><h2 id="3-应用"><a href="#3-应用" class="headerlink" title="3. 应用"></a>3. 应用</h2><ul><li>调用<code>setTimeout()</code>计时，倒数关闭<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-comment">&lt;!--</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">            function clock() &#123;</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">                i=i-1;</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">                document.title=&quot;窗口将在&quot;+ i + &quot;秒后自动关闭&quot;;</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">                if(i&gt;0) setTimeout(&quot;clock();&quot;,1000);</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">                else self.close();</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">            var i=20;</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">            clock();</span></span></span><br><span class="hljs-comment"><span class="language-xml"><span class="language-handlebars">            --&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>风格化后滚动效果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>跑马灯<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#goodnews</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fc0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">949px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: transparent;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: 黑体;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&quot;重大喜讯！！恭喜xiaocuncun身价超过马云马化腾！！！成功跻身中国首富!!!!!!!&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> interval = <span class="hljs-number">400</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> seq = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">txtScroll</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">ScrollForm</span>.<span class="hljs-property">txtText</span>.<span class="hljs-property">value</span> = msg.<span class="hljs-title function_">substring</span>(seq, msg.<span class="hljs-property">length</span>) + <span class="hljs-string">&quot; &quot;</span> + msg;</span><br><span class="language-javascript">            seq++;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (seq &gt; msg.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">                seq = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;txtScroll();&quot;</span>, interval)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;txtScroll()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;goodnews&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ScrollForm&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;textfield&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;txtText&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textfield&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;105&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在<code>&lt;body&gt;</code>中嵌入脚本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Ctrl+S保存后就可以刷新浏览器预览--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8 &quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>跑马灯<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#goodnews</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fc0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">949px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: transparent;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: 黑体;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&quot;重大喜讯！！恭喜xiaocuncun身价超过马云马化腾！！！成功跻身中国首富!!!!!!!&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> interval = <span class="hljs-number">400</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> seq = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">txtScroll</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">ScrollForm</span>.<span class="hljs-property">txtText</span>.<span class="hljs-property">value</span> = msg.<span class="hljs-title function_">substring</span>(seq, msg.<span class="hljs-property">length</span>) + <span class="hljs-string">&quot; &quot;</span> + msg;</span><br><span class="language-javascript">            seq++;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (seq &gt; msg.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">                seq = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;txtScroll();&quot;</span>, interval)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;txtScroll()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;goodnews&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ScrollForm&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;textfield&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;txtText&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textfield&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;105&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;</span><br><span class="language-javascript">            j = <span class="hljs-number">255</span> - <span class="hljs-number">1</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;font style=&#x27;color:rgb(&quot;</span> + j + <span class="hljs-string">&quot;,&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span> + i + <span class="hljs-string">&quot;);&#x27;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">16</span> == <span class="hljs-number">15</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front-end application</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过硬件标识符获取过程映像输入</title>
    <link href="/2024/07/21/%E9%80%9A%E8%BF%87%E7%A1%AC%E4%BB%B6%E6%A0%87%E8%AF%86%E7%AC%A6%E8%8E%B7%E5%8F%96%E8%BF%87%E7%A8%8B%E6%98%A0%E5%83%8F%E8%BE%93%E5%85%A5/"/>
    <url>/2024/07/21/%E9%80%9A%E8%BF%87%E7%A1%AC%E4%BB%B6%E6%A0%87%E8%AF%86%E7%AC%A6%E8%8E%B7%E5%8F%96%E8%BF%87%E7%A8%8B%E6%98%A0%E5%83%8F%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-用AI4ST做的模板，使用AI4前两个通道值，一个通道值占用一个IW，共占用2个word。"><a href="#1-用AI4ST做的模板，使用AI4前两个通道值，一个通道值占用一个IW，共占用2个word。" class="headerlink" title="1. 用AI4ST做的模板，使用AI4前两个通道值，一个通道值占用一个IW，共占用2个word。"></a>1. 用AI4ST做的模板，使用AI4前两个通道值，一个通道值占用一个<code>IW</code>，共占用2个word。</h2><h2 id="2-RD-ADDR读出地址起始位"><a href="#2-RD-ADDR读出地址起始位" class="headerlink" title="2. RD_ADDR读出地址起始位"></a>2. <code>RD_ADDR</code>读出地址起始位</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//get iw by hw_io </span><br>#tempAIw := RD_ADDR(LADDR := #AI4ST_Control.ai_hwio, PIADDR =&gt; #AI_rdaddr.piadder, PICount =&gt; #AI_rdaddr.picount, PQADDR =&gt; #AI_rdaddr.temppiadder, PQCount =&gt; #AI_rdaddr.temppicount);<br></code></pre></td></tr></table></figure><h2 id="3-PEEK地址对应得值给出来"><a href="#3-PEEK地址对应得值给出来" class="headerlink" title="3. PEEK地址对应得值给出来"></a>3. <code>PEEK</code>地址对应得值给出来</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">#AI4ST_Control.Ch0_Dig_Value := PEEK_WORD(area := <span class="hljs-number">16</span>#<span class="hljs-number">81</span>, dbNumber := <span class="hljs-number">0</span>, byteOffset := #AI_rdaddr.piadder);<br>#AI4ST_Control.Ch1_Dig_Value := PEEK_WORD(area := <span class="hljs-number">16</span>#<span class="hljs-number">81</span>, dbNumber := <span class="hljs-number">0</span>, byteOffset := (#AI_rdaddr.piadder + <span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><h2 id="4-用SCALE把数字值变换为实际物理值"><a href="#4-用SCALE把数字值变换为实际物理值" class="headerlink" title="4. 用SCALE把数字值变换为实际物理值"></a>4. 用<code>SCALE</code>把数字值变换为实际物理值</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//value word to real</span><br><span class="hljs-comment">//16#01是表征通道类型为电压的一个前序条件，在这里没有太多实际意义</span><br><span class="hljs-comment">//16#02是表征通道类型为电流的一个前序条件，在这里没有太多实际意义</span><br>IF #pre_write.measure_mode = <span class="hljs-number">16</span>#<span class="hljs-number">01</span> THEN<br>    #tempScaleWord := SCALE(IN := WORD_TO_INT(#AI4ST_Control.Ch0_Dig_Value), HI_LIM := <span class="hljs-number">10.0</span>, LO_LIM := <span class="hljs-number">-10.0</span>, BIPOLAR := <span class="hljs-number">1</span>, OUT =&gt; #AI4ST_Control.Ch0_Ana_Value);<br>    #tempScaleWord := SCALE(IN := WORD_TO_INT(#AI4ST_Control.Ch1_Dig_Value), HI_LIM := <span class="hljs-number">10.0</span>, LO_LIM := <span class="hljs-number">-10.0</span>, BIPOLAR := <span class="hljs-number">1</span>, OUT =&gt; #AI4ST_Control.Ch1_Ana_Value);<br>ELSIF #pre_write.measure_mode = <span class="hljs-number">16</span>#<span class="hljs-number">02</span> THEN<br>    #tempScaleWord := SCALE(IN := WORD_TO_INT(#AI4ST_Control.Ch0_Dig_Value), HI_LIM := <span class="hljs-number">20.0</span>, LO_LIM := <span class="hljs-number">-20.0</span>, BIPOLAR := <span class="hljs-number">1</span>, OUT =&gt; #AI4ST_Control.Ch0_Ana_Value);<br>    #tempScaleWord := SCALE(IN := WORD_TO_INT(#AI4ST_Control.Ch1_Dig_Value), HI_LIM := <span class="hljs-number">20.0</span>, LO_LIM := <span class="hljs-number">-20.0</span>, BIPOLAR := <span class="hljs-number">1</span>, OUT =&gt; #AI4ST_Control.Ch1_Ana_Value);<br>END_IF;<br></code></pre></td></tr></table></figure><h2 id="5-关于TEMP接口区的一个注意点："><a href="#5-关于TEMP接口区的一个注意点：" class="headerlink" title="5. 关于TEMP接口区的一个注意点："></a>5. 关于<code>TEMP</code>接口区的一个注意点：</h2><ul><li>如上述code中用于接收函数返回值的<code>#tempScaleWord</code>，因为不会对这个返回值作任何二次利用，故都用一个变量接收。</li><li>对于<code>TEMP</code>的拓展：<font color=red><strong>temp只在函数调用时生效，函数执行完毕后立即被释放，下次写入的那一刻再被赋值，故如果是需要二次处理的中间值，最好不要用temp。</strong></font></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#中的任务和线程</title>
    <link href="/2024/07/21/C#%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/07/21/C#%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Single-thread"><a href="#1-Single-thread" class="headerlink" title="1. Single thread"></a>1. Single thread</h2><ul><li>单线程效果，线程卡顿</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//---------------------------单线程效果---------------------------</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    <span class="hljs-comment">//总耗时3+5=8秒</span><br>    <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;单线程延时三秒执行，主界面有卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">5000</span>);<br>    <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;单线程延时五秒执行，主界面有卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Multiple-thread"><a href="#2-Multiple-thread" class="headerlink" title="2. Multiple thread"></a>2. Multiple thread</h2><ul><li>用委托或者lambda实现</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//---------------------------多线程效果---------------------------</span><br><span class="hljs-keyword">private</span> <span class="hljs-literal">void</span> button2_Click(object sender, EventArgs e)<br>&#123;<br>    <span class="hljs-comment">//thread（）里面需要填入一个委托，或者说方法，此处使用lambda表达式，简化程序代码</span><br>    <span class="hljs-comment">//运行该线程不会影响到UI线程，即不会卡顿</span><br>    <span class="hljs-keyword">Thread</span> t = <span class="hljs-literal">new</span> <span class="hljs-keyword">Thread</span>(() =&gt;<br>    &#123;<br>        <span class="hljs-comment">//总耗时3+5=8秒</span><br>        <span class="hljs-keyword">Thread</span>.Sleep(<span class="hljs-number">3000</span>);<br>        MessageBox.Show(<span class="hljs-string">&quot;多线程延时三秒执行，主界面无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>        <span class="hljs-keyword">Thread</span>.Sleep(<span class="hljs-number">5000</span>);<br>        MessageBox.Show(<span class="hljs-string">&quot;多线程延时五秒执行，主界面无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;);<br>    t.Start();<br>    <span class="hljs-comment">//如果不用lambda匿名方法，则代码如下</span><br>    <span class="hljs-comment">//（）中放入方法名，实现调用</span><br>   <span class="hljs-comment">// Thread t1 = new Thread(threadfun);</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-Task"><a href="#3-Task" class="headerlink" title="3. Task"></a>3. Task</h2><ul><li>用task来做任务管理，不需要先实例化thread<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//---------------------------任务方式实现多线程---------------------------</span><br><span class="hljs-comment">//推荐用法</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    <span class="hljs-comment">//开启任务方式1.（）中直接填入方法名</span><br>    <span class="hljs-comment">//Task.Run(threadfun);</span><br>    <span class="hljs-comment">//开启任务方式2.匿名表达式</span><br>    <span class="hljs-title class_">Task</span>.<span class="hljs-title class_">Run</span>(<span class="hljs-function">() =&gt;</span><br>    &#123;<br>        <span class="hljs-comment">//总耗时3+5=8秒</span><br>        <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">3000</span>);<br>        <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;任务延时三秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>        <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">5000</span>);<br>        <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;任务延时五秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-Synchronization"><a href="#4-Synchronization" class="headerlink" title="4. Synchronization"></a>4. Synchronization</h2><ul><li>同步执行方法<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//------------------------同时多线程运行------------------------</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    <span class="hljs-comment">//同步执行，总耗时5秒</span><br>    <span class="hljs-comment">//匿名任务1</span><br>    <span class="hljs-title class_">Task</span>.<span class="hljs-title class_">Run</span>(<span class="hljs-function">() =&gt;</span><br>    &#123;<br>        <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">3000</span>);<br>        <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;任务1延时三秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;);<br>    <span class="hljs-comment">//匿名任务2</span><br>    <span class="hljs-title class_">Task</span>.<span class="hljs-title class_">Run</span>(<span class="hljs-function">() =&gt;</span><br>    &#123;<br>        <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">5000</span>);<br>        <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;任务2延时五秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;);<br>    <span class="hljs-comment">//两个匿名任务会同时开启</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-Await"><a href="#5-Await" class="headerlink" title="5. Await"></a>5. Await</h2><ul><li>异步方法，方法前用<code>async</code>标记，后续任务需要等<code>await</code>标记任务执行完毕后再执行<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//------------------------等待当前任务结束在往下执行（异步方法async）------------------------</span><br><span class="hljs-comment">//await关键字</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>  <span class="hljs-keyword">await</span>  <span class="hljs-title class_">Task</span>.<span class="hljs-title class_">Run</span>(<span class="hljs-function">() =&gt;</span><br>    &#123;<br>        <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">3000</span>);<br>        <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;任务延时三秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>        <span class="hljs-title class_">Thread</span>.<span class="hljs-title class_">Sleep</span>(<span class="hljs-number">5000</span>);<br>        <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;任务延时五秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;);<br><br>    <span class="hljs-title class_">MessageBox</span>.<span class="hljs-title class_">Show</span>(<span class="hljs-string">&quot;await：等到两个任务均执行完成后再执行该任务&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-WhenAll"><a href="#6-WhenAll" class="headerlink" title="6. WhenAll"></a>6. WhenAll</h2><ul><li>等到所有任务结束后再执行<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//------------------------等到所有任务结束后再执行------------------------</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-type">void</span> <span class="hljs-title">button6_Click</span><span class="hljs-params">(object sender, EventArgs e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//新建一个列表用来存放任务</span><br>    List&lt;<span class="hljs-built_in">Task</span>&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Task</span>&gt;();<br>    <span class="hljs-comment">//添加任务1</span><br>    ts.<span class="hljs-built_in">Add</span>(<span class="hljs-built_in">Task</span>.<span class="hljs-built_in">Run</span>(() =&gt;<br>    &#123;<br>        Thread.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">3000</span>);<br>        MessageBox.<span class="hljs-built_in">Show</span>(<span class="hljs-string">&quot;任务延时三秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;));<br>    <span class="hljs-comment">//添加任务2</span><br>    ts.<span class="hljs-built_in">Add</span>(<span class="hljs-built_in">Task</span>.<span class="hljs-built_in">Run</span>(() =&gt;<br>    &#123;<br>        Thread.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">5000</span>);<br>        MessageBox.<span class="hljs-built_in">Show</span>(<span class="hljs-string">&quot;任务延时五秒执行，无卡顿&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>);<br>    &#125;));<br>    <span class="hljs-comment">//WhenAll..continue with</span><br>    <span class="hljs-comment">//t表示前一个任务的内容，语句要求必须填写。此处用不到具体内容，留空就行</span><br>    <span class="hljs-built_in">Task</span>.<span class="hljs-built_in">WhenAll</span>(ts).<span class="hljs-built_in">ContinueWith</span>(t =&gt; &#123; MessageBox.<span class="hljs-built_in">Show</span>(<span class="hljs-string">&quot;WhenAll：等到两个任务均执行完成后再执行该任务&quot;</span>, <span class="hljs-string">&quot;友情提示&quot;</span>); &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#应用下的txt文件写入</title>
    <link href="/2024/07/21/C#%E5%BA%94%E7%94%A8%E4%B8%8B%E7%9A%84txt%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <url>/2024/07/21/C#%E5%BA%94%E7%94%A8%E4%B8%8B%E7%9A%84txt%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="方法如下："><a href="#方法如下：" class="headerlink" title="方法如下："></a>方法如下：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//file storage function</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">txt_file_generate</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; dic_val</span>)</span><br>&#123;<br>    FolderBrowserDialog my_diaglog = <span class="hljs-keyword">new</span> FolderBrowserDialog();<br>    <span class="hljs-built_in">string</span> save_path = <span class="hljs-built_in">string</span>.Empty;<br>    <span class="hljs-built_in">bool</span> save_ok;<br>    <span class="hljs-built_in">string</span> val = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">string</span> file_name = DateTime.Now.ToString(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>) + <span class="hljs-string">&quot;_Accurtestlogs.txt&quot;</span>;<br>    <span class="hljs-keyword">if</span> (my_diaglog.ShowDialog() == DialogResult.OK)<br>    &#123;<br>        save_path = my_diaglog.SelectedPath + <span class="hljs-string">&quot;\\&quot;</span> + file_name;<br>    &#125;<br>    FileStream fs = <span class="hljs-keyword">new</span> FileStream(save_path, FileMode.Append);<br>    StreamWriter sw = <span class="hljs-literal">null</span>;<br>    sw = <span class="hljs-keyword">new</span> StreamWriter(fs);<br>    <span class="hljs-keyword">foreach</span> (KeyValuePair&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">string</span>&gt; pair <span class="hljs-keyword">in</span> dic_val)<br>    &#123;<br>        sw.WriteLine(pair.Value);<br>    &#125;<br>    sw.Close();<br>    fs.Close();<br>    save_ok = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> save_ok;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#中面向对象的一些基础概念</title>
    <link href="/2024/07/21/C#%E4%B8%AD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/07/21/C#%E4%B8%AD%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-OOP-–Object-Oriented-Programming"><a href="#1-OOP-–Object-Oriented-Programming" class="headerlink" title="1. OOP –Object Oriented Programming"></a>1. OOP –Object Oriented Programming</h2><ul><li><p>实例化类</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">baseclass </span><span class="hljs-keyword">bc </span>= new  <span class="hljs-keyword">baseclass();</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">subclass </span><span class="hljs-keyword">sc </span>= new <span class="hljs-keyword">subclass();</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bc.Func();</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">sc.Func();</span><br></code></pre></td></tr></table></figure></li><li><p>里氏转换</p><ul><li>子类对象可以直接赋值给父类变量</li><li>子类可以调用父类对象，但是父类只有调用自己</li><li>父类中如果是子类对象，则可以将父类强制转换为子类<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//----------------------------------A.里氏转换知识点：----------------------------------<br>//里氏转换原则<span class="hljs-number">1</span>.子类对象可以直接赋值给父类变量<br>sc.Alphabet <span class="hljs-operator">=</span> total.T<span class="hljs-comment">;</span><br>bc.Alphabet <span class="hljs-operator">=</span> sc.Alphabet<span class="hljs-comment">;</span><br>//里氏转换原则<span class="hljs-number">2</span>.子类可以调用父类对象，但是父类只有调用自己<br>sc.bsfun()<span class="hljs-comment">;</span><br>//里氏转换原则<span class="hljs-number">3</span>.父类中如果是子类对象，则可以将父类强制转换为子类<br>baseclass bc2 <span class="hljs-operator">=</span> new subclass()<span class="hljs-comment">;</span><br>subclass sc2 <span class="hljs-operator">=</span> new subclass()<span class="hljs-comment">;</span><br><span class="hljs-attribute">sc2</span> <span class="hljs-operator">=</span> (subclass)bc2<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-抽象类以及抽象类不能被实例化"><a href="#2-抽象类以及抽象类不能被实例化" class="headerlink" title="2. 抽象类以及抽象类不能被实例化"></a>2. 抽象类以及抽象类不能被实例化</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//a. 首先定义一个抽象类shape,包含一个抽象方法CalculateArea</span><br><span class="hljs-keyword">public</span> abstract <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br>&#123;<br>  <span class="hljs-comment">//抽象方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> abstract <span class="hljs-type">double</span> <span class="hljs-title">CalculateArea</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-comment">//抽象类中也可以存在普通方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">Display</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;display&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//b. 创建两派生类Circle和Rectangle,继承自基类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>：Shape<br>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> Radius&#123;get;set;&#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span></span><br><span class="hljs-function">  </span>&#123;<br>    Radius = radius;<br>  &#125;<br><br>  <span class="hljs-comment">//重写基类抽象方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-type">double</span> <span class="hljs-title">CalcualteArea</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> Math.PI*Radius*Radius;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>:Shape<br>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> Width&#123;get;set;&#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> Height&#123;get;set;&#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> width, <span class="hljs-type">double</span> height)</span></span><br><span class="hljs-function">  </span>&#123;<br>    Width = width;<br>    Height = height;<br>  &#125;<br><br>  <span class="hljs-comment">//重写基类抽象方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-type">double</span> <span class="hljs-title">CalculateArea</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> Width*Height;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//c. 使用派生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Program</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(string[] args)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-comment">//创建圆形对象</span><br>    Shape circle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(<span class="hljs-number">5</span>);<br>    circle.<span class="hljs-built_in">Display</span>();<br><br>    <span class="hljs-comment">//创建矩形对象</span><br>    Shape rectangle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Rectangle</span>(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>);<br>    rectangle.<span class="hljs-built_in">Display</span>();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-静态类"><a href="#3-静态类" class="headerlink" title="3. 静态类"></a>3. 静态类</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//----------------------------------B.静态字段知识点：----------------------------------</span><br><span class="hljs-comment">//测试静态字段,</span><br><span class="hljs-comment">//静态字段可以被重新赋值</span><br><span class="hljs-comment">//实例或者对象可以在程序中开拓多个空间，即可以存在多个存储区，但是static在程序里面只会被开拓为一个内存区，不能被示例化。</span><br><span class="hljs-comment">//静态字段，静态方法都用类名.去调用</span><br>base<span class="hljs-keyword">class</span> <span class="hljs-title class_">bc</span> = <span class="hljs-keyword">new</span> baseclass();<br>bc.name = <span class="hljs-string">&quot;Test&quot;</span>;<br>baseclass.address = <span class="hljs-string">&quot;四川&quot;</span>;<br>Console.WriteLine(baseclass.address);<br></code></pre></td></tr></table></figure><h2 id="4-委托"><a href="#4-委托" class="headerlink" title="4. 委托"></a>4. 委托</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//_______________________________delegate test____________________________________</span><br><span class="hljs-comment">//1.委托一个和被委托方法一致的类型</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCallBack</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> val</span>)</span>;<br>   <br><span class="hljs-comment">//写出需要被委托的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span><br>&#123; <br>    textBox2.Text = <span class="hljs-keyword">value</span>.ToString();<br>&#125;<br><span class="hljs-comment">//需要新建线程来实现的方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">txtBox</span>()</span><br>&#123;<br>    setCallBack sV = <span class="hljs-keyword">new</span> setCallBack(setValue);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)<br>    &#123;<br>        <span class="hljs-comment">//invoke,在该textBox2控件上执行委托，invoke配合委托使用，要求传入一个委托方法和参数</span><br>        textBox2.Invoke(sV,i);<br>        <span class="hljs-comment">//this.Invoke(sV, i);//this表示form，这种用法是可以的</span><br>        <span class="hljs-comment">//不使用invoke，报错：&#x27;Cross-thread operation not valid: Control &#x27;textBox2&#x27; accessed from a thread other than the thread it was created on.&#x27;</span><br>        <span class="hljs-comment">//setValue(i);//sV(i);</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//专门用于测试跨线程</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button5_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    Thread th = <span class="hljs-keyword">new</span> Thread(txtBox);<br>    th.IsBackground = <span class="hljs-literal">true</span>; <br>    th.Start(); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-嵌套类"><a href="#5-嵌套类" class="headerlink" title="5. 嵌套类"></a>5. 嵌套类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//----------------------------------D.嵌套类知识点：----------------------------------</span><br><span class="hljs-comment">//访问嵌套类</span><br><span class="hljs-comment">//嵌套类的简单理解就是类里面写类</span><br>baseclass.<span class="hljs-type">Person</span> <span class="hljs-variable">bc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">baseclass</span>.Person();<br>bc1.run();<br></code></pre></td></tr></table></figure><h2 id="6-匿名类"><a href="#6-匿名类" class="headerlink" title="6. 匿名类"></a>6. 匿名类</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//----------------------------------E.匿名类知识点：----------------------------------</span><br><span class="hljs-comment">//匿名类定义在方法或者函数里面</span><br><span class="hljs-comment">//定义一组匿名类</span><br><span class="hljs-comment">//匿名类一般用于存储一组只读属性</span><br><span class="hljs-comment">//匿名方法lambda，和py用法差不多</span><br><span class="hljs-keyword">var</span> lam = <span class="hljs-keyword">new</span> &#123; Name = <span class="hljs-string">&quot;匿名&quot;</span>, Properity = <span class="hljs-string">&quot;只读&quot;</span> &#125;;<br><span class="hljs-built_in">Console</span>.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;+&#123;1&#125;&quot;</span>, lam.Name, lam.Properity);<br><span class="hljs-built_in">Console</span>.ReadKey();<br></code></pre></td></tr></table></figure><h2 id="7-密封类"><a href="#7-密封类" class="headerlink" title="7. 密封类"></a>7. 密封类</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//----------------------------------F.密封类知识点：----------------------------------</span><br><span class="hljs-comment">//实例化密封类</span><br><span class="hljs-comment">//sealed</span><br>seal se = <span class="hljs-keyword">new</span> <span class="hljs-built_in">seal</span>();<br>se.<span class="hljs-built_in">run</span>();<br><br><span class="hljs-comment">//创建一个密封类</span><br><span class="hljs-comment">//这是一个密封类，不能被子类找到和继承</span><br><span class="hljs-keyword">public</span> sealed <span class="hljs-keyword">class</span> <span class="hljs-title class_">seal</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;这是一个密封类，不能被子类找到和继承&quot;</span>);<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Object类"><a href="#8-Object类" class="headerlink" title="8. Object类"></a>8. Object类</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//----------------------------------G.Object类，拆箱装箱知识点：----------------------------------</span><br><span class="hljs-comment">//对object，拆箱和装箱进行讲解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span><br>&#123;<br>    <span class="hljs-comment">//object类</span><br>    <span class="hljs-comment">//object里面公开的方法，可以被任何子类找到（Equals/GetHashCode/GetType/ToString）</span><br>    <span class="hljs-comment">//按F12查看帮助</span><br>    <span class="hljs-comment">//注意看大小写Object的区别，大写是类，小写是类型关键字</span><br>    object ob;<br>    Object ob1;<br><br>    <span class="hljs-comment">//装箱和拆箱</span><br>    <span class="hljs-comment">//装箱-值类型&gt;引用类型</span><br>    <span class="hljs-comment">//拆箱-引用类型&gt;值类型</span><br>    <span class="hljs-comment">//两种类型只有存在继承关系的时候，才可能出现装箱和拆箱操作。</span><br>    <span class="hljs-comment">//装箱拆箱本质是堆空间和栈空间的互换，频繁互换会极大的拖累运算速度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">boxrun</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(a);<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>();<br>        object b = a; <span class="hljs-comment">//装箱</span><br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(b);<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>();<br>        a = (<span class="hljs-type">int</span>)b;<span class="hljs-comment">//拆箱，需要强转</span><br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(a);<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>();<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//Attribute--特性，Relfection--反射,可以做到不动程序框架，仅仅是新增类就可以做到把新增的类加到原来的框架里面</span><br><span class="hljs-comment">//泛型委托：Action和Func</span><br><span class="hljs-comment">//预处理方法</span><br><span class="hljs-comment">//泛型数组</span><br><span class="hljs-comment">//Lambda匿名方法</span><br><span class="hljs-comment">//以上属于具体需要再百度的高级应用</span><br><span class="hljs-comment">//process、Thread、Task、async、await等多种方法，用在winform或wpf上。百度具体使用案例即可</span><br><span class="hljs-comment">//string类和stringbiluder类。用stringbiluder类来解决string不可变性导致的内存占用过多的问题。</span><br></code></pre></td></tr></table></figure><h2 id="9-父类虚方法以及在子类中重写虚方法"><a href="#9-父类虚方法以及在子类中重写虚方法" class="headerlink" title="9. 父类虚方法以及在子类中重写虚方法"></a>9. 父类虚方法以及在子类中重写虚方法</h2><ul><li>父类建立虚方法<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//----------------------------------父类虚方法 virtual--多态特征----------------------------------</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;父类的虚方法&quot;</span>);<br>    <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>子类重写虚方法<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//----------------------------------子类重写父类虚方法----------------------------------</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-type">void</span> <span class="hljs-title">Func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// base.Func();---这条表示继承自父类，屏蔽可以只使用子类自己的方法，一般这个base用于公有的初始化方法，不屏蔽可以实现子类继承父类的公有方法。</span><br>    <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;子类的虚方法&quot;</span>);<br>    <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-继承，接口，重载，构造函数，析构函数"><a href="#10-继承，接口，重载，构造函数，析构函数" class="headerlink" title="10. 继承，接口，重载，构造函数，析构函数"></a>10. 继承，接口，重载，构造函数，析构函数</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//----------------------------------子类----------------------------------</span><br><span class="hljs-comment">//子类继承与父类</span><br><span class="hljs-comment">//用：表示继承关系</span><br><span class="hljs-comment">//，后加上接口，接口需要右键选择&quot;快速动作和重构&quot;来生成，不然要报错</span><br><span class="hljs-comment">//在同一个项目内internal=public修饰符。系统默认用internal修饰类</span><br><span class="hljs-built_in">int</span>ernal <span class="hljs-keyword">class</span> <span class="hljs-symbol">subclass:<span class="hljs-symbol">baseclass</span>,<span class="hljs-symbol">Interface1</span></span><br>&#123;<br>    <span class="hljs-comment">//----------------------------------重载，有参构造函数，无参构造函数等同名函数同时存在叫做重载----------------------------------</span><br>    <span class="hljs-comment">//1.子类构造函数,无参构造函数</span><br>    <span class="hljs-keyword">public</span> subclass() &#123; &#125;<br><br>    <span class="hljs-comment">//2.有参子类构造函数</span><br>    <span class="hljs-keyword">public</span> subclass(total m_alp)<br>    &#123; <br>        <br>    &#125;<br>    <span class="hljs-comment">//3.有参继承子类构造函数,用base关键字表示继承自父类</span><br>    <span class="hljs-keyword">public</span> subclass(total m_alp, <span class="hljs-built_in">int</span> m_wei, <span class="hljs-built_in">float</span> m_siz, <span class="hljs-built_in">string</span> m_sha)<br>        :base(m_alp, m_wei, m_siz, m_sha)<br>    &#123; <br>          <br>    &#125;<br><br>    <span class="hljs-comment">//----------------------------------析构函数，~函数名（）；用于手动释放资源----------------------------------</span><br></code></pre></td></tr></table></figure><h2 id="11-接口"><a href="#11-接口" class="headerlink" title="11. 接口"></a>11. 接口</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">namespace</span> <span class="hljs-symbol">testForObject</span><br>&#123;<br>    <span class="hljs-comment">//----------------------------------接口----------------------------------</span><br>    <span class="hljs-comment">//接口，需要单独添加一个接口，接口没有CLASS修饰</span><br>    <span class="hljs-comment">//接口用于规范规范扩展的功能</span><br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Interface1</span><br>    &#123;<br>        <span class="hljs-comment">//接口中不能包含字段</span><br>        <span class="hljs-comment">//private string name;</span><br><br>        <span class="hljs-comment">//接口中可以包含属性，属性是从哪里来的？</span><br>        <span class="hljs-comment">//继承而来，接口可以多继承</span><br><br><br>        <span class="hljs-comment">//接口中的成员不允许添加访问修饰符，默认都是public,</span><br>        <span class="hljs-comment">//接口中的方法不能有方法体</span><br>        <span class="hljs-built_in">void</span> Fly();<br><br>        <span class="hljs-comment">//接口中全是abstract方法。但是却不能使用抽象修饰符。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-接口使用用例"><a href="#12-接口使用用例" class="headerlink" title="12. 接口使用用例"></a>12. 接口使用用例</h2><ul><li><p>创建一个基类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> brand;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Brand<br>    &#123; <br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> brand; &#125; <span class="hljs-keyword">set</span> &#123; brand = <span class="hljs-keyword">value</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> brand</span>)</span> <br>    &#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Run</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;品牌的汽车在奔跑&quot;</span>, brand);<br>        Console.ReadKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建一个接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//----------------------------------接口测试----------------------------------</span><br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IFly</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fly</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建两个子类，其中一个会用到接口方法</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">BMWCar:<span class="hljs-symbol">Car</span></span><br>&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">public</span> BMWCar(<span class="hljs-built_in">string</span> brand)<br>        :base(brand)<br>    &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">BatCar: <span class="hljs-symbol">Car</span>,<span class="hljs-symbol">IFly</span></span><br>&#123;<br>    <span class="hljs-keyword">public</span> BatCar(<span class="hljs-built_in">string</span> brand)<br>    :base(brand)<br>    &#123; &#125;<br><br>    <span class="hljs-comment">//快速操作和重构，和接口抽象方法保持一直</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> Fly()<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;batCarCanFly&quot;</span>);<br>        Console.ReadKey();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#应用下的CSV文件写入和读出</title>
    <link href="/2024/07/21/C#%E5%BA%94%E7%94%A8%E4%B8%8B%E7%9A%84CSV%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%92%8C%E8%AF%BB%E5%87%BA/"/>
    <url>/2024/07/21/C#%E5%BA%94%E7%94%A8%E4%B8%8B%E7%9A%84CSV%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%92%8C%E8%AF%BB%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1-建立DataTable-类型"><a href="#1-建立DataTable-类型" class="headerlink" title="1. 建立DataTable 类型"></a>1. 建立DataTable 类型</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">DataTable my_accurdt;<br>my_accurdt = <span class="hljs-keyword">new</span> DataTable(DateTime.Now.<span class="hljs-keyword">To</span><span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;yMMddHHmm&quot;</span>) + <span class="hljs-string">&quot;_AccurData&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-创建DataTable的列和行"><a href="#2-创建DataTable的列和行" class="headerlink" title="2. 创建DataTable的列和行"></a>2. 创建DataTable的列和行</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//列<br>my_accurdt.<span class="hljs-keyword">Columns</span>.<span class="hljs-keyword">Add</span>(<span class="hljs-built_in">new</span> DataColumn(&quot;Oder&quot;, typeof(<span class="hljs-type">int</span>)));<br>my_accurdt.<span class="hljs-keyword">Columns</span>.<span class="hljs-keyword">Add</span>(<span class="hljs-built_in">new</span> DataColumn(&quot;TimeStamp&quot;, typeof(string)));<br><br>//行<br>DataRow my_rows = my_accurdt.NewRow();<br>my_rows[&quot;Oder&quot;] = dataTableOrder;<br>my_rows[&quot;TimeStamp&quot;] = DateTime.Now.ToString(&quot;yMMddHHmm&quot;);<br>my_accurdt.<span class="hljs-keyword">Rows</span>.<span class="hljs-keyword">Add</span>(my_rows);<br></code></pre></td></tr></table></figure><h2 id="3-把DataTable显示在WinForm的dataGridView控件中"><a href="#3-把DataTable显示在WinForm的dataGridView控件中" class="headerlink" title="3. 把DataTable显示在WinForm的dataGridView控件中"></a>3. 把DataTable显示在WinForm的dataGridView控件中</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Accur_table_dataGridView.DataSource</span> = my_accurdt<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="4-创建写入CSV文件方法"><a href="#4-创建写入CSV文件方法" class="headerlink" title="4. 创建写入CSV文件方法"></a>4. 创建写入CSV文件方法</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//<span class="hljs-keyword">write</span> <span class="hljs-keyword">function</span><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> writeDataCSV(string file_path, DataTable my_dt)<br>&#123;<br>    FileStream my_filestream;<br>    StreamWriter my_streamwriter;<br>    string my_data = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (!File.<span class="hljs-keyword">Exists</span>(file_path))<br>    &#123;<br>        my_filestream = <span class="hljs-built_in">new</span> FileStream(file_path, FileMode.<span class="hljs-keyword">Create</span>, FileAccess.<span class="hljs-keyword">Write</span>);<br>        my_streamwriter = <span class="hljs-built_in">new</span> StreamWriter(my_filestream, <span class="hljs-keyword">Encoding</span>.UTF8);<br>        //<span class="hljs-keyword">write</span> <span class="hljs-keyword">columns</span> <span class="hljs-type">name</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; my_dt.<span class="hljs-keyword">Columns</span>.Count; i++)<br>        &#123;<br>            my_data += my_dt.<span class="hljs-keyword">Columns</span>[i].ColumnName.ToString();<br>            <span class="hljs-keyword">if</span> (i &lt; my_dt.<span class="hljs-keyword">Columns</span>.Count - <span class="hljs-number">1</span>)<br>            &#123;<br>                my_data += &quot;,&quot;;<br>            &#125;<br>        &#125;<br>        my_streamwriter.WriteLine(my_data);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        my_filestream = <span class="hljs-built_in">new</span> FileStream(file_path, FileMode.Append, FileAccess.<span class="hljs-keyword">Write</span>);<br>        my_streamwriter = <span class="hljs-built_in">new</span> StreamWriter(my_filestream, <span class="hljs-keyword">Encoding</span>.UTF8);<br>    &#125;<br>    //<span class="hljs-keyword">write</span> <span class="hljs-keyword">rows</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; my_dt.<span class="hljs-keyword">Rows</span>.Count; i++)<br>    &#123;<br>        my_data = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; my_dt.<span class="hljs-keyword">Columns</span>.Count; j++)<br>        &#123;<br>            my_data += my_dt.<span class="hljs-keyword">Rows</span>[i][j].ToString();<br>            <span class="hljs-keyword">if</span> (j &lt; my_dt.<span class="hljs-keyword">Columns</span>.Count - <span class="hljs-number">1</span>)<br>            &#123;<br>                my_data += &quot;,&quot;;<br>            &#125;<br>        &#125;<br>        my_streamwriter.WriteLine(my_data);<br>    &#125;<br>    my_streamwriter.<span class="hljs-keyword">Close</span>();<br>    my_filestream.<span class="hljs-keyword">Close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-创建读出CSV文件方法"><a href="#5-创建读出CSV文件方法" class="headerlink" title="5. 创建读出CSV文件方法"></a>5. 创建读出CSV文件方法</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//<span class="hljs-keyword">read</span> <span class="hljs-keyword">function</span><br><span class="hljs-built_in">public</span> DataTable readDataCSV(string file_path)<br>&#123;<br>    DataTable my_dt = <span class="hljs-built_in">new</span> DataTable();<br>    FileStream my_filestream = <span class="hljs-built_in">new</span> FileStream(file_path, FileMode.<span class="hljs-keyword">Open</span>, FileAccess.<span class="hljs-keyword">Read</span>);<br>    StreamReader my_streamreader = <span class="hljs-built_in">new</span> StreamReader(my_filestream, <span class="hljs-keyword">Encoding</span>.UTF8);<br>    string my_strLine = <span class="hljs-keyword">null</span>;<br>    string[] my_arrayLine = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-type">bool</span> isFirst = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-type">int</span> my_dtColumns = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> ((my_strLine = my_streamreader.ReadLine()) != <span class="hljs-keyword">null</span>)<br>    &#123;<br>        my_strLine = my_strLine.Trim();<br>        my_arrayLine = my_strLine.Split(<span class="hljs-string">&#x27;,&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span> (isFirst)<br>        &#123;<br>            my_dtColumns = my_arrayLine.Length;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; my_dtColumns; i++)<br>            &#123;<br>                my_dt.<span class="hljs-keyword">Columns</span>.<span class="hljs-keyword">Add</span>(my_arrayLine[i]);<br>            &#125;<br>            isFirst = <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            DataRow my_datarow = my_dt.NewRow();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; my_dtColumns; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (my_arrayLine.Length &gt; j)<br>                &#123;<br>                    my_datarow[j] = my_arrayLine[j];<br>                &#125;<br>            &#125;<br>            my_dt.<span class="hljs-keyword">Rows</span>.<span class="hljs-keyword">Add</span>(my_datarow);<br>        &#125;<br>    &#125;<br>    my_streamreader.<span class="hljs-keyword">Close</span>();<br>    my_filestream.<span class="hljs-keyword">Close</span>();<br>    <span class="hljs-keyword">return</span> my_dt;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-创建文件保存路径选择框"><a href="#6-创建文件保存路径选择框" class="headerlink" title="6. 创建文件保存路径选择框"></a>6. 创建文件保存路径选择框</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//file storage path<br>public string SelectFolderPath()<br>&#123;<br>    string my_folderpath <span class="hljs-operator">=</span> string.Empty<span class="hljs-comment">;</span><br>    FolderBrowserDialog my_folderbrowser <span class="hljs-operator">=</span> new FolderBrowserDialog()<span class="hljs-comment">;</span><br>    DialogResult my_result <span class="hljs-operator">=</span> my_folderbrowser.ShowDialog()<span class="hljs-comment">;</span><br>    if (my_result <span class="hljs-operator">=</span><span class="hljs-operator">=</span> DialogResult.OK)<br>    &#123;<br>        my_folderpath <span class="hljs-operator">=</span> my_folderbrowser.SelectedPath<span class="hljs-comment">;</span><br>        return my_folderpath<span class="hljs-comment">;</span><br>    &#125;<br>    else<br>    &#123; return string.Empty<span class="hljs-comment">; &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用WinForm实现进度条显示</title>
    <link href="/2024/07/21/%E7%94%A8WinForm%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA/"/>
    <url>/2024/07/21/%E7%94%A8WinForm%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1-整体UI"><a href="#1-整体UI" class="headerlink" title="1. 整体UI"></a>1. 整体UI</h2><p><img src="/img/blog_page/3427087-20240507140355562-1664065079.png"><br><img src="/img/blog_page/3427087-20240507140427786-1676651971.png"></p><h2 id="2-backgroundwork事件"><a href="#2-backgroundwork事件" class="headerlink" title="2. backgroundwork事件"></a>2. backgroundwork事件</h2><p>它用于在单独的后台线程上执行耗时的操作，而不阻塞UI线程</p><ul><li><p>创建backgroundwork</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//------------------------backgroundworker_Dowork事件------------------------</span><br><span class="hljs-comment">//------------------------（object sender,EventArgs e）具体表示什么意思？------------------------</span><br><span class="hljs-comment">//Sender是事件源，表示触发事件的那个组件，比如按钮，标签，列表</span><br><span class="hljs-comment">//EventArgs是事件参数，是用来辅助处理事件的，比如用鼠标点击窗体，这个EventArgs就会包含点击的位置信息等相关细节信息</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backgroundWorker1_DoWork</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, DoWorkEventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-comment">//新线程，新任务</span><br>    <span class="hljs-comment">//as</span><br>    BackgroundWorker worker = sender <span class="hljs-keyword">as</span> BackgroundWorker;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (worker.CancellationPending == <span class="hljs-literal">true</span>)<br>        &#123;<br>            e.Cancel = <span class="hljs-literal">true</span>;<span class="hljs-comment">//更改运行返回状态，并不能取消停止</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//实际编码的时候，把此处替换为工作代码</span><br>            Thread.Sleep(<span class="hljs-number">50</span>);<br>            <span class="hljs-comment">//提交进度报告，非常重要的方法</span><br>            worker.ReportProgress(i);<br>        &#125;<br>    &#125;<br>    e.Result = e.Argument;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>事件启动和停止</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//事件启动</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button7_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (backgroundWorker1.<span class="hljs-property">IsBusy</span> != <span class="hljs-literal">true</span>)<br>    &#123;<br>        backgroundWorker1.<span class="hljs-title class_">RunWorkerAsync</span>(<span class="hljs-string">&quot;放入启动参数，其实也可以不放&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//事件停止</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button8_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (backgroundWorker1.<span class="hljs-property">WorkerSupportsCancellation</span> == <span class="hljs-literal">true</span>)<br>    &#123;<br>        backgroundWorker1.<span class="hljs-title class_">CancelAsync</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进度条变化处理事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//进度条变化处理事件</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">backgroundWorker1_ProgressChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">ProgressChangedEventArgs</span> e</span>)<br>&#123;<br>    progressBar1.<span class="hljs-property">Value</span>=e.<span class="hljs-property">ProgressPercentage</span>;<br>    label2.<span class="hljs-property">Text</span>= (e.<span class="hljs-property">ProgressPercentage</span>.<span class="hljs-title class_">ToString</span>() + <span class="hljs-string">&quot;%&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>事件处理完成</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//事件处理完成</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">backgroundWorker1_RunWorkerCompleted</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">RunWorkerCompletedEventArgs</span> e</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (e.<span class="hljs-property">Cancelled</span> == <span class="hljs-literal">true</span>)<br>    &#123;<br>        label2.<span class="hljs-property">Text</span> = <span class="hljs-string">&quot;Canceled&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.<span class="hljs-property">Error</span> != <span class="hljs-literal">null</span>)<br>    &#123; <br>        label2.<span class="hljs-property">Text</span>=<span class="hljs-string">&quot;Error&quot;</span>+e.<span class="hljs-property">Error</span>.<span class="hljs-property">Message</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        label2.<span class="hljs-property">Text</span> = <span class="hljs-string">&quot;Done!Result=&quot;</span> + e.<span class="hljs-property">Result</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#与PLC变量在数据交互上的一些探索</title>
    <link href="/2024/07/21/C#%E4%B8%8EPLC%E5%8F%98%E9%87%8F%E5%9C%A8%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%A2%E7%B4%A2/"/>
    <url>/2024/07/21/C#%E4%B8%8EPLC%E5%8F%98%E9%87%8F%E5%9C%A8%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%A2%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基于C-的数据交互"><a href="#1-基于C-的数据交互" class="headerlink" title="1. 基于C#的数据交互"></a>1. 基于C#的数据交互</h2><p> <font color=red>A. S7</font>，<code>using S7.Net</code>,后文读写数据时二次封装过S7协议，这里暂且不表，只列举S7协议最原始的应用。</p><ul><li><p>new一个PLC对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">        <span class="hljs-comment">//idenfy basic link params</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> plc_ip;<br>        <span class="hljs-keyword">private</span> CpuType plc_type;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">short</span> plc_rack, plc_slot;<br>        <span class="hljs-keyword">public</span> Plc my_plc;<br><br>my_plc = <span class="hljs-keyword">new</span> Plc(plc_type, plc_ip, plc_rack, plc_slot);<br></code></pre></td></tr></table></figure></li><li><p>连接和断开PLC</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//connect</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">connect_plc</span>()</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        my_plc.Open();<br>    &#125;<br>    <span class="hljs-keyword">catch</span><br>    &#123;<br>        MessageBox.Show(<span class="hljs-string">&quot;plc can&#x27;t be connected,check params!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (my_plc.IsConnected)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//disconnected</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">disconnect_plc</span>()</span><br>&#123;<br>    my_plc.Close();<br>    <span class="hljs-keyword">if</span> (my_plc.IsConnected)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读写数据，S7_registertype是PLC的寄存器地址类型，如DB,M,I,Q,T,C等。S7_datatype是自己提前封装好的bool,byte,word,int等等这一类基础数据类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//写<span class="hljs-type">bool</span>，<span class="hljs-type">bool</span>由byte数组的位寻址而来，bit_address就是数组下标<br>my_plc.WriteBit(S7_registertype, iDB_num, iDB_start_byteadd, bit_address, (<span class="hljs-type">bool</span>)<span class="hljs-keyword">values</span>);<br>//写非<span class="hljs-type">bool</span><br>my_plc.<span class="hljs-keyword">Write</span>(S7_registertype, iDB_num, iDB_start_byteadd, <span class="hljs-keyword">values</span>);<br>//读，count是计数单位，一般写<span class="hljs-number">1</span>，以一个byte作为最小计算单位<br>my_plc.<span class="hljs-keyword">Read</span>(S7_registertype, iDB_num, iDB_start_byteadd, S7_datatyp, count);<br></code></pre></td></tr></table></figure><p><font color=red>B. 用静态变量存储PLC的交互数据</font></p></li><li><p>UI和PLC变量如下：<br><img src="/img/blog_page/3427087-20240508100629433-1745040443.png"><br><img src="/img/blog_page/3427087-20240508100808076-1598016210.png"></p></li><li><p>新建static</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">data_yamltest_exchange</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span> byte_var;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">short</span> word_var;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> bool bool_var;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据交互，这里的数据二次封装过的，但是是基于上面S7协议封装的，这里不深究</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//task1</span><br>Task.Run(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (my_plc_status)<br>        &#123;<br>            <span class="hljs-comment">//read from plc</span><br>            data_yamltest_exchange.bool_var = my_s7.bool_rw_value(<span class="hljs-number">132</span>, my_plc_iDB, <span class="hljs-number">4</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-number">0</span>); ;<br><br>            <span class="hljs-comment">//write to plc </span><br>            my_s7.write_read_value(<span class="hljs-string">&quot;word&quot;</span>, <span class="hljs-number">132</span>, my_plc_iDB, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;w&quot;</span>, data_yamltest_exchange.word_var, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            my_s7.write_read_value(<span class="hljs-string">&quot;byte&quot;</span>, <span class="hljs-number">132</span>, my_plc_iDB, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;w&quot;</span>, data_yamltest_exchange.byte_var, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>UI后端代码，这里用了两个委托来完成radioButton的显示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> partial <span class="hljs-keyword">class</span> <span class="hljs-title class_">_6Yaml_test</span> : <span class="hljs-title class_">UserControl</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">_6Yaml_test</span>(<span class="hljs-params"></span>)<br>    &#123;<br>        <span class="hljs-title class_">InitializeComponent</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">textBox1</span>.<span class="hljs-property">Text</span> = <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">textBox2</span>.<span class="hljs-property">Text</span> = <span class="hljs-string">&quot;0&quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">string</span> val = <span class="hljs-literal">null</span>;<br>    bool status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">_6Yaml_test_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>    &#123;<br>        <span class="hljs-title class_">Task</span>.<span class="hljs-title class_">Run</span>(<span class="hljs-function">() =&gt;</span><br>        &#123;<br>            setTextCallBack sV = <span class="hljs-keyword">new</span> <span class="hljs-title function_">setTextCallBack</span>(setValue);<br>            setRadioCallBack rV = <span class="hljs-keyword">new</span> <span class="hljs-title function_">setRadioCallBack</span>(setStatus);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (data_yamltest_exchange.<span class="hljs-property">bool_var</span> == <span class="hljs-literal">true</span>)<br>                &#123;<br>                    status = <span class="hljs-literal">true</span>;<br>                    val = <span class="hljs-string">&quot;bool have been enabled&quot;</span>;<br>                    radioButton1.<span class="hljs-title class_">Invoke</span>(sV, val);<br>                    radioButton1.<span class="hljs-title class_">Invoke</span>(rV, status);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    status = <span class="hljs-literal">false</span>;<br>                    val = <span class="hljs-string">&quot;bool have been disabled&quot;</span>;<br>                    radioButton1.<span class="hljs-title class_">Invoke</span>(sV, val);<br>                    radioButton1.<span class="hljs-title class_">Invoke</span>(rV, status);<br>                &#125;<br>                <span class="hljs-keyword">try</span><br>                &#123;<br>                    data_yamltest_exchange.<span class="hljs-property">word_var</span> = <span class="hljs-title class_">Convert</span>.<span class="hljs-title class_">ToInt16</span>(textBox2.<span class="hljs-property">Text</span>.<span class="hljs-title class_">ToString</span>());<br>                    data_yamltest_exchange.<span class="hljs-property">byte_var</span> = <span class="hljs-title class_">Convert</span>.<span class="hljs-title class_">ToByte</span>(textBox1.<span class="hljs-property">Text</span>.<span class="hljs-title class_">ToString</span>());<br>                &#125;<br>                <span class="hljs-keyword">catch</span> &#123; <span class="hljs-keyword">break</span>; &#125;;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">//cross-thread delivery</span><br>    <span class="hljs-comment">//1.delegate type</span><br>    <span class="hljs-keyword">public</span> delegate <span class="hljs-built_in">void</span> <span class="hljs-title function_">setTextCallBack</span>(<span class="hljs-built_in">string</span> val);<br>    <span class="hljs-keyword">public</span> delegate <span class="hljs-built_in">void</span> <span class="hljs-title function_">setRadioCallBack</span>(bool status);<br>    <span class="hljs-comment">//2.delegate function</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> val</span>)<br>    &#123;<br>        radioButton1.<span class="hljs-property">Text</span>=val;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setStatus</span>(<span class="hljs-params">bool status</span>)<br>    &#123; <br>    radioButton1.<span class="hljs-property">Checked</span> = status;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>这个方法里，PLC读出的数据存储在自建的静态类里，要写入PLC变量的值也由自建的静态类给出，C#各个线程都可以访问该静态类，避免了各个线程和类之间传值的复杂和繁琐。</p></li></ul><p><font color=red>C. 用yaml交互</font></p><ul><li><p>安装<code>YamlDoNet</code>库<br><img src="/img/blog_page/3427087-20240508103931415-41497659.png"></p></li><li><p>引用命名空间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">using</span> YamlDotNet.Serialization;<br></code></pre></td></tr></table></figure></li><li><p>新建文件夹，新建<code>.yaml</code>文件，建立yaml结构<br><img src="/img/blog_page/3427087-20240508110520615-1195770345.png"></p></li><li><p>读取yaml文件方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//yaml_read</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">Yaml_read</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> file_path</span>)</span><br>&#123; <br><span class="hljs-keyword">var</span> deserializer = <span class="hljs-keyword">new</span> DeserializerBuilder().Build();<br>    T my_yamlObject;<br>    <span class="hljs-keyword">using</span> (<span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> StreamReader(file_path))<br>    &#123; <br>    my_yamlObject=deserializer.Deserialize&lt;T&gt;(reader);<br>    &#125;<br>    <span class="hljs-keyword">return</span> my_yamlObject;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写入yaml文件方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//yaml_write</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Yaml_write</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj, <span class="hljs-built_in">string</span> file_path</span>)</span><br>&#123; <br><span class="hljs-keyword">var</span> serializer = <span class="hljs-keyword">new</span> SerializerBuilder().WithNamingConvention(CamelCaseNamingConvention.Instance).Build();<br>    <span class="hljs-keyword">var</span> my_yaml = serializer.Serialize(obj);<br>    File.WriteAllText(file_path, my_yaml);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立和yaml结构一致的class结构<font color=red>，<strong>这是重点</strong></font></p><ul><li>用<code>[YamlMember(Alias)=&quot;&quot;]</code>来指定yaml文件中的结构名]</li><li><code>[YamlIgnore]</code>用于在序列化或者反序列化的时候忽略掉它</li><li><code>[YamlMember(Order = 1)]</code>用于指定序列化的顺序</li><li><code>&#123;get;set;&#125;</code>用于设置yaml结构的属性，<code>公有属性</code>。yaml文件的结构本身就相当于被保护起来的一个<code>私有字段</code>。</li><li><strong><font color=red>yaml文件中不要用table键缩进，会报错，缩进一般使用空格，敲两个或者四个空格</font></strong></li><li><strong><font color=red>yaml内容的结构名，和实际程序里面必须一一对应，一字不差</font></strong></li></ul></li><li><p>建立yaml文件需要的程序结构样例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//yaml结构</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">yaml_data</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">yaml_test_data1</span><br>    &#123;<br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;Byte_var&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">byte</span> Byte_var &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;Word_var&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> Word_var &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;Bool_var&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Bool_var &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">yaml_test_data2</span><br>    &#123;<br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;Int_var&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Int_var &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;Char_var&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span> Char_var &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Class II</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">yamal_class_collection</span><br>    &#123;<br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;test_data1&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> yaml_test_data1 test_data1 &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>        [<span class="hljs-meta">YamlMember(Alias = <span class="hljs-string">&quot;test_data2&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> yaml_test_data2 test_data2 &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//Class I</span><br>    [<span class="hljs-meta">YamlMember(Alias=<span class="hljs-string">&quot;data_collection&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> yamal_class_collection data_collection &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立yaml文件内容，注意上下对应</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">data_collection:  #Class I 一级<span class="hljs-keyword">class</span>名称，和程序对应<br>  <span class="hljs-symbol">test_data1:  </span>#<span class="hljs-symbol">Class</span> <span class="hljs-symbol">II</span> 二级<span class="hljs-symbol">class</span>名称，和程序对应<br>    <span class="hljs-symbol">Byte_var: <span class="hljs-symbol">0x10</span></span>  #各个字段<br>    <span class="hljs-symbol">Word_var: <span class="hljs-symbol">32</span></span><br>    <span class="hljs-symbol">Bool_var: <span class="hljs-symbol">false</span></span><br>    <br>  <span class="hljs-symbol">test_data2:  </span>#<span class="hljs-symbol">Class</span> <span class="hljs-symbol">II</span> 二级<span class="hljs-symbol">class</span>名称，和程序对应<br>    <span class="hljs-symbol">Int_var: <span class="hljs-symbol">99</span></span><br>    <span class="hljs-symbol">Char_var: </span>&#x27;<span class="hljs-symbol">a</span>&#x27;<br></code></pre></td></tr></table></figure></li><li><p>示意如图：<br><img src="/img/blog_page/3427087-20240508171815530-1967107112.png"></p></li><li><p>引用yaml，在load事件中读取yaml文件默认配置</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">yaml_data my_yaml_data <span class="hljs-operator">=</span> new yaml_data()<span class="hljs-comment">;</span><br>Config_yaml my_yaml<span class="hljs-operator">=</span> new Config_yaml()<span class="hljs-comment">;</span><br>my_yaml_data <span class="hljs-operator">=</span> my_yaml.Yaml_read&lt;yaml_data&gt;(<span class="hljs-string">&quot;C:\\Users\\testyaml.yaml&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>C# and PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>PLC</tag>
      
      <tag>s7netplus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WinForm下实现子窗体</title>
    <link href="/2024/07/21/WinForm%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%AD%90%E7%AA%97%E4%BD%93/"/>
    <url>/2024/07/21/WinForm%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%AD%90%E7%AA%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>如果想要实现在同一个Form下的子窗体切换，下面的方法可以实现。</p><h2 id="1-窗体设计，如图"><a href="#1-窗体设计，如图" class="headerlink" title="1. 窗体设计，如图"></a>1. 窗体设计，如图</h2><p><img src="/img/blog_page/3427087-20240507125229797-524341452.png"></p><h2 id="2-增加子窗体。鼠标右键项目，选择添加，选择用户控件"><a href="#2-增加子窗体。鼠标右键项目，选择添加，选择用户控件" class="headerlink" title="2. 增加子窗体。鼠标右键项目，选择添加，选择用户控件"></a>2. 增加子窗体。鼠标右键项目，选择添加，选择用户控件</h2><ul><li>注意<code>修改用户控件的大小尺寸</code>，和GroupBox的尺寸匹配。<br><img src="/img/blog_page/3427087-20240507125532671-1650592718.png"></li></ul><h2 id="3-建立好子窗体后，在主Form里面先声明各个子窗体类，如下："><a href="#3-建立好子窗体后，在主Form里面先声明各个子窗体类，如下：" class="headerlink" title="3. 建立好子窗体后，在主Form里面先声明各个子窗体类，如下："></a>3. 建立好子窗体后，在主Form里面先声明各个子窗体类，如下：</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//定义用户窗口变量</span><br><span class="hljs-keyword">public</span> windows1 w1;<br><span class="hljs-keyword">public</span> windows2 w2;<br><span class="hljs-keyword">public</span> windows3 w3;<br><span class="hljs-keyword">public</span> windows4 w4;<br></code></pre></td></tr></table></figure><h2 id="4-在加载主Form事件时选择实例化各个子窗体类"><a href="#4-在加载主Form事件时选择实例化各个子窗体类" class="headerlink" title="4. 在加载主Form事件时选择实例化各个子窗体类"></a>4. 在加载主Form事件时选择实例化各个子窗体类</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//加载时赋值</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Form1_Load</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-comment">//实例化</span><br>    w1 = <span class="hljs-keyword">new</span> windows1();<br>    w2 = <span class="hljs-keyword">new</span> windows2();    <br>    w3 = <span class="hljs-keyword">new</span> windows3();    <br>    w4 = <span class="hljs-keyword">new</span> windows4();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-为每个要显示子窗体创建一个按钮，目的是点击按钮切换至子窗体"><a href="#5-为每个要显示子窗体创建一个按钮，目的是点击按钮切换至子窗体" class="headerlink" title="5. 为每个要显示子窗体创建一个按钮，目的是点击按钮切换至子窗体"></a>5. 为每个要显示子窗体创建一个按钮，目的是点击按钮切换至子窗体</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs typescript"> <span class="hljs-comment">//output_fun</span><br> <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">output_fun</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)<br> &#123;<br>     textBox1.<span class="hljs-title class_">AppendText</span>(<span class="hljs-title class_">DateTime</span>.<span class="hljs-property">Now</span>.<span class="hljs-title class_">ToString</span>()+ <span class="hljs-string">&quot;:&quot;</span> + str + <span class="hljs-string">&quot;\r\n&quot;</span>);<br> &#125;<br><br><span class="hljs-comment">//显示用户窗口1</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    w1.<span class="hljs-title class_">Show</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Clear</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Add</span>(w1);<br>    <span class="hljs-title function_">output_fun</span>(<span class="hljs-string">&quot;show windows1&quot;</span>);           <br>&#125;<br><br><span class="hljs-comment">//显示用户窗口2</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button2_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    w2.<span class="hljs-title class_">Show</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Clear</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Add</span>(w2);<br>    <span class="hljs-title function_">output_fun</span>(<span class="hljs-string">&quot;show windows2&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//显示用户窗口3</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button3_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    w3.<span class="hljs-title class_">Show</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Clear</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Add</span>(w3);<br>    <span class="hljs-title function_">output_fun</span>(<span class="hljs-string">&quot;show windows3&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//显示用户窗口4</span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">button4_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, <span class="hljs-title class_">EventArgs</span> e</span>)<br>&#123;<br>    w4.<span class="hljs-title class_">Show</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Clear</span>();<br>    groupBox1.<span class="hljs-property">Controls</span>.<span class="hljs-title class_">Add</span>(w4);<br>    <span class="hljs-title function_">output_fun</span>(<span class="hljs-string">&quot;show windows4&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-至此，一个最简单创建子窗体的方法就完成了。"><a href="#6-至此，一个最简单创建子窗体的方法就完成了。" class="headerlink" title="6. 至此，一个最简单创建子窗体的方法就完成了。"></a>6. 至此，一个最简单创建子窗体的方法就完成了。</h2><ul><li>如果有需要把子窗体里面的变量值传到主程序里面<ul><li>用委托</li><li>子窗体内做一个返回值（或者元组）的方法</li><li>建立一个单独的静态类专门用来读写值</li><li>用json或者yaml做变量管理</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于15001200 PLC的webserver---用户自定义页面</title>
    <link href="/2024/07/21/%E5%9F%BA%E4%BA%8E15001200%20PLC%E7%9A%84webserver---%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2/"/>
    <url>/2024/07/21/%E5%9F%BA%E4%BA%8E15001200%20PLC%E7%9A%84webserver---%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-创建html页面"><a href="#1-创建html页面" class="headerlink" title="1. 创建html页面"></a>1. 创建html页面</h2><ul><li>页面需要包含字符集信息：<code>&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code></li><li>包含AWP命令的html文件，大小限制为64KB</li><li>最简单的页面自动刷新:<code>&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;10&quot;&gt;</code></li></ul><h2 id="2-AWP指令"><a href="#2-AWP指令" class="headerlink" title="2. AWP指令"></a>2. AWP指令</h2><ul><li>AWP 命令公式中”<!--"之后的空格和"-->“之前的空格，对于命令的正确编译至关重要。疏漏空格字符可能导致编译器无法生成正确代码。 这种情况下，编译器不会显示错误。</li><li>读取变量：<code>:=&lt;Varname&gt;:</code>：<ul><li>M,Q,I:直接使用<code>&quot;变量符号名&quot;</code></li><li>DB：规则为<code>&quot;DB名&quot;.变量名</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">&quot;test_MB&quot;</span> :=<span class="hljs-string">&quot;test_MB&quot;</span>:<br><span class="hljs-string">&quot;test_MW&quot;</span> :=<span class="hljs-string">&quot;test_MW&quot;</span>:<br><span class="hljs-string">&quot;web_test2_优化&quot;</span>.b :=<span class="hljs-string">&quot;web_test2_优化&quot;</span>.b:<br></code></pre></td></tr></table></figure></li></ul></li><li>读取特殊变量（从PLC读取并传给HTTP响应头）：<code>&lt;!-- AWP_Out_Variable Name=&#39;&lt;Type&gt;:&lt;Name&gt;&#39; [Use=&#39;&lt;Varname&gt;&#39;] --&gt;</code><ul><li>type对应特殊变量的类型</li><li>type1：HEADER</li><li>type2:COOKIE_VALUE</li><li>type3:COOKIE_EXPIRES</li><li>name对应HEADER或COOKIE的名称<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- AWP_Out_Variable Name=&#x27;&quot;此处填写变量名&quot;&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_Out_Variable Name=&#x27;&quot;HEADER:Status&quot;&#x27; Use=&#x27;&quot;Status&quot;&#x27; --&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li>写入变量：<code>&lt;!-- AWP_In_Variable Name=&#39;&lt;Varname1&gt;&#39; [Use=&#39;&lt;Varname2&gt;&#39;] ... --&gt;</code>，方括号 [ ] 中包含的项为可选项。<ul><li>能被写入的变量事先要激活<code>从 HMI/OPC UA/Web API 可访问</code>和<code>从 HMI/OPC UA/Web API 可写</code></li><li>配合POST命令写入，添加表单<code>&lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;/form&gt;</code>，添加文本域<code>&lt;input name=&quot;PLC变量名&quot; type=&quot;text&quot; /&gt; ：</code>，添加按钮<code>&lt;input name=&quot;&quot; type=&quot;submit&quot; value=&quot;&quot; /&gt; ：</code>。</li><li>案例如下，<font color=red>要写入的变量先在最前面声明出来</font>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;test_MB&quot;&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;test_MW&quot;&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;web_test2_优化&quot;.b&#x27; --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://wwww.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>1200_RD_WR<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>数据读取<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&quot;test_MB&quot; :=&quot;test_MB&quot;:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&quot;test_MW&quot; :=&quot;test_MW&quot;:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&quot;web_test2_优化&quot;.b :=&quot;web_test2_优化&quot;.b:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>数据写入<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;test_MB&quot;&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;test_MW&quot;&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;web_test2_优化&quot;.b&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>预览效果：<br><img src="/img/blog_page/3427087-20240429220347253-971217266.png"></li></ul></li></ul><p>更多例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;AWP_test&quot;.byte_var&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;AWP_test&quot;.word_var&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;AWP_test&quot;.bool_var&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;AWP_test&quot;.int_var&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- AWP_Start_Struct Name=&#x27;&quot;AWP_test&quot;.my_struct&#x27; --&gt;</span><br>:=&quot;AWP_test&quot;.my_struct.byte_var:<br>:=&quot;AWP_test&quot;.my_struct.word_var:<br>:=&quot;AWP_test&quot;.my_struct.bool_var:<br><span class="hljs-comment">&lt;!-- AWP_End_Struct --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://wwww.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>1200_RD_WR<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>数据读取<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>show byte :=&quot;AWP_test&quot;.byte_var:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>show word :=&quot;AWP_test&quot;.word_var:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>show bool :=&quot;AWP_test&quot;.bool_var:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>show struct :=&quot;AWP_test&quot;.my_struct.byte_var:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>数据写入<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;AWP_test&quot;.byte_var&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;AWP_test&quot;.word_var&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;AWP_test&quot;.bool_var&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;AWP_test&quot;.int_var&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;AWP_test&quot;.my_struct.byte_var&#x27; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;&quot;AWP_test&quot;.my_struct.byte_var&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;set&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>预览效果<br><img src="/img/blog_page/3427087-20240507092658036-766220815.png"></p><h2 id="3-组态"><a href="#3-组态" class="headerlink" title="3. 组态"></a>3. 组态</h2><ul><li>组态用户自定义，选html文件所在目录，选默认打开的html页面，生成块。<br><img src="/img/blog_page/3427087-20240429214500475-842334.png"></li><li>生成的块属于占用程序资源，成为程序的一部分<br><img src="/img/blog_page/3427087-20240429214654504-2044739003.png"></li><li>通过<code>WWW</code>指令来让标准web页面可以访问web页面（如果想要通过程序控制何时web页面可见，则可以通过用户程序控制<code>www</code>块的调用）<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> call www<br><span class="hljs-regexp">//</span> <span class="hljs-comment">#TmpWWWreturnInt=0，无错误</span><br><span class="hljs-regexp">//</span> <span class="hljs-comment">#TmpWWWreturnInt=16#00yx，相关位的请求处于等待状态</span><br><span class="hljs-regexp">//</span> <span class="hljs-comment">#TmpWWWreturnInt=16#803a，未装载DB</span><br><span class="hljs-regexp">//</span> <span class="hljs-comment">#TmpWWWreturnInt=16#8081，DB类型格式或版本错误</span><br><span class="hljs-regexp">//</span> <span class="hljs-comment">#TmpWWWreturnInt=16#80C1，资源不足以用于初始化web</span><br><span class="hljs-comment">#TmpWWWreturnInt:=WWW(333);</span><br></code></pre></td></tr></table></figure></li><li>只能在 CPU 处于停止模式时下载用户定义的网页程序块（正常下载硬件组态时候PLC就处于停止模式）<br>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</li></ul><h2 id="4-拓展应用"><a href="#4-拓展应用" class="headerlink" title="4. 拓展应用"></a>4. 拓展应用</h2><ul><li><p>用bool量控制图形</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//图片1url: Images.Lamp00.png</span><br><span class="hljs-comment">//图片2url: Images.Lamp01.png</span><br><span class="hljs-comment">//用Bool变量来替换Lamp0x后面的这个x，0的时候就是Lamp00.png，1的时候就是Lamp01.png</span><br><span class="hljs-comment">//这个:=&quot;TestFinished&quot;:就是从PLC回读到一个bool量</span><br>&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&#x27;Images/Lamp0:=&quot;TestFinished&quot;:.png&#x27;</span> /&gt;<br></code></pre></td></tr></table></figure></li><li><p>基于json做html中的变量刷新</p></li></ul><ol><li>建立json文件，注意不是.json的json文件，而是一个json结构的<code>.html</code>文件，实测过，用.json文件写如下结构会报错的。</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">//这是读<span class="hljs-title class_">PLC</span>数据的结构<br>&#123;<br>    <span class="hljs-string">&quot;Device1&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Device1:&quot;</span></span>,<br>    <span class="hljs-string">&quot;Device2&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Device2:&quot;</span></span>,<br>    <span class="hljs-string">&quot;Device3&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Device3:&quot;</span></span>,<br>    <span class="hljs-string">&quot;Temperature&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Temperature:&quot;</span></span>,<br>    <span class="hljs-string">&quot;Humidity&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Humidity:&quot;</span></span>,<br>    <span class="hljs-string">&quot;Pressure&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Pressure:&quot;</span></span>,<br>    <span class="hljs-string">&quot;Tag1&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;:=&quot;</span>Bootstrap_DB<span class="hljs-string">&quot;.Tag1:&quot;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>需要从html输入到plc的文件，另外再建立一个.<code>html</code>文件，作为写入给PLC的数据</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;Bootstrap_DB&quot;.Device1&#x27; --&gt;</span>:=&quot;Bootstrap_DB&quot;.Device1:<br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;Bootstrap_DB&quot;.Device2&#x27; --&gt;</span>:=&quot;Bootstrap_DB&quot;.Device2:<br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;Bootstrap_DB&quot;.Device3&#x27; --&gt;</span>:=&quot;Bootstrap_DB&quot;.Device3:<br><span class="hljs-comment">&lt;!-- AWP_In_Variable Name=&#x27;&quot;Bootstrap_DB&quot;.Tag1&#x27; --&gt;</span>:=&quot;Bootstrap_DB&quot;.Tag1:<br></code></pre></td></tr></table></figure><ol start="3"><li><code>jquery实现数据读出和写入是通过对应id寻找到要显示或者要输入的变量</code></li></ol><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery">//开始之前，还有一点需要在html文件中做一下修改，就是要给每一个在页面中需要显示或者输入的元素给定一个唯一<span class="hljs-built_in">的id</span>值，因为Js脚本是通<span class="hljs-built_in">过id</span>值找到页面中的元素的，例如第一行的温度，就需要在html文件中温度的元素处给定一<span class="hljs-built_in">个id</span>值，这里给定<span class="hljs-built_in">的id</span>值是Temperature，每一个元素<span class="hljs-built_in">的id</span>值必须唯一<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="language-xml">    温度 </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;badge badge-light&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Temperature&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 通过之前定义的id值访问到网页中温度的元素，之后用data替换元素中的text，这段代码就这个意思</span><br>$.getJSON(<span class="hljs-string">&quot;IO_Output.html&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>$(<span class="hljs-string">&#x27;#Temperature&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Temperature);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="4"><li>在head中引入外部java script调用脚本的语句</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;src/js/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>js做一个1000ms刷新的时钟，<code>$</code>表示这是jquery方法，<code>setInterval()方法用来做延时</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$.<span class="hljs-title function_">ajaxSetup</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">//放入代码</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="6"><li>把功能代码放到时钟里面去，这里的<code>#</code>表示对应的html元素的id，js就是通过这种方式对应元素</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(document).ready(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>$.ajaxSetup(&#123;<br><span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span><br>&#125;);<br>setInterval(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>$.getJSON(<span class="hljs-string">&quot;IO_Output.html&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>$(<span class="hljs-string">&#x27;#Temperature&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Temperature);<br>$(<span class="hljs-string">&#x27;#Humidity&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Humidity);<br>$(<span class="hljs-string">&#x27;#Pressure&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Pressure);<br>$(<span class="hljs-string">&#x27;#Temperature_t&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Temperature);<br>$(<span class="hljs-string">&#x27;#Humidity_t&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Humidity);<br>$(<span class="hljs-string">&#x27;#Pressure_t&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Pressure);<br>$(<span class="hljs-string">&#x27;#tag1&#x27;</span>).<span class="hljs-built_in">text</span>(data<br>.Tag1);<br>&#125;);<br>&#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="7"><li>控制PLC的某一个bool量，这里的”IO_Input.html”是上面建立的输入给PLC的数据结构.html文件。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//首先还是需要在按钮的元素中给定一个唯一的id值，这个id值device1ON，id值一定要有意义，不然元素太多根本记不清哪个id对应的什么东西 </span><br>&lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;btn btn btn-success&quot;</span> id=<span class="hljs-string">&quot;device1ON&quot;</span>&gt;<span class="hljs-variable constant_">ON</span>&lt;/button&gt;<br><span class="hljs-comment">//之后需要在脚本中等待鼠标的点击动作，当这个元素上有click的事件发生，就执行POST的动作，把val的值赋给PLC的变量，这里是Bootstrap_DB&quot;.Device1</span><br>$(<span class="hljs-string">&quot;#device1ON&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>url = <span class="hljs-string">&quot;IO_Input.html&quot;</span>;<br>name = <span class="hljs-string">&#x27;&quot;Bootstrap_DB&quot;.Device1&#x27;</span>;<br>val = <span class="hljs-number">1</span>;<br>sdata = <span class="hljs-built_in">escape</span>(name) + <span class="hljs-string">&#x27;=&#x27;</span> + val;<br>$.<span class="hljs-title function_">post</span>(url, sdata, <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;&#125;);<br>&#125;);<br><span class="hljs-comment">//页面中的所有按钮都可以这样处理，下面这段脚本就实现了PLC中一个布尔量的开和关</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">ajaxSetup</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-string">&quot;#device1ON&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">url = <span class="hljs-string">&quot;IO_Input.html&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">name = <span class="hljs-string">&#x27;&quot;Bootstrap_DB&quot;.Device1&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">val = <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">sdata = <span class="hljs-built_in">escape</span>(name) + <span class="hljs-string">&#x27;=&#x27;</span> + val;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">post</span>(url, sdata, <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#device1OFF&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">url = <span class="hljs-string">&quot;IO_Input.html&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">name = <span class="hljs-string">&#x27;&quot;Bootstrap_DB&quot;.Device1&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">val = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">sdata = <span class="hljs-built_in">escape</span>(name) + <span class="hljs-string">&#x27;=&#x27;</span> + val;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">post</span>(url, sdata, <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;); </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="9"><li>数值写入PLC</li></ol><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">//这个和按下按钮控制变量的实现机制是一样的，只不过需要有个输入框，输入框也需要有一个唯一的id值</span><br><span class="hljs-operator">&lt;</span>input <span class="hljs-keyword">class</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-keyword">type</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;text&quot;</span> placeholder<span class="hljs-operator">=</span><span class="hljs-string">&quot;输入任意值&quot;</span> <span class="hljs-built_in">id</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;setValue&quot;</span><span class="hljs-operator">&gt;</span><br>和按钮触发的代码唯一不同的是，<span class="hljs-keyword">val</span>变量处不能给定<span class="hljs-number">1</span>或者<span class="hljs-number">0</span>，而是要从输入框元素中获取，当然还是靠<span class="hljs-built_in">id</span>值找到输入框<br><span class="hljs-operator">$</span>(<span class="hljs-string">&quot;#setWrite&quot;</span>).click(<span class="hljs-keyword">function</span> () &#123;<br>url <span class="hljs-operator">=</span> <span class="hljs-string">&quot;IO_Input.html&quot;</span>;<br>name <span class="hljs-operator">=</span> &#x27;<span class="hljs-string">&quot;Bootstrap_DB&quot;</span>.Tag1&#x27;;<br><span class="hljs-keyword">val</span> <span class="hljs-operator">=</span> <span class="hljs-operator">$</span>(<span class="hljs-symbol">&#x27;input</span>[<span class="hljs-built_in">id</span><span class="hljs-operator">=</span>setValue]&#x27;).<span class="hljs-keyword">val</span>();<br>sdata <span class="hljs-operator">=</span> escape(name) <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;=&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">val</span>;<br><span class="hljs-operator">$</span>.post(url, sdata, <span class="hljs-keyword">function</span> (result) &#123;&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="10"><li>图形显示</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//再来说一种，有些时候希望一个Bool变量不是单纯的在网页端显示1或者0，而是能用图形来进行显示，这个也是可以实现的，当然首先还是你要给img元素一个唯一的id值</span><br>&lt;<span class="hljs-selector-tag">img</span> id=<span class="hljs-string">&quot;Lamp3&quot;</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&#x27;image/Lamp00.png&#x27;</span> alt=<span class="hljs-string">&quot;&quot;</span>&gt;<br><span class="hljs-comment">//那怎么替换图片呢，自然是通过改变src属性的值就可以，可以通过在脚本里面判断一个与图片相关的变量的值，当这个值变化是，对应的图片的src属性也跟着变化，这段代码就是判断按钮按下后，灯泡变量</span><br><span class="hljs-keyword">if</span> (data<span class="hljs-selector-class">.Device3</span> == true) &#123;<br>$(<span class="hljs-string">&quot;#Lamp3&quot;</span>)<span class="hljs-selector-class">.attr</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&#x27;image/Lamp01.png&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.ad.siemens.com.cn/productportal/Prods/S7-1200_PLC_EASY_PLUS/11-Comm/06-Web_Server/07-User_Define/01-Intro.html">参考官网1200 网页发布</a></p>]]></content>
    
    
    <categories>
      
      <category>Front-end application</category>
      
      <category>web server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>webserver</tag>
      
      <tag>1500 1200 PLC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python读写json文件</title>
    <link href="/2024/07/21/python%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6/"/>
    <url>/2024/07/21/python%E8%AF%BB%E5%86%99json%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-新建json文件"><a href="#1-新建json文件" class="headerlink" title="1. 新建json文件"></a>1. 新建json文件</h2><ul><li>打开记事本，重命名为<code>.json</code>后缀<br>使用的样例如下，注意看json文件格式：<br><img src="/img/blog_page/3427087-20240509101815408-1374252070.png"></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>    &quot;server&quot;:&#123;<br>        &quot;host&quot;: <span class="hljs-string">&quot;example.com&quot;</span>,<br>        <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">443</span>,<br>        <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;https&quot;</span><br>    &#125;,<br>    &quot;authentication&quot;:&#123;<br>        &quot;username&quot;:<span class="hljs-string">&quot;your_name&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;your_psw&quot;</span><br>    &#125;,<br>    &quot;timeout&quot;:<span class="hljs-number">30</span>,<br>    <span class="hljs-string">&quot;headers&quot;</span>:&#123;<br>        &quot;<span class="hljs-attribute">content</span>-type&quot;:<span class="hljs-string">&quot;application/json&quot;</span>,<br>        <span class="hljs-string">&quot;user-agent&quot;</span>:<span class="hljs-string">&quot;your user agent&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-用python打开json文件"><a href="#2-用python打开json文件" class="headerlink" title="2. 用python打开json文件"></a>2. 用python打开json文件</h2><ul><li>json模块为python自带，不需要安装</li><li><code>load</code>可以把json文件加载出来</li><li><code>dict</code>可以把json格式变为字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># fill path</span><br>file_path = <span class="hljs-string">r&#x27;json_test\my_json_file.json&#x27;</span><br><br><span class="hljs-comment"># open json file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-comment"># load json data</span><br>    data = json.load(file)<br><br><span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-comment"># convert json to dictionary</span><br>data_dic = <span class="hljs-built_in">dict</span>(data)<br><span class="hljs-built_in">print</span>(data_dic)<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-使用json数据"><a href="#3-使用json数据" class="headerlink" title="3. 使用json数据"></a>3. 使用json数据</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># use json data</span><br>my_host = data[<span class="hljs-string">&#x27;server&#x27;</span>][<span class="hljs-string">&#x27;host&#x27;</span>]<br>my_auth = data[<span class="hljs-string">&#x27;authentication&#x27;</span>][<span class="hljs-string">&#x27;username&#x27;</span>]<br><span class="hljs-built_in">print</span>(my_host)<br><span class="hljs-built_in">print</span>(my_auth)<br></code></pre></td></tr></table></figure><h2 id="4-改变json数据内容"><a href="#4-改变json数据内容" class="headerlink" title="4. 改变json数据内容"></a>4. 改变json数据内容</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># update the values in json data<br>data[<span class="hljs-string">&#x27;server&#x27;</span>][<span class="hljs-string">&#x27;host&#x27;</span>] = <span class="hljs-string">&#x27;new_host&#x27;</span><br>data[<span class="hljs-string">&#x27;authentication&#x27;</span>][<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;new_username&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="5-把文件变回json格式"><a href="#5-把文件变回json格式" class="headerlink" title="5. 把文件变回json格式"></a>5. 把文件变回json格式</h2><ul><li>用<code>dumps</code><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># convert the <span class="hljs-keyword">update</span> <span class="hljs-keyword">values</span> back <span class="hljs-keyword">to</span> <span class="hljs-type">json</span> <span class="hljs-keyword">format</span><br>update_json = <span class="hljs-type">json</span>.dumps(data)<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-把更新后的json文件写入为新的json文件"><a href="#6-把更新后的json文件写入为新的json文件" class="headerlink" title="6. 把更新后的json文件写入为新的json文件"></a>6. 把更新后的json文件写入为新的json文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># update file store path</span><br>output_new_json_file_path = <span class="hljs-string">r&#x27;json_test\my_update_json_file.json&#x27;</span><br><br><span class="hljs-comment"># write into</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_new_json_file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(update_json)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;json file update successfully!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="7-整体代码"><a href="#7-整体代码" class="headerlink" title="7. 整体代码"></a>7. 整体代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># fill path</span><br>file_path = <span class="hljs-string">r&#x27;json_test\my_json_file.json&#x27;</span><br><br><span class="hljs-comment"># open json file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-comment"># load json data</span><br>    data = json.load(file)<br><br><span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-comment"># convert json to dictionary</span><br>data_dic = <span class="hljs-built_in">dict</span>(data)<br><span class="hljs-built_in">print</span>(data_dic)<br><br><span class="hljs-comment"># use json data</span><br>my_host = data[<span class="hljs-string">&#x27;server&#x27;</span>][<span class="hljs-string">&#x27;host&#x27;</span>]<br>my_auth = data[<span class="hljs-string">&#x27;authentication&#x27;</span>][<span class="hljs-string">&#x27;username&#x27;</span>]<br><span class="hljs-built_in">print</span>(my_host)<br><span class="hljs-built_in">print</span>(my_auth)<br><br><span class="hljs-comment"># update the values in json data</span><br>data[<span class="hljs-string">&#x27;server&#x27;</span>][<span class="hljs-string">&#x27;host&#x27;</span>] = <span class="hljs-string">&#x27;new_host&#x27;</span><br>data[<span class="hljs-string">&#x27;authentication&#x27;</span>][<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;new_username&#x27;</span><br><br><span class="hljs-comment"># convert the update values back to json format</span><br>update_json = json.dumps(data)<br><br><span class="hljs-comment"># update file store path</span><br>output_new_json_file_path = <span class="hljs-string">r&#x27;json_test\my_update_json_file.json&#x27;</span><br><br><span class="hljs-comment"># write into</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_new_json_file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(update_json)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;json file update successfully!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="9-新建的json文件一览"><a href="#9-新建的json文件一览" class="headerlink" title="9. 新建的json文件一览"></a>9. 新建的json文件一览</h2><p><img src="/img/blog_page/3427087-20240509102439061-1944431821.png"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>s7netplus二次应用</title>
    <link href="/2024/07/21/s7netplus%E4%BA%8C%E6%AC%A1%E5%BA%94%E7%94%A8/"/>
    <url>/2024/07/21/s7netplus%E4%BA%8C%E6%AC%A1%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul><li>这是个基于S7协议的开源协议<br><img src="/img/blog_page/3427087-20240508210604145-255463155.png"><br><img src="/img/blog_page/3427087-20240508210629552-1735950695.png"></li></ul><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">using</span> S7.Net;<br></code></pre></td></tr></table></figure><h2 id="3-创建PLC对象"><a href="#3-创建PLC对象" class="headerlink" title="3. 创建PLC对象"></a>3. 创建PLC对象</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">s7net_lib</span><br>&#123;<br>    <span class="hljs-comment">//idenfy basic link params</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> plc_ip;<br>    <span class="hljs-keyword">private</span> CpuType plc_type;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">short</span> plc_rack, plc_slot;<br>    <span class="hljs-keyword">public</span> Plc my_plc;<br><br>    <span class="hljs-comment">//constructor，含参构造函数 </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">s7net_lib</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> type, <span class="hljs-built_in">string</span> ip, <span class="hljs-built_in">short</span> rack, <span class="hljs-built_in">short</span> slot</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">switch</span> (type)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                plc_type = CpuType.S7200;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                plc_type = CpuType.S7300;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                plc_type = CpuType.S7400;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                plc_type = CpuType.S71200;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                plc_type = CpuType.S71500;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-literal">default</span>:<br>                <span class="hljs-keyword">break</span>;<br><br>        &#125;<br>        plc_ip = ip;<br>        plc_rack = rack;<br>        plc_slot = slot;<br>        my_plc = <span class="hljs-keyword">new</span> Plc(plc_type, plc_ip, plc_rack, plc_slot);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-连接"><a href="#4-连接" class="headerlink" title="4. 连接"></a>4. 连接</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//connect</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">connect_plc</span>()</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        my_plc.Open();<br>    &#125;<br>    <span class="hljs-keyword">catch</span><br>    &#123;<br>        MessageBox.Show(<span class="hljs-string">&quot;plc can&#x27;t be connected,check params!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (my_plc.IsConnected)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-断开连接"><a href="#5-断开连接" class="headerlink" title="5. 断开连接"></a>5. 断开连接</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//disconnected</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">disconnect_plc</span>()</span><br>&#123;<br>    my_plc.Close();<br>    <span class="hljs-keyword">if</span> (my_plc.IsConnected)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-PLC数据类型和寻址类型"><a href="#6-PLC数据类型和寻址类型" class="headerlink" title="6. PLC数据类型和寻址类型"></a>6. PLC数据类型和寻址类型</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//Analysis S7 data type</span><br>  <span class="hljs-keyword">private</span> VarType S7_datatype(string type)<br>  &#123;<br>      switch (type)<br>      &#123;<br>          case <span class="hljs-string">&quot;bool&quot;</span>: <span class="hljs-keyword">return</span> VarType.Bit;<br><br>          case <span class="hljs-string">&quot;byte&quot;</span>: <span class="hljs-keyword">return</span> VarType.<span class="hljs-built_in">Byte</span>;<br><br>          case <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-keyword">return</span> VarType.Word;<br><br>          case <span class="hljs-string">&quot;dword&quot;</span>: <span class="hljs-keyword">return</span> VarType.DWord;<br><br>          case <span class="hljs-string">&quot;int&quot;</span>: <span class="hljs-keyword">return</span> VarType.<span class="hljs-built_in">Int</span>;<br><br>          case <span class="hljs-string">&quot;dint&quot;</span>: <span class="hljs-keyword">return</span> VarType.DInt;<br><br>          case <span class="hljs-string">&quot;real&quot;</span>: <span class="hljs-keyword">return</span> VarType.Real;<br><br>          case <span class="hljs-string">&quot;lreal&quot;</span>: <span class="hljs-keyword">return</span> VarType.LReal;<br><br>          case <span class="hljs-string">&quot;string&quot;</span>: <span class="hljs-keyword">return</span> VarType.String;<br><br>          case <span class="hljs-string">&quot;s7string&quot;</span>: <span class="hljs-keyword">return</span> VarType.S7String;<br><br>          case <span class="hljs-string">&quot;s7wstring&quot;</span>: <span class="hljs-keyword">return</span> VarType.S7WString;<br><br>          case <span class="hljs-string">&quot;datetime&quot;</span>: <span class="hljs-keyword">return</span> VarType.DateTime;<br><br>          case <span class="hljs-string">&quot;timer&quot;</span>: <span class="hljs-keyword">return</span> VarType.Timer;<br><br>          case <span class="hljs-string">&quot;datetimelong&quot;</span>: <span class="hljs-keyword">return</span> VarType.DateTimeLong;<br>          default:<br>              <span class="hljs-keyword">return</span> VarType.<span class="hljs-built_in">Byte</span>;<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//Analysis S7 register type</span><br>  <span class="hljs-keyword">private</span> DataType S7_registertype(int db_area)<br>  &#123;<br>      switch (db_area)<br>      &#123;<br>          case <span class="hljs-number">129</span>: <span class="hljs-keyword">return</span> DataType.Input;<br><br>          case <span class="hljs-number">130</span>: <span class="hljs-keyword">return</span> DataType.Output;<br><br>          case <span class="hljs-number">131</span>: <span class="hljs-keyword">return</span> DataType.Memory;<br><br>          case <span class="hljs-number">132</span>: <span class="hljs-keyword">return</span> DataType.DataBlock;<br><br>          case <span class="hljs-number">29</span>: <span class="hljs-keyword">return</span> DataType.Timer;<br><br>          case <span class="hljs-number">28</span>: <span class="hljs-keyword">return</span> DataType.Counter;<br>          default:<br>              <span class="hljs-keyword">return</span> DataType.DataBlock;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="7-读写数据"><a href="#7-读写数据" class="headerlink" title="7. 读写数据"></a>7. 读写数据</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//data <span class="hljs-keyword">write</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">read</span><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">object</span>? write_read_value(string <span class="hljs-keyword">type</span>, <span class="hljs-type">int</span> db_area, <span class="hljs-type">int</span> iDB_num, <span class="hljs-type">int</span> iDB_start_byteadd, string w_or_r, <span class="hljs-keyword">object</span> <span class="hljs-keyword">values</span>, <span class="hljs-type">int</span> bit_address = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (w_or_r == &quot;w&quot;)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> == &quot;bool&quot;)<br>        &#123;<br>            my_plc.WriteBit(S7_registertype(db_area), iDB_num, iDB_start_byteadd, bit_address, (<span class="hljs-type">bool</span>)<span class="hljs-keyword">values</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            my_plc.<span class="hljs-keyword">Write</span>(S7_registertype(db_area), iDB_num, iDB_start_byteadd, <span class="hljs-keyword">values</span>);<br>        &#125;<br><br>    <span class="hljs-keyword">return</span> my_plc.<span class="hljs-keyword">Read</span>(S7_registertype(db_area), iDB_num, iDB_start_byteadd, S7_datatype(<span class="hljs-keyword">type</span>), count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Int数据读写"><a href="#8-Int数据读写" class="headerlink" title="8. Int数据读写"></a>8. Int数据读写</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//int data write and read</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> <span class="hljs-title">int_rw_value</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> db_area, <span class="hljs-built_in">int</span> iDB_num, <span class="hljs-built_in">int</span> iDB_start_byteadd, <span class="hljs-built_in">string</span> w_or_r, <span class="hljs-built_in">short</span> values = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    <span class="hljs-built_in">short</span> feedbackword = (<span class="hljs-built_in">short</span>)write_read_value(<span class="hljs-string">&quot;int&quot;</span>, db_area, iDB_num, iDB_start_byteadd, w_or_r, values);<br>    <span class="hljs-keyword">return</span> feedbackword;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-byte数据读写"><a href="#9-byte数据读写" class="headerlink" title="9. byte数据读写"></a>9. byte数据读写</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//byte data write and read</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">byte</span> <span class="hljs-title">byte_rw_value</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> db_area, <span class="hljs-built_in">int</span> iDB_num, <span class="hljs-built_in">int</span> iDB_start_byteadd, <span class="hljs-built_in">string</span> w_or_r, <span class="hljs-built_in">byte</span> values = <span class="hljs-number">0</span></span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">byte</span>)write_read_value(<span class="hljs-string">&quot;byte&quot;</span>, db_area, iDB_num, iDB_start_byteadd, w_or_r, values);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-字符串读写"><a href="#10-字符串读写" class="headerlink" title="10. 字符串读写"></a>10. 字符串读写</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//string data </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">string_rw_value</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> db_area, <span class="hljs-built_in">int</span> iDB_num, <span class="hljs-built_in">int</span> iDB_start_byteadd, <span class="hljs-built_in">string</span> w_or_r, <span class="hljs-built_in">string</span> values = <span class="hljs-string">&quot;&quot;</span></span>)</span><br>&#123;<br>    <span class="hljs-built_in">byte</span> maxcount= <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>();<br>    <span class="hljs-built_in">string</span> string_value;<br>    <span class="hljs-keyword">if</span> (w_or_r == <span class="hljs-string">&quot;r&quot;</span>) &#123; maxcount = byte_rw_value(db_area, iDB_num, iDB_start_byteadd + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;r&quot;</span>); &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (w_or_r == <span class="hljs-string">&quot;w&quot;</span>) &#123; maxcount = (<span class="hljs-built_in">byte</span>)values.Length; byte_rw_value(db_area, iDB_num, iDB_start_byteadd + <span class="hljs-number">1</span>, <span class="hljs-string">&quot;w&quot;</span>, maxcount); &#125;<br>    string_value = (<span class="hljs-built_in">string</span>)write_read_value(<span class="hljs-string">&quot;string&quot;</span>, db_area, iDB_num, iDB_start_byteadd + <span class="hljs-number">2</span>, w_or_r, values, <span class="hljs-number">0</span>,maxcount);<br>    <span class="hljs-keyword">return</span> string_value;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-字符读写"><a href="#11-字符读写" class="headerlink" title="11. 字符读写"></a>11. 字符读写</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//char data</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span> <span class="hljs-title">char_rw_value</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> db_area, <span class="hljs-built_in">int</span> iDB_num, <span class="hljs-built_in">int</span> iDB_start_byteadd, <span class="hljs-built_in">string</span> w_or_r, <span class="hljs-built_in">char</span> values = <span class="hljs-string">&#x27; &#x27;</span></span>)</span><br>&#123; <br><span class="hljs-built_in">char</span> char_value = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>();<br>    <span class="hljs-keyword">if</span> (w_or_r == <span class="hljs-string">&quot;r&quot;</span>)<br>        char_value = (<span class="hljs-built_in">char</span>)byte_rw_value(db_area, iDB_num, iDB_start_byteadd, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(w_or_r == <span class="hljs-string">&quot;w&quot;</span>)<br>        char_value = (<span class="hljs-built_in">char</span>)byte_rw_value(db_area, iDB_num, iDB_start_byteadd, <span class="hljs-string">&quot;w&quot;</span>,(<span class="hljs-built_in">byte</span>)values);<br>    <span class="hljs-keyword">return</span> char_value;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>C# and PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>PLC</tag>
      
      <tag>s7netplus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片保存到本地并替换markdown中的url地址</title>
    <link href="/2024/07/21/snap7%E8%AF%BB%E5%86%99PLC%E5%8F%98%E9%87%8F/"/>
    <url>/2024/07/21/snap7%E8%AF%BB%E5%86%99PLC%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-读DB"><a href="#1-读DB" class="headerlink" title="1. 读DB"></a>1. 读DB</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">#copy snap7.dll &amp; snap7.lib files to python root path first</span><br><span class="hljs-string">pip install snap7</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> snap7<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">from</span> snap7 <span class="hljs-keyword">import</span> util<br> <br> <br><span class="hljs-comment"># 创建通讯客户端实例</span><br>plc = snap7.client.Client()<br> <br><span class="hljs-comment"># 连接至PLC</span><br>plc.connect(<span class="hljs-string">&#x27;192.168.0.1&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br> <br><span class="hljs-comment"># 读取数据</span><br>data = plc.db_read(<span class="hljs-number">17</span>,<span class="hljs-number">0</span>,<span class="hljs-number">878</span>)<br> <br><span class="hljs-comment"># 关闭连接</span><br>plc.disconnect()<br><br>d1=data[<span class="hljs-number">0</span>:<span class="hljs-number">256</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(d1))<br><br>d2=data[<span class="hljs-number">256</span>:<span class="hljs-number">768</span>]<br><span class="hljs-built_in">print</span>(d2.decode(<span class="hljs-string">&#x27;utf-16be&#x27;</span>))<br><br>selfint=<span class="hljs-built_in">int</span>.from_bytes(data[<span class="hljs-number">852</span>:<span class="hljs-number">854</span>],byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-built_in">print</span>(selfint)<br><br><span class="hljs-comment"># python解析</span><br>selfInt = <span class="hljs-built_in">int</span>.from_bytes(data[<span class="hljs-number">852</span>:<span class="hljs-number">854</span>], byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>selfReal = struct.unpack(<span class="hljs-string">&#x27;&gt;f&#x27;</span>, data[<span class="hljs-number">874</span>:<span class="hljs-number">878</span>])[<span class="hljs-number">0</span>]<br>selfString = data[<span class="hljs-number">0</span>:<span class="hljs-number">254</span>].decode(encoding=<span class="hljs-string">&quot;ascii&quot;</span>)<br>selfWString = data[<span class="hljs-number">256</span>:].decode(encoding=<span class="hljs-string">&quot;utf-16be&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;python自身函数解析：&quot;</span>)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">f&quot;bool:<span class="hljs-subst">&#123;selfBool&#125;</span>; int:<span class="hljs-subst">&#123;selfInt&#125;</span>; real:<span class="hljs-subst">&#123;selfReal&#125;</span>; string:<span class="hljs-subst">&#123;selfString&#125;</span>; wstring:<span class="hljs-subst">&#123;selfWString&#125;</span>&quot;</span><br>)<br> <br><span class="hljs-comment"># snap7解析</span><br>snap7Int = util.get_int(data, <span class="hljs-number">852</span>)<br>snap7Real = util.get_real(data, <span class="hljs-number">874</span>)<br>snap7String = util.get_string(data,<span class="hljs-number">0</span>, <span class="hljs-number">254</span>)<br>snap7WString = util.get_string(data,<span class="hljs-number">256</span>,<span class="hljs-number">766</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;snap7函数解析：&quot;</span>)<br><span class="hljs-built_in">print</span>(<br>    <span class="hljs-string">f&quot;bool:<span class="hljs-subst">&#123;snap7Bool&#125;</span>; int:<span class="hljs-subst">&#123;selfInt&#125;</span>; real:<span class="hljs-subst">&#123;snap7Real&#125;</span>; string:<span class="hljs-subst">&#123;snap7String&#125;</span>; wstring:<span class="hljs-subst">&#123;snap7WString&#125;</span>&quot;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="2-写DB"><a href="#2-写DB" class="headerlink" title="2. 写DB"></a>2. 写DB</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#copy snap7.dll &amp; snap7.lib files to python root path first</span><br>pip <span class="hljs-keyword">install </span>snap7<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>import snap7<br>from snap7 import util<br> <br><span class="hljs-comment"># 创建通讯客户端实例</span><br>plc = snap7.client.Client()<br> <br><span class="hljs-comment"># 连接至PLC</span><br>plc.connect(<span class="hljs-string">&#x27;192.168.0.1&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br> <br>print(<span class="hljs-string">&quot;开始发送！&quot;</span>)<br> <br><span class="hljs-comment"># 写入bool</span><br><span class="hljs-keyword">bool1 </span>= <span class="hljs-number">0</span>    <span class="hljs-comment">##bool1--》第0个字节段的第1个位，就是偏移量为0.0的bool量的值</span><br><span class="hljs-keyword">bool2 </span>= <span class="hljs-number">1</span><br><span class="hljs-keyword">bool3 </span>= <span class="hljs-number">0</span><br><span class="hljs-keyword">bool4 </span>= <span class="hljs-number">1</span><br><span class="hljs-keyword">bool5 </span>= <span class="hljs-number">1</span><br><span class="hljs-keyword">bool6 </span>= <span class="hljs-number">0</span><br><span class="hljs-keyword">bool7 </span>= <span class="hljs-number">0</span><br><span class="hljs-keyword">bool8 </span>= <span class="hljs-number">0</span><br> <br><span class="hljs-keyword">boolData </span>= <span class="hljs-keyword">bytearray(1)</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">bool(bool1))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">bool(bool2))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-keyword">bool(bool3))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-keyword">bool(bool4))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-keyword">bool(bool5))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-keyword">bool(bool6))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-keyword">bool(bool7))</span><br><span class="hljs-keyword"></span>util.set_bool(<span class="hljs-keyword">boolData, </span><span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-keyword">bool(bool8))</span><br><span class="hljs-keyword"></span>plc.db_write(<span class="hljs-number">211</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">boolData)</span><br><span class="hljs-keyword"></span> <br><span class="hljs-comment"># 写入int</span><br>intData = <span class="hljs-keyword">bytearray(2)</span><br><span class="hljs-keyword"></span>util.set_int(intData, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br>plc.db_write(<span class="hljs-number">211</span>, <span class="hljs-number">2</span>, intData)<br> <br><span class="hljs-comment"># 写入real</span><br>realData = <span class="hljs-keyword">bytearray(4)</span><br><span class="hljs-keyword"></span>util.set_real(realData, <span class="hljs-number">0</span>, <span class="hljs-number">99</span>.<span class="hljs-number">9</span>)<br>plc.db_write(<span class="hljs-number">211</span>, <span class="hljs-number">4</span>, realData)<br> <br><span class="hljs-comment"># 写入string</span><br><span class="hljs-comment"># sss = &#x27;qqq&#x27;</span><br><span class="hljs-comment"># print(len(sss))</span><br><span class="hljs-comment"># stringData = bytearray(len(sss) + 2)</span><br><span class="hljs-comment"># util.set_string(stringData, 0, sss, 256)</span><br><span class="hljs-comment"># stringData[0] = 254</span><br><span class="hljs-comment"># plc.db_write(211, 8, stringData)</span><br>string = <span class="hljs-string">&#x27;db211&#x27;</span><br>data = int.to_bytes(<span class="hljs-number">254</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;big&#x27;</span>) + int.to_bytes(len(string), <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;big&#x27;</span>) + string.encode(encoding=<span class="hljs-string">&#x27;ascii&#x27;</span>)<br><span class="hljs-comment">#utf-8可以写中文，但是解码错误</span><br><span class="hljs-comment">#unicode不能写</span><br><span class="hljs-comment">#strBYTE长度只有254，剩下两个长度是头文件</span><br>plc.write_area(snap7.client.Areas.DB, <span class="hljs-number">211</span>, <span class="hljs-number">8</span>, data)<br> <br>plc.<span class="hljs-keyword">disconnect()</span><br><span class="hljs-keyword"></span> <br>print(<span class="hljs-string">&quot;发送成功！&quot;</span>)<br><br><span class="hljs-comment">#PLC中，wstring---unicode格式/string----ascii格式</span><br><br></code></pre></td></tr></table></figure><h2 id="3-写中文"><a href="#3-写中文" class="headerlink" title="3. 写中文"></a>3. 写中文</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs axapta">import snap7<br>import struct<br> <br><span class="hljs-meta"># 创建通讯客户端实例</span><br>plc = snap7.<span class="hljs-keyword">client</span>.Client()<br> <br><span class="hljs-meta"># 连接至PLC</span><br>plc.connect(<span class="hljs-string">&#x27;192.168.0.1&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br> <br> <br><span class="hljs-meta"># 写入DB17.DBX878.0 —— bool值</span><br>plc.write_area(snap7.<span class="hljs-keyword">client</span>.Areas.DB,<span class="hljs-number">17</span>,<span class="hljs-number">878</span>,bool.to_bytes(True,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;big&#x27;</span>))<br> <br><span class="hljs-meta"># 写入DB17.DBW852</span><br>plc.write_area(snap7.<span class="hljs-keyword">client</span>.Areas.DB,<span class="hljs-number">17</span>,<span class="hljs-number">852</span>,<span class="hljs-built_in">int</span>.to_bytes(<span class="hljs-number">2001</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;big&#x27;</span>))<br><span class="hljs-meta"># plc.write_area(snap7.client.Areas.DB, 10, 2, struct.pack(&quot;&gt;h&quot;, 112))</span><br> <br><span class="hljs-meta"># 写入DB17.DBD874 —— real值</span><br>plc.write_area(snap7.<span class="hljs-keyword">client</span>.Areas.DB,<span class="hljs-number">17</span>,<span class="hljs-number">874</span>, struct.pack(<span class="hljs-string">&quot;&gt;f&quot;</span>, <span class="hljs-number">10.1</span>))<br> <br><span class="hljs-meta"># 写入P#DB17.DBX0.0 BYTE 256 —— string值</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello python&#x27;</span><br><span class="hljs-meta">#字符串第一个字节存的是最大字节数，第二个字节存的是当前占有的字节数，后面才是使用的字节数</span><br>data = <span class="hljs-built_in">int</span>.to_bytes(<span class="hljs-number">254</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;big&#x27;</span>) + <span class="hljs-built_in">int</span>.to_bytes(len(<span class="hljs-built_in">str</span>), <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;big&#x27;</span>) + <span class="hljs-built_in">str</span>.encode(encoding=<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>plc.write_area(snap7.<span class="hljs-keyword">client</span>.Areas.DB,<span class="hljs-number">17</span>,<span class="hljs-number">0</span>,data)<br> <br><span class="hljs-meta"># 写入P#DB17.DBX256.0 BYTE 512 —— wstring值</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;不吃火锅 就吃烤匠&#x27;</span><br>data = <span class="hljs-built_in">int</span>.to_bytes(<span class="hljs-number">508</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;big&#x27;</span>) + <span class="hljs-built_in">int</span>.to_bytes(len(<span class="hljs-built_in">str</span>), <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;big&#x27;</span>) + <span class="hljs-built_in">str</span>.encode(encoding=<span class="hljs-string">&#x27;utf-16be&#x27;</span>)<br>plc.write_area(snap7.<span class="hljs-keyword">client</span>.Areas.DB,<span class="hljs-number">17</span>,<span class="hljs-number">256</span>,data)<br> <br><span class="hljs-meta"># 关闭连接</span><br>plcObj.disconnect()<br><br><span class="hljs-meta">#Big，大小端模式中的大端模式</span><br><span class="hljs-meta">#python中不存在字符类型，字符也当作字符串处理</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>snap7</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PLC</tag>
      
      <tag>py</tag>
      
      <tag>snap7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openness的应用</title>
    <link href="/2024/07/21/openness%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2024/07/21/openness%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-添加用户组用户"><a href="#1-添加用户组用户" class="headerlink" title="1. 添加用户组用户"></a>1. 添加用户组用户</h2><p><img src="/img/blog_page/3427087-20240509123847505-278492051.png"></p><h2 id="2-导入openness-dll文件"><a href="#2-导入openness-dll文件" class="headerlink" title="2. 导入openness.dll文件"></a>2. 导入openness.dll文件</h2><ul><li>.dll文件位置<code>C:\Program Files\Siemens\Automation\Portal V19\PublicAPI\V19</code></li></ul><p><img src="/img/blog_page/3427087-20240509124051211-812738469.png"></p><ul><li>添加项目引用</li></ul><p><img src="/img/blog_page/3427087-20240509124257871-438410639.png"></p><ul><li>引用的命名空间<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">using</span> Siemens.Engineering;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-TIA-Portal-Openness的对象模型"><a href="#2-TIA-Portal-Openness的对象模型" class="headerlink" title="2. TIA Portal Openness的对象模型"></a>2. TIA Portal Openness的对象模型</h2><p><img src="/img/blog_page/3427087-20240509130430121-328489979.png"></p><ul><li>可以通过索引号像数组一样对列表中的对象进行寻址</li><li>可以使用Find类函数，比如<code>Screen screen = screens.Find(&quot;myScreen&quot;)</code></li><li>直接使用符号名称找到对象</li></ul><h2 id="3-找到SofterwareContainer"><a href="#3-找到SofterwareContainer" class="headerlink" title="3. 找到SofterwareContainer"></a>3. 找到SofterwareContainer</h2><ul><li>和FB,FC,OB,Variant等等相关的API接口<br><img src="/img/blog_page/3427087-20240509131323863-2132516550.png"></li></ul><p><img src="/img/blog_page/3427087-20240509131425942-1278963753.png"></p><h2 id="4-打开博图"><a href="#4-打开博图" class="headerlink" title="4. 打开博图"></a>4. 打开博图</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//INIT</span><br>  TiaPortal my_Ti;<br>  Project my_proj = <span class="hljs-literal">null</span>;<br>  List&lt;Device&gt; my_devicelist = <span class="hljs-keyword">new</span> List&lt;Device&gt;();<br><br><br>  <span class="hljs-comment">//RUN TIAPORTAL</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">runTiaportal</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> tiaMode</span>)</span><br>  &#123;<br>      <span class="hljs-keyword">if</span> (tiaMode)<br>      &#123;<br>          my_Ti = <span class="hljs-keyword">new</span> TiaPortal(TiaPortalMode.WithUserInterface);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>          my_Ti = <span class="hljs-keyword">new</span> TiaPortal(TiaPortalMode.WithoutUserInterface);<br>      &#125;<br>      <span class="hljs-keyword">return</span> my_Ti.GetCurrentProcess().Id;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="5-关闭博图"><a href="#5-关闭博图" class="headerlink" title="5. 关闭博图"></a>5. 关闭博图</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//STOP TIAPORTAL</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">stopTiaportal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Process</span>[] my_process = <span class="hljs-built_in">Process</span>.<span class="hljs-built_in">GetProcesses</span>();<br>    foreach (<span class="hljs-built_in">Process</span> item in my_process)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (item.Id == my_Ti.<span class="hljs-built_in">GetCurrentProcess</span>().Id)<br>        &#123;<br>            item.<span class="hljs-built_in">Kill</span>();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-新建项目"><a href="#6-新建项目" class="headerlink" title="6. 新建项目"></a>6. 新建项目</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//NEW PROJECT</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">newProject</span><span class="hljs-params">(string my_projectname)</span><br>&#123;<br>    <span class="hljs-type">ProjectComposition</span> <span class="hljs-variable">proCom</span> <span class="hljs-operator">=</span> my_Ti.Projects;<br>    <span class="hljs-type">FolderBrowserDialog</span> <span class="hljs-variable">my_browserDialog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FolderBrowserDialog</span>();<br>    <span class="hljs-type">string</span> <span class="hljs-variable">my_path</span> <span class="hljs-operator">=</span> string.Empty;<br>    <span class="hljs-keyword">if</span> (my_browserDialog.ShowDialog() == DialogResult.OK)<br>    &#123;<br>        my_path = my_browserDialog.SelectedPath;<br>        <span class="hljs-type">DirectoryInfo</span> <span class="hljs-variable">my_targetDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectoryInfo</span>(my_path);<br>        my_proj = proCom.Create(my_targetDir, my_projectname);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-运行项目"><a href="#7-运行项目" class="headerlink" title="7. 运行项目"></a>7. 运行项目</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//RUN PROJECT</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runProject</span>()</span><br>&#123;<br>    ProjectComposition proCom = my_Ti.Projects;<br>    OpenFileDialog my_opendialog = <span class="hljs-keyword">new</span> OpenFileDialog();<br>    my_opendialog.Multiselect = <span class="hljs-literal">false</span>;<br>    my_opendialog.Title = <span class="hljs-string">&quot;choic Tia Project&quot;</span>;<br>    my_opendialog.Filter = <span class="hljs-string">&quot;All files(*.*)|*.*&quot;</span>;<br>    my_opendialog.InitialDirectory = <span class="hljs-string">@&quot;D:\&quot;</span>;<br>    <span class="hljs-keyword">if</span> (my_opendialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)<br>    &#123;<br>        <span class="hljs-built_in">string</span> my_projectfile = my_opendialog.FileName;<br>        FileInfo my_path = <span class="hljs-keyword">new</span> FileInfo(my_projectfile);<br>        my_proj = proCom.Open(my_path);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-设备和网络视图"><a href="#8-设备和网络视图" class="headerlink" title="8. 设备和网络视图"></a>8. 设备和网络视图</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//DEVICES &amp; NETWORKS</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">openHWView</span><span class="hljs-params">(<span class="hljs-type">int</span> choic_params)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (choic_params)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            my_proj.<span class="hljs-built_in">ShowHwEditor</span>(Siemens.Engineering.HW.View.Network);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            my_proj.<span class="hljs-built_in">ShowHwEditor</span>(Siemens.Engineering.HW.View.Topology);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            my_proj.<span class="hljs-built_in">ShowHwEditor</span>(Siemens.Engineering.HW.View.Device);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-创建设备"><a href="#9-创建设备" class="headerlink" title="9. 创建设备"></a>9. 创建设备</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//CREATE DEVICE</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">createDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> deviceitemtypeid, <span class="hljs-built_in">string</span> deviceitemname, <span class="hljs-built_in">string</span> devicename</span>)<br>&#123;<br>    <span class="hljs-title class_">DeviceComposition</span> my_devicecompos = my_proj.<span class="hljs-property">Devices</span>;<br>    <span class="hljs-title class_">Device</span> my_device = my_devicecompos.<span class="hljs-title class_">CreateWithItem</span>(deviceitemtypeid, deviceitemname, devicename);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">createDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> devicetypeid, <span class="hljs-built_in">string</span> devicename</span>)<br>&#123;<br>    <span class="hljs-comment">//example--&gt;my_devicetypeid:&quot;System:Device.S7300&quot;</span><br>    <span class="hljs-comment">//example--&gt;my_devicename:&quot;S7300Device&quot;</span><br>    <span class="hljs-title class_">DeviceComposition</span> my_devicecompos = my_proj.<span class="hljs-property">Devices</span>;<br>    <span class="hljs-title class_">Device</span> my_device = my_devicecompos.<span class="hljs-title class_">Create</span>(devicetypeid, devicename);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-枚举设备"><a href="#10-枚举设备" class="headerlink" title="10. 枚举设备"></a>10. 枚举设备</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//ENUM ROOT DEVICE</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Device&gt; <span class="hljs-title">enumDevice</span>()</span><br>&#123;<br>    DeviceComposition my_devicecompos = my_proj.Devices;<br>    <span class="hljs-keyword">foreach</span> (Device dev <span class="hljs-keyword">in</span> my_devicecompos)<br>    &#123;<br>        my_devicelist.Add(dev);<br>    &#125;<br>    <span class="hljs-keyword">return</span> my_devicelist;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-删除设备"><a href="#11-删除设备" class="headerlink" title="11. 删除设备"></a>11. 删除设备</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//DELETE DEVICE</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deleteDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> deletedevicename</span>)<br>&#123;<br>    <span class="hljs-title class_">Device</span> my_deleteDevice = my_proj.<span class="hljs-property">UngroupedDevicesGroup</span>.<span class="hljs-property">Devices</span>.<span class="hljs-title class_">Find</span>(deletedevicename);<br>    my_deleteDevice.<span class="hljs-title class_">Delete</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-找到设备"><a href="#12-找到设备" class="headerlink" title="12. 找到设备"></a>12. 找到设备</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//FIND DEVICES</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Device</span> <span class="hljs-title function_">findDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> devicename</span>)<br>&#123;<br>    <span class="hljs-comment">//devicename:&quot;S7-1500/ET200MP station_1&quot;</span><br>    <span class="hljs-title class_">Device</span> my_device = my_proj.<span class="hljs-property">Devices</span>.<span class="hljs-title class_">Find</span>(<span class="hljs-string">&quot;devicename&quot;</span>);<br>    <span class="hljs-keyword">return</span> my_device;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-插入新设备"><a href="#13-插入新设备" class="headerlink" title="13. 插入新设备"></a>13. 插入新设备</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//PLUG NEW DEVICE</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">plugNewdevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> typeidentifier, <span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> positionnumber</span>)</span><br>&#123;<br>    HardwareObject my_hwobject = my_proj.Devices[<span class="hljs-number">0</span>].DeviceItems[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (my_hwobject.CanPlugNew(typeidentifier, name, positionnumber))<br>    &#123;<br>        DeviceItem my_plugnewdeviceitem = my_hwobject.PlugNew(typeidentifier, name, positionnumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-关闭和保存项目"><a href="#14-关闭和保存项目" class="headerlink" title="14. 关闭和保存项目"></a>14. 关闭和保存项目</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//SAVE PROJECT</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveProject</span>()</span><br>&#123;<br>    my_proj.Save();<br>&#125;<br><br><span class="hljs-comment">//CLOSE PROJECT</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeProject</span>()</span><br>&#123;<br>    my_proj.Close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-上载项目"><a href="#15-上载项目" class="headerlink" title="15. 上载项目"></a>15. 上载项目</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//DEVICE UPLOAD</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">UploadPLCprogram</span><span class="hljs-params">()</span><br>        &#123;<br>            <span class="hljs-type">StationUploadProvider</span> <span class="hljs-variable">my_canbeuploadproj</span> <span class="hljs-operator">=</span> my_proj.GetService&lt;StationUploadProvider&gt;();<br>            <span class="hljs-type">StationUploadProvider</span> <span class="hljs-variable">my_upload_proj</span> <span class="hljs-operator">=</span> my_canbeuploadproj;<br>            <span class="hljs-type">ConnectionConfiguration</span> <span class="hljs-variable">my_conf</span> <span class="hljs-operator">=</span> my_upload_proj.Configuration;<br>            <span class="hljs-type">ConfigurationMode</span> <span class="hljs-variable">my_confmode</span> <span class="hljs-operator">=</span> my_conf.Modes.Find(<span class="hljs-string">&quot;PN/IE&quot;</span>);<br>            <span class="hljs-type">ConfigurationPcInterface</span> <span class="hljs-variable">my_pcinterface</span> <span class="hljs-operator">=</span> my_confmode.PcInterfaces.Find(<span class="hljs-string">&quot;Intel(R) I210 Gigabit Network Connection &lt;2&gt;&quot;</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-type">ConfigurationAddress</span> <span class="hljs-variable">my_uploadaddress</span> <span class="hljs-operator">=</span> my_pcinterface.Addresses.Create(<span class="hljs-string">&quot;192.168.0.1&quot;</span>);<br>            <span class="hljs-type">Device</span> <span class="hljs-variable">my_uploadedobj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">UploadConfigurationDelegate</span> <span class="hljs-variable">my_uploaddelegate</span> <span class="hljs-operator">=</span> PreConfigureUpload;<br>            <span class="hljs-type">UploadResult</span> <span class="hljs-variable">my_uploadresult</span> <span class="hljs-operator">=</span> my_upload_proj.StationUpload(my_uploadaddress, PreConfigureUpload);<br>            my_uploadedobj = my_uploadresult.UploadedStation;<br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">PreConfigureUpload</span><span class="hljs-params">(UploadConfiguration my_uploadconf)</span><br>            &#123;<br>                <span class="hljs-type">ModuleReadAccessPassword</span> <span class="hljs-variable">my_module_readpsw</span> <span class="hljs-operator">=</span> my_uploadconf as ModuleReadAccessPassword;<br>                <span class="hljs-keyword">if</span> (my_module_readpsw != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Console.WriteLine(<span class="hljs-string">&quot;psw error!&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-type">ModuleWriteAccessPassword</span> <span class="hljs-variable">my_module_writepsw</span> <span class="hljs-operator">=</span> my_uploadconf as ModuleWriteAccessPassword;<br>                <span class="hljs-keyword">if</span> (my_module_writepsw != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Console.WriteLine(<span class="hljs-string">&quot;psw error!&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotSupportedException</span>();<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="16-代码整理如下"><a href="#16-代码整理如下" class="headerlink" title="16. 代码整理如下"></a>16. 代码整理如下</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Siemens.Engineering;<br><span class="hljs-keyword">using</span> Siemens.Engineering.Connection;<br><span class="hljs-keyword">using</span> Siemens.Engineering.HW;<br><span class="hljs-keyword">using</span> Siemens.Engineering.Upload;<br><span class="hljs-keyword">using</span> Siemens.Engineering.Upload.Configurations;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Data.SqlTypes;<br><span class="hljs-keyword">using</span> System.Diagnostics;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Security.Permissions;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">openness_tt</span><br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">openess_func</span><br>    &#123;<br>        <span class="hljs-comment">//INIT</span><br>        TiaPortal my_Ti;<br>        Project my_proj = <span class="hljs-literal">null</span>;<br>        List&lt;Device&gt; my_devicelist = <span class="hljs-keyword">new</span> List&lt;Device&gt;();<br><br><br>        <span class="hljs-comment">//RUN TIAPORTAL</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">runTiaportal</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> tiaMode</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (tiaMode)<br>            &#123;<br>                my_Ti = <span class="hljs-keyword">new</span> TiaPortal(TiaPortalMode.WithUserInterface);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                my_Ti = <span class="hljs-keyword">new</span> TiaPortal(TiaPortalMode.WithoutUserInterface);<br>            &#125;<br>            <span class="hljs-keyword">return</span> my_Ti.GetCurrentProcess().Id;<br>        &#125;<br><br>        <span class="hljs-comment">//STOP TIAPORTAL</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stopTiaportal</span>()</span><br>        &#123;<br>            Process[] my_process = Process.GetProcesses();<br>            <span class="hljs-keyword">foreach</span> (Process item <span class="hljs-keyword">in</span> my_process)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (item.Id == my_Ti.GetCurrentProcess().Id)<br>                &#123;<br>                    item.Kill();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//NEW PROJECT</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">newProject</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> my_projectname</span>)</span><br>        &#123;<br>            ProjectComposition proCom = my_Ti.Projects;<br>            FolderBrowserDialog my_browserDialog = <span class="hljs-keyword">new</span> FolderBrowserDialog();<br>            <span class="hljs-built_in">string</span> my_path = <span class="hljs-built_in">string</span>.Empty;<br>            <span class="hljs-keyword">if</span> (my_browserDialog.ShowDialog() == DialogResult.OK)<br>            &#123;<br>                my_path = my_browserDialog.SelectedPath;<br>                DirectoryInfo my_targetDir = <span class="hljs-keyword">new</span> DirectoryInfo(my_path);<br>                my_proj = proCom.Create(my_targetDir, my_projectname);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//RUN PROJECT</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runProject</span>()</span><br>        &#123;<br>            ProjectComposition proCom = my_Ti.Projects;<br>            OpenFileDialog my_opendialog = <span class="hljs-keyword">new</span> OpenFileDialog();<br>            my_opendialog.Multiselect = <span class="hljs-literal">false</span>;<br>            my_opendialog.Title = <span class="hljs-string">&quot;choic Tia Project&quot;</span>;<br>            my_opendialog.Filter = <span class="hljs-string">&quot;All files(*.*)|*.*&quot;</span>;<br>            my_opendialog.InitialDirectory = <span class="hljs-string">@&quot;D:\&quot;</span>;<br>            <span class="hljs-keyword">if</span> (my_opendialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)<br>            &#123;<br>                <span class="hljs-built_in">string</span> my_projectfile = my_opendialog.FileName;<br>                FileInfo my_path = <span class="hljs-keyword">new</span> FileInfo(my_projectfile);<br>                my_proj = proCom.Open(my_path);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//DEVICES &amp; NETWORKS</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openHWView</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> choic_params</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">switch</span> (choic_params)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    my_proj.ShowHwEditor(Siemens.Engineering.HW.View.Network);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    my_proj.ShowHwEditor(Siemens.Engineering.HW.View.Topology);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    my_proj.ShowHwEditor(Siemens.Engineering.HW.View.Device);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-literal">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//CREATE DEVICE</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> deviceitemtypeid, <span class="hljs-built_in">string</span> deviceitemname, <span class="hljs-built_in">string</span> devicename</span>)</span><br>        &#123;<br>            DeviceComposition my_devicecompos = my_proj.Devices;<br>            Device my_device = my_devicecompos.CreateWithItem(deviceitemtypeid, deviceitemname, devicename);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> devicetypeid, <span class="hljs-built_in">string</span> devicename</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//example--&gt;my_devicetypeid:&quot;System:Device.S7300&quot;</span><br>            <span class="hljs-comment">//example--&gt;my_devicename:&quot;S7300Device&quot;</span><br>            DeviceComposition my_devicecompos = my_proj.Devices;<br>            Device my_device = my_devicecompos.Create(devicetypeid, devicename);<br>        &#125;<br><br>        <span class="hljs-comment">//ENUM ROOT DEVICE</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Device&gt; <span class="hljs-title">enumDevice</span>()</span><br>        &#123;<br>            DeviceComposition my_devicecompos = my_proj.Devices;<br>            <span class="hljs-keyword">foreach</span> (Device dev <span class="hljs-keyword">in</span> my_devicecompos)<br>            &#123;<br>                my_devicelist.Add(dev);<br>            &#125;<br>            <span class="hljs-keyword">return</span> my_devicelist;<br>        &#125;<br><br>        <span class="hljs-comment">//DELETE DEVICE</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> deletedevicename</span>)</span><br>        &#123;<br>            Device my_deleteDevice = my_proj.UngroupedDevicesGroup.Devices.Find(deletedevicename);<br>            my_deleteDevice.Delete();<br>        &#125;<br><br>        <span class="hljs-comment">//FIND DEVICES</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Device <span class="hljs-title">findDevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> devicename</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//devicename:&quot;S7-1500/ET200MP station_1&quot;</span><br>            Device my_device = my_proj.Devices.Find(<span class="hljs-string">&quot;devicename&quot;</span>);<br>            <span class="hljs-keyword">return</span> my_device;<br>        &#125;<br><br><br>        <span class="hljs-comment">//PLUG NEW DEVICE</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">plugNewdevice</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> typeidentifier, <span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> positionnumber</span>)</span><br>        &#123;<br>            HardwareObject my_hwobject = my_proj.Devices[<span class="hljs-number">0</span>].DeviceItems[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (my_hwobject.CanPlugNew(typeidentifier, name, positionnumber))<br>            &#123;<br>                DeviceItem my_plugnewdeviceitem = my_hwobject.PlugNew(typeidentifier, name, positionnumber);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//SAVE PROJECT</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveProject</span>()</span><br>        &#123;<br>            my_proj.Save();<br>        &#125;<br><br>        <span class="hljs-comment">//CLOSE PROJECT</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeProject</span>()</span><br>        &#123;<br>            my_proj.Close();<br>        &#125;<br><br>        <span class="hljs-comment">//DEVICE UPLOAD</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UploadPLCprogram</span>()</span><br>        &#123;<br>            StationUploadProvider my_canbeuploadproj = my_proj.GetService&lt;StationUploadProvider&gt;();<br>            StationUploadProvider my_upload_proj = my_canbeuploadproj;<br>            ConnectionConfiguration my_conf = my_upload_proj.Configuration;<br>            ConfigurationMode my_confmode = my_conf.Modes.Find(<span class="hljs-string">&quot;PN/IE&quot;</span>);<br>            ConfigurationPcInterface my_pcinterface = my_confmode.PcInterfaces.Find(<span class="hljs-string">&quot;Intel(R) I210 Gigabit Network Connection &lt;2&gt;&quot;</span>, <span class="hljs-number">1</span>);<br>            ConfigurationAddress my_uploadaddress = my_pcinterface.Addresses.Create(<span class="hljs-string">&quot;192.168.0.1&quot;</span>);<br>            Device my_uploadedobj = <span class="hljs-literal">null</span>;<br>            UploadConfigurationDelegate my_uploaddelegate = PreConfigureUpload;<br>            UploadResult my_uploadresult = my_upload_proj.StationUpload(my_uploadaddress, PreConfigureUpload);<br>            my_uploadedobj = my_uploadresult.UploadedStation;<br>            <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreConfigureUpload</span>(<span class="hljs-params">UploadConfiguration my_uploadconf</span>)</span><br>            &#123;<br>                ModuleReadAccessPassword my_module_readpsw = my_uploadconf <span class="hljs-keyword">as</span> ModuleReadAccessPassword;<br>                <span class="hljs-keyword">if</span> (my_module_readpsw != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Console.WriteLine(<span class="hljs-string">&quot;psw error!&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                ModuleWriteAccessPassword my_module_writepsw = my_uploadconf <span class="hljs-keyword">as</span> ModuleWriteAccessPassword;<br>                <span class="hljs-keyword">if</span> (my_module_writepsw != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Console.WriteLine(<span class="hljs-string">&quot;psw error!&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotSupportedException();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="17-Openness参考资料及对象模型工具资料"><a href="#17-Openness参考资料及对象模型工具资料" class="headerlink" title="17. Openness参考资料及对象模型工具资料"></a>17. Openness参考资料及对象模型工具资料</h2><p><a href="https://support.industry.siemens.com/cs/document/108716692/" title="openness demo">openness Demo参考</a><br><a href="https://support.industry.siemens.com/cs/document/109760816/" title="openness explorer">openness 对象模型工具下载</a><br><a href="https://support.industry.siemens.com/cs/document/109815199/" title="openness docunment">openness 文档下载</a></p>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>C# and PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>PLC</tag>
      
      <tag>上位机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PLC程序实现矩形波，三角波，正弦波</title>
    <link href="/2024/07/21/PLC%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E7%9F%A9%E5%BD%A2%E6%B3%A2%EF%BC%8C%E4%B8%89%E8%A7%92%E6%B3%A2%EF%BC%8C%E6%AD%A3%E5%BC%A6%E6%B3%A2/"/>
    <url>/2024/07/21/PLC%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E7%9F%A9%E5%BD%A2%E6%B3%A2%EF%BC%8C%E4%B8%89%E8%A7%92%E6%B3%A2%EF%BC%8C%E6%AD%A3%E5%BC%A6%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<p>这套程序本来是在Smart200上玩出来的，后来在PLC1200&#x2F;PLC1500的环境下重写了PLC程序。换句话说，这要遵守程序里的算法公式，不管什么PLC都能做出这几种波形</p><h2 id="1-采样时间"><a href="#1-采样时间" class="headerlink" title="1. 采样时间"></a>1. 采样时间</h2><ul><li>想要生成连续的波形图，本质就是在采样时间点上采集当前输出值，当采样点足够多的时候，在时间线上就形成了随时间变化的波形图了<ul><li>程序中基于定时器自己做了一个上半周期50ms，下半周期50ms，占空比50%的脉冲发生器（本身是个方波）</li><li>程序输出两个bool量，一个50ms_up，一个50ms_down。<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//create the 100ms pulse<br>IF NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_up</span> AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_down</span> THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_up</span> := TRUE;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_down</span> := FALSE;<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time1</span>);<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time2</span>);<br>END_IF;<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time1</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">Pls_50ms_up</span>,</span><br><span class="hljs-params">          <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">t</span>#50<span class="hljs-variable">MS</span>)</span>;<br><br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time1</span>.Q THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_up</span> := FALSE;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_down</span> := TRUE;<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time1</span>);<br>END_IF;<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time2</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">Pls_50ms_down</span>,</span><br><span class="hljs-params">           <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">T</span>#50<span class="hljs-variable">MS</span>)</span>;<br><br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time2</span>.Q THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_up</span> := TRUE;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_down</span> := FALSE;<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">Ton_time2</span>);<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">Out_50ms_up</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_up</span>;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">Out_50ms_Down</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">Pls_50ms_down</span>;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-计算需要的一些前期参数"><a href="#2-计算需要的一些前期参数" class="headerlink" title="2. 计算需要的一些前期参数"></a>2. 计算需要的一些前期参数</h2><ul><li>单周期内采样次数：外部设定的周期&#x2F;循环时间（如果放入中断执行，那就是中断时间）；<code>#period_max := #In_sign_period / #OBcycle;</code></li><li>1&#x2F;2周期采样次数：<code>#period_half := #period_max / 2;</code></li><li>1&#x2F;4周期采样次数：<code>#period_quater := #period_half / 2;</code></li><li>自己设定的循环时间（固定值或者中断执行时间）<code>Constant Int OBCycle = 100</code></li><li>圆周率<code>Constant Real PAI = 3.1415926</code><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">OBcycle<span class="hljs-built_in">Int</span><span class="hljs-number">100</span><br>PAI<span class="hljs-built_in">Real</span><span class="hljs-number">3.14159</span><br><br>#period_max := #In_sign_period / #OBcycle;<br>#period_half := #period_max / <span class="hljs-number">2</span>;<br>#period_quater := #period_half / <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-矩形波"><a href="#3-矩形波" class="headerlink" title="3. 矩形波"></a>3. 矩形波</h2><ul><li>In_Amplitude为生成波形需要的振幅<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean">IF #<span class="hljs-string">&quot;50ms_up&quot;</span> AND NOT #pluse_bool[<span class="hljs-number">0</span>] THEN<br>    <br>    <span class="hljs-comment">//生成矩形波</span><br>    IF #rectangle_int &lt; #period_max THEN<br>        #rectangle_int := #rectangle_int + <span class="hljs-number">1</span>;<br>    ELSE<br>        #rectangle_int := <span class="hljs-number">0</span>;<br>    END_IF;<br>    IF #rectangle_int &lt; #period_half THEN<br>        #rectangle_wave := #In_Amplitude * <span class="hljs-number">1</span>;<br>    ELSE<br>        #rectangle_wave := #In_Amplitude * (<span class="hljs-number">-1</span>);<br>    END_IF;<br><br>END_IF;<br>#pluse_bool[<span class="hljs-number">0</span>] := #<span class="hljs-string">&quot;50ms_up&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-三角波"><a href="#4-三角波" class="headerlink" title="4. 三角波"></a>4. 三角波</h2><ul><li>计算公式，<code>VAL_TRI:=AMP*CURRNET_INT/QUATER</code><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs clean">IF #<span class="hljs-string">&quot;50ms_up&quot;</span> AND NOT #pluse_bool[<span class="hljs-number">0</span>] THEN<br>    <br>    <span class="hljs-comment">//生成三角波</span><br>    <span class="hljs-comment">//VAL_TRI:=AMP*CURRNET_INT/QUATER</span><br>    IF #triangular_int &lt;= (-#period_quater) THEN<br>        #triangular_bool := FALSE;<br>     ELSIF #triangular_int &gt;= #period_quater THEN<br>         #triangular_bool := TRUE;<br>     END_IF;<br>     IF #triangular_bool THEN<br>         #triangular_int := #triangular_int - <span class="hljs-number">1</span>;<br>     ELSE<br>         #triangular_int := #triangular_int + <span class="hljs-number">1</span>;<br>     END_IF;<br>     #triangular_wave := (#In_Amplitude * #triangular_int) / #period_quater;<br><br>END_IF;<br>#pluse_bool[<span class="hljs-number">0</span>] := #<span class="hljs-string">&quot;50ms_up&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-正弦波"><a href="#5-正弦波" class="headerlink" title="5. 正弦波"></a>5. 正弦波</h2><ul><li>计算公式：<code>VAL_SINUS:=AMP*SIN(2*3.1415926*NSIN/MAX)</code><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean">IF #<span class="hljs-string">&quot;50ms_up&quot;</span> AND NOT #pluse_bool[<span class="hljs-number">0</span>] THEN<br>    <br>     <span class="hljs-comment">//生成正弦波</span><br>     <span class="hljs-comment">//VAL_SINUS:=AMP*SIN(2*3.1415926*NSIN/MAX)</span><br>     IF #sine_int &lt;= #period_max THEN<br>         #sine_int := #sine_int + <span class="hljs-number">1</span>;<br>     ELSE<br>         #sine_int := <span class="hljs-number">0</span>;<br>     END_IF;<br>     #sine_wave :=#In_Amplitude *SIN_REAL((<span class="hljs-number">2</span> * #sine_int * #PAI) / #period_max);<br><br>END_IF;<br>#pluse_bool[<span class="hljs-number">0</span>] := #<span class="hljs-string">&quot;50ms_up&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-整体代码如下"><a href="#6-整体代码如下" class="headerlink" title="6. 整体代码如下"></a>6. 整体代码如下</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs clean">#period_max := #In_sign_period / #OBcycle;<br>#period_half := #period_max / <span class="hljs-number">2</span>;<br>#period_quater := #period_half / <span class="hljs-number">2</span>;#Pulser_100ms_Instance(Out_50ms_up=&gt;#<span class="hljs-string">&quot;50ms_up&quot;</span>,<br>                       Out_50ms_Down=&gt;#<span class="hljs-string">&quot;50ms_down&quot;</span>);<br><br><span class="hljs-comment">//实现的波形为矩形波，三角波，正弦波</span><br><span class="hljs-comment">//必要条件：最大整幅值，输出信号的周期</span><br><span class="hljs-comment">//思路：把每个周期划分为多个点，比如100个点，使用循环计数值，计算各个点的函数值</span><br><br><span class="hljs-comment">//求出周期循环计数器值</span><br><br><br>IF #<span class="hljs-string">&quot;50ms_up&quot;</span> AND NOT #pluse_bool[<span class="hljs-number">0</span>] THEN<br>    <br>    <span class="hljs-comment">//生成矩形波</span><br>    IF #rectangle_int &lt; #period_max THEN<br>        #rectangle_int := #rectangle_int + <span class="hljs-number">1</span>;<br>    ELSE<br>        #rectangle_int := <span class="hljs-number">0</span>;<br>    END_IF;<br>    IF #rectangle_int &lt; #period_half THEN<br>        #rectangle_wave := #In_Amplitude * <span class="hljs-number">1</span>;<br>    ELSE<br>        #rectangle_wave := #In_Amplitude * (<span class="hljs-number">-1</span>);<br>    END_IF;<br>    <br>    <span class="hljs-comment">//生成三角波</span><br>    <span class="hljs-comment">//VAL_TRI:=AMP*CURRNET_INT/QUATER</span><br>    IF #triangular_int &lt;= (-#period_quater) THEN<br>        #triangular_bool := FALSE;<br>     ELSIF #triangular_int &gt;= #period_quater THEN<br>         #triangular_bool := TRUE;<br>     END_IF;<br>     IF #triangular_bool THEN<br>         #triangular_int := #triangular_int - <span class="hljs-number">1</span>;<br>     ELSE<br>         #triangular_int := #triangular_int + <span class="hljs-number">1</span>;<br>     END_IF;<br>     #triangular_wave := (#In_Amplitude * #triangular_int) / #period_quater;<br>     <br>     <span class="hljs-comment">//生成正弦波</span><br>     <span class="hljs-comment">//VAL_SINUS:=AMP*SIN(2*3.1415926*NSIN/MAX)</span><br>     IF #sine_int &lt;= #period_max THEN<br>         #sine_int := #sine_int + <span class="hljs-number">1</span>;<br>     ELSE<br>         #sine_int := <span class="hljs-number">0</span>;<br>     END_IF;<br>     #sine_wave :=#In_Amplitude *SIN_REAL((<span class="hljs-number">2</span> * #sine_int * #PAI) / #period_max);<br>    <br>END_IF;<br>#pluse_bool[<span class="hljs-number">0</span>] := #<span class="hljs-string">&quot;50ms_up&quot;</span>;<br><br><span class="hljs-comment">//output</span><br>#Out_rectangle_wave := #rectangle_wave;<br>#Out_triangular_wave := #triangular_wave;<br>#Out_sine_wave := #sine_wave;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机数生成器，支持Udint和Char两个格式</title>
    <link href="/2024/07/21/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%8C%E6%94%AF%E6%8C%81Udint%E5%92%8CChar%E4%B8%A4%E4%B8%AA%E6%A0%BC%E5%BC%8F/"/>
    <url>/2024/07/21/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%8C%E6%94%AF%E6%8C%81Udint%E5%92%8CChar%E4%B8%A4%E4%B8%AA%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>读取本地时间的纳秒时间，计算取余数得到随机数</p><h2 id="1-变量声明，定义"><a href="#1-变量声明，定义" class="headerlink" title="1. 变量声明，定义"></a>1. 变量声明，定义</h2><p><img src="/img/blog_page/3427087-20240513131728401-1634290437.png"></p><h2 id="2-模式选择，支持UDINT和CHAR"><a href="#2-模式选择，支持UDINT和CHAR" class="headerlink" title="2. 模式选择，支持UDINT和CHAR"></a>2. 模式选择，支持UDINT和CHAR</h2><ul><li>CHAR仓库定义了72个字符，由自定的字符串长度决定的</li><li>char没有从0开始；PLC字符串长度为（2+n）;第一个byte保存的是最大长度，第二个是当前长度,后面才是用户指定的长度，如string[78]总占用长度80个bytes。<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//mode transfer</span><br><span class="hljs-keyword">IF</span> <span class="hljs-literal">NOT</span> #udintORchar THEN<br>    #min := #In_min;<br>    #max := #In_max;<br><span class="hljs-keyword">ELSE</span><br>    #min := <span class="hljs-number">1</span>;<br>    #max := <span class="hljs-number">72</span>;<br>END_IF;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-UDINT随机数生成"><a href="#3-UDINT随机数生成" class="headerlink" title="3. UDINT随机数生成"></a>3. UDINT随机数生成</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//udint random</span><br>IF #min &gt;= <span class="hljs-number">0</span> AND #max &gt; #min THEN<br>    #return_int := RD_LOC_T(#myDtl);<br>    #random_static := (#myDtl.NANOSECOND * <span class="hljs-number">7</span> + #myDtl.SECOND) MOD #max;<br>    IF #random_static &lt; #min THEN<br>        #random_static := #min;<br>    END_IF;<br>    #Out_udint_random := #random_static;<br>    #Out_status := #ERROR_CODE1;<br>ELSIF #min &lt; <span class="hljs-number">0</span> THEN<br>    #Out_status := #ERROR_CODE2;<br>ELSIF #min &gt;= #max THEN<br>    #Out_status := #ERROR_CODE3;<br>END_IF;<br></code></pre></td></tr></table></figure><h2 id="4-基于UDINT的结果，寻址到字符仓库中的对应字符"><a href="#4-基于UDINT的结果，寻址到字符仓库中的对应字符" class="headerlink" title="4. 基于UDINT的结果，寻址到字符仓库中的对应字符"></a>4. 基于UDINT的结果，寻址到字符仓库中的对应字符</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//char random</span><br>#CharRepertoire :=<br><span class="hljs-string">&#x27;qwertyuiopasdfghjklzxcvbnm1234567890QWERTYUIOPASDFGHJKLZXCVBNM-=[];_&gt;/&lt;!&#x27;</span>;<br>#Out_char_random := #CharRepertoire[#random_static];<br></code></pre></td></tr></table></figure><h2 id="5-整体代码如下"><a href="#5-整体代码如下" class="headerlink" title="5. 整体代码如下"></a>5. 整体代码如下</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//mode transfer</span><br><span class="hljs-keyword">IF</span> <span class="hljs-literal">NOT</span> #udintORchar THEN<br>    #min := #In_min;<br>    #max := #In_max;<br><span class="hljs-keyword">ELSE</span><br>    #min := <span class="hljs-number">1</span>;<br>    #max := <span class="hljs-number">72</span>;<br>END_IF;<br><br><span class="hljs-comment">//udint random</span><br><span class="hljs-keyword">IF</span> #min &gt;= <span class="hljs-number">0</span> <span class="hljs-literal">AND</span> #max &gt; #min THEN<br>    #return_int := RD_LOC_T(#myDtl);<br>    #random_static := (#myDtl.NANOSECOND * <span class="hljs-number">7</span> + #myDtl.SECOND) MOD #max;<br>    <span class="hljs-keyword">IF</span> #random_static &lt; #min THEN<br>        #random_static := #min;<br>    END_IF;<br>    #Out_udint_random := #random_static;<br>    #Out_status := #ERROR_CODE1;<br>ELSIF #min &lt; <span class="hljs-number">0</span> THEN<br>    #Out_status := #ERROR_CODE2;<br>ELSIF #min &gt;= #max THEN<br>    #Out_status := #ERROR_CODE3;<br>END_IF;<br><br><span class="hljs-comment">//char random</span><br>#CharRepertoire :=<br><span class="hljs-string">&#x27;qwertyuiopasdfghjklzxcvbnm1234567890QWERTYUIOPASDFGHJKLZXCVBNM-=[];_&gt;/&lt;!&#x27;</span>;<br>#Out_char_random := #CharRepertoire<span class="hljs-meta">[</span>#random_static<span class="hljs-meta">]</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在PLC的扫描特性下，FOR循环里面套IF或者定时器会发生什么？</title>
    <link href="/2024/07/21/%E5%9C%A8PLC%E7%9A%84%E6%89%AB%E6%8F%8F%E7%89%B9%E6%80%A7%E4%B8%8B%EF%BC%8CFOR%E5%BE%AA%E7%8E%AF%E9%87%8C%E9%9D%A2%E5%A5%97IF%E6%88%96%E8%80%85%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2024/07/21/%E5%9C%A8PLC%E7%9A%84%E6%89%AB%E6%8F%8F%E7%89%B9%E6%80%A7%E4%B8%8B%EF%BC%8CFOR%E5%BE%AA%E7%8E%AF%E9%87%8C%E9%9D%A2%E5%A5%97IF%E6%88%96%E8%80%85%E5%AE%9A%E6%97%B6%E5%99%A8%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-为什么会提出这个题目"><a href="#1-为什么会提出这个题目" class="headerlink" title="1. 为什么会提出这个题目"></a>1. 为什么会提出这个题目</h2><ul><li>在PLC指令的执行过程中，FOR循环会在每个扫描周期执行完一个循环，然后程序才会接着往下扫描</li><li>在PLC指令的执行过程中，IF判断会在每次扫描中判断一次条件，满足则进入执行体，不满足则跳出IF</li><li>把IF放在FOR循环里面，会导致循环体执行时间过长，或者其他问题吗？（<strong>答案是不会</strong>）毕竟每个循环周期for循环的变量都要从起始值到最大值循环一遍。</li><li>在FOR循环里面嵌入定时器，会导致PLC扫描时间超看门狗时间吗？（<strong>答案是不会</strong>）</li><li>如果把FOR循环换成<code>REPEAT..UNTIL</code>，程序会容易超过看门狗时间吗？（<strong>答案是会</strong>，repeat会一直循环执行体中内容，直到满足break条件；换句话说，FOR和REPEAT的工作原理不一样）</li></ul><h2 id="2-从应用讲起"><a href="#2-从应用讲起" class="headerlink" title="2. 从应用讲起"></a>2. 从应用讲起</h2><ul><li>做一个跑马灯，让PLC DQ输出从小到大依次点亮，再达到最大时再依次减少；设计思路用FOR循环去做DQ点灯的遍历，同时依靠IF去判断当前实际应该点亮的灯是哪个，IF里面再放入定时器来做点亮时间控制。<ul><li>虽然每一遍FOR循环都会把循环数完全跑一遍，但是仅仅只有当满足IF条件的时候才能真正进得去循环体；相当于每个扫描周期内IF被判断了FOR的循环次数那么多次。</li><li>如果FOR循环的次数都结束了还没有进入IF执行体，PLC程序会卡死在这儿吗？<strong>答案是不会</strong>。FOR循环结束后程序会继续往下<code>扫描</code>，不会在意是否进入了IF的判断体</li><li>在IF或者直接在FOR里面嵌套了长时间的定时器，会拉长FOR循环的循环时间吗？<strong>答案是不会</strong>。因为每经过一次扫描周期，PLC去检查一遍定时器时间到了没，不管定时器时间到了还是没到，程序都依旧按照设定扫描顺序依次扫描。<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//循环开始</span><br><span class="hljs-comment">//variant &quot;QB0_QB1&quot; means %QW0,as a word.</span><br>IF <span class="hljs-string">&quot;QB0_QB1&quot;</span> = <span class="hljs-number">0</span> AND NOT #subflag_bool THEN<br>    #addflag_bool := TRUE;<br>END_IF;<br><br>IF #addflag_bool THEN<br>    #BOOL_ARRAY[<span class="hljs-number">0</span>] := true;<br>    #TIME_add_ARRAY[<span class="hljs-number">0</span>](IN := #BOOL_ARRAY[<span class="hljs-number">0</span>],<br>                       PT := T#<span class="hljs-number">2</span>S);<br>    <br>    FOR #FOR_I := <span class="hljs-number">0</span> TO <span class="hljs-number">8</span> DO<br>        IF #TIME_add_ARRAY[#FOR_I].Q THEN<br>            #BOOL_ARRAY[#FOR_I + <span class="hljs-number">1</span>] := TRUE;<br>            #TIME_add_ARRAY[#FOR_I + <span class="hljs-number">1</span>](IN := #BOOL_ARRAY[#FOR_I + <span class="hljs-number">1</span>],<br>                                        PT := T#<span class="hljs-number">2</span>S);<br>        END_IF;<br>    END_FOR;<br>    <br>END_IF;<br><br><span class="hljs-comment">//正循环结束</span><br>IF #TIME_add_ARRAY[<span class="hljs-number">9</span>].Q THEN<br>    <br>    #TIME_sub_ARRAY[<span class="hljs-number">9</span>](IN := #BOOL_ARRAY[<span class="hljs-number">9</span>],<br>                       PT := t#<span class="hljs-number">2</span>s);<br>    IF #TIME_sub_ARRAY[<span class="hljs-number">9</span>].Q THEN<br>        #addflag_bool := FALSE;<br>        #subflag_bool := true;<br>    END_IF;<br>    <br>END_IF;<br><br><span class="hljs-comment">//负循环开始</span><br>IF #subflag_bool THEN<br>    FOR #FOR_J := <span class="hljs-number">9</span> TO <span class="hljs-number">1</span> BY <span class="hljs-number">-1</span> DO<br>        IF #TIME_sub_ARRAY[#FOR_J].Q THEN<br>            #BOOL_ARRAY[#FOR_J] := false;<br>            #TIME_sub_ARRAY[#FOR_J - <span class="hljs-number">1</span>](IN := #BOOL_ARRAY[#FOR_J - <span class="hljs-number">1</span>],<br>                                        PT := T#<span class="hljs-number">2</span>S);<br>        END_IF;<br>    END_FOR;<br>END_IF;<br><br><span class="hljs-comment">//全周期结束</span><br>IF #TIME_sub_ARRAY[<span class="hljs-number">0</span>].Q OR <span class="hljs-string">&quot;Switch&quot;</span> THEN<br>    #subflag_bool := false;<br>    #addflag_bool := FALSE;<br>    FOR #FOR_K := <span class="hljs-number">0</span> TO <span class="hljs-number">9</span> DO<br>        RESET_TIMER(#TIME_add_ARRAY[#FOR_K]);<br>        RESET_TIMER(#TIME_sub_ARRAY[#FOR_K]);<br>        #BOOL_ARRAY[#FOR_K] := FALSE;<br>    END_FOR;<br>END_IF;<br><br><span class="hljs-comment">//赋值</span><br><span class="hljs-string">&quot;Q0.0&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">0</span>];<br><span class="hljs-string">&quot;Q0.1&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">1</span>];<br><span class="hljs-string">&quot;Q0.2&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">2</span>];<br><span class="hljs-string">&quot;Q0.3&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">3</span>];<br><span class="hljs-string">&quot;Q0.4&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">4</span>];<br><span class="hljs-string">&quot;Q0.5&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">5</span>];<br><span class="hljs-string">&quot;Q0.6&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">6</span>];<br><span class="hljs-string">&quot;Q0.7&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">7</span>];<br><span class="hljs-string">&quot;Q1.0&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">8</span>];<br><span class="hljs-string">&quot;Q1.1&quot;</span> := #BOOL_ARRAY[<span class="hljs-number">9</span>];<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-这种嵌套模式的应用设想"><a href="#3-这种嵌套模式的应用设想" class="headerlink" title="3. 这种嵌套模式的应用设想"></a>3. 这种嵌套模式的应用设想</h2><ul><li>在做MODBUS轮询的时候，有些时候我们需要调用很多次功能块，那么能不能利用上述方法，然调用块只被写一次，从而提高效率呢？<ul><li>下例中，主要注意点都写在注释中了</li><li>下例中，ModbusMaster块没有以<code>ARRAY..OF iDB</code>的方式去做多个iDB是因为轮询的方式其实在同一时刻只会调用一次MobusMaster,不必浪费内存去重复做存储区。共用存储区也是可以的。（当然做成iDB数组动态调用也是可以的）</li><li>下例中，代码没有被调试过，只是用来做一种ModBus轮询思路的探讨<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//1.通讯数量的问题<br>//来自于西门子官方文档：<br>//Modbus 寻址支持最多 247 个从站（从站编号 1 到 247）。每个 Modbus 网段最多可以有 32 个设备，具体取决于 RS485 接口的负载和驱动能力。当达到 32 个设备的限制时，必须使用中继器来扩展到下一个网段。需要七个中继器才能将 247 个从站连接到同一个主站的 RS485 接口。<br>//Siemens 中继器仅支持 PROFIBUS；其功能为监视 PROFIBUS 令牌传递。Siemens 中继器不支持其它协议。因此，需要第三方 Modbus 中继器。<br>//Modbus 超时默认较长；使用多个中继器不会产生延时问题。Modbus 主站不关心从站是否响应慢或者多个中继器是否延迟了响应。<br>//2.思路：若要想要只调用一次Modbus_master指令。我想到的方法是用smart200的子程序编程思路去实现（摒弃背景DB的方法来实现只把逻辑写一遍）。<br>//程序如下：<br>//********************************************************START****************************************************//<br><br>//用for执行程序，做轮询！切记同一时间只能访问一个从站，其他从站需要排队！<br>FOR <span class="hljs-punctuation">#</span><span class="hljs-keyword">SlaveNumber</span> := 0 TO 40 DO<br>    //主执行逻辑<br>    //req逻辑依据实际情况在外部写逻辑<br>    IF &quot;ModbusRTUDB&quot;.modbusMasterArray[<span class="hljs-punctuation">#</span><span class="hljs-keyword">SlaveNumber</span>].req AND NOT &quot;ModbusRTUDB&quot;.modbusMasterArray[<span class="hljs-punctuation">#</span><span class="hljs-keyword">SlaveNumber</span>].done THEN<br>        //调用一次初始化块，MB_DB接口用array间接寻址<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">Modbus_Comm_Load_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;FirstScan&quot;</span>,</span><br><span class="hljs-params">                                   <span class="hljs-string">&quot;PORT&quot;</span> :<span class="hljs-operator">=</span> 261,</span><br><span class="hljs-params">                                   <span class="hljs-variable">BAUD</span> :<span class="hljs-operator">=</span> 9600,</span><br><span class="hljs-params">                                   <span class="hljs-variable">PARITY</span> :<span class="hljs-operator">=</span> 0,</span><br><span class="hljs-params">                                   <span class="hljs-variable">MB_DB</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">MB_MASTER</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">MB_DB</span>)</span>;<br>        <br>        //调用一次Master块，背景DB用ARRAY序列化，接口参数用UDT封装后用globleDB序列化<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">commMB_MASTER</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">req</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">MB_ADDR</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">mb_addr</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">MODE</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">mode</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">DATA_ADDR</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">data_addr</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">DATA_LEN</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">data_len</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">done</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">busy</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">error</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">statrus</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">DATA_PTR</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;ModbusRTUDB&quot;</span>.<span class="hljs-variable">modbusMasterArray</span>[#<span class="hljs-variable">SlaveNumber</span>].<span class="hljs-variable">data_ptr</span>)</span>;<br>    END_IF;<br>END_FOR;<br><br>//********************************************************END****************************************************//<br>//3.总结:毕竟PLC是结构化编程而不是面向对象编程，所以要想做到继承父类就能直接调用所有父类方法的思想不容易，<br>//其实西门子官方也不建议向上面这么玩，因为数据安全和数据稳定问题。为每个对象均分配一个专有的背景DB才是西门子的思想所在。<br>//这种玩法参考了没有背景DB思想的SMART200程序，SMART200里面子程序是common的，所有重复调用必须满足异步调用，这很重要，否则数据要出错。<br>//4.缺点：这个方法属于轮询方法，同一时间只会有一个从站设备在通信！数据传输可能会出现排队现象，必须处理好req逻辑！<br>//串行传输，传输效率极其低下。<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>返回txt文档编码格式</title>
    <link href="/2024/07/21/%E8%BF%94%E5%9B%9Etxt%E6%96%87%E6%A1%A3%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <url>/2024/07/21/%E8%BF%94%E5%9B%9Etxt%E6%96%87%E6%A1%A3%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装chardet"><a href="#1-安装chardet" class="headerlink" title="1. 安装chardet"></a>1. 安装<code>chardet</code></h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> chardet<br></code></pre></td></tr></table></figure><h2 id="2-获得文本文档编码类型"><a href="#2-获得文本文档编码类型" class="headerlink" title="2. 获得文本文档编码类型"></a>2. 获得文本文档编码类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> chardet<br><span class="hljs-keyword">from</span> chardet.universaldetector <span class="hljs-keyword">import</span> UniversalDetector<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetEncoding</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param file:</span><br><span class="hljs-string">    :return: &#123;&#x27;encoding&#x27;: &#x27;&#x27;, &#x27;confidence&#x27;: 0.99, &#x27;language&#x27;: &#x27;&#x27;&#125;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    txt = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&quot;rb&quot;</span>)<br>    detector = UniversalDetector()<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> txt.readlines():<br>        detector.feed(line)<br>        <span class="hljs-keyword">if</span> detector.done:<br>            <span class="hljs-keyword">break</span><br>    detector.close()<br>    txt.close()<br>    <span class="hljs-keyword">return</span> detector.result<br><br>my_path = <span class="hljs-string">&#x27;C:\\Users\\xiaocuncun\\Desktop\\my1200_web\\my_test.txt&#x27;</span><br>f = <span class="hljs-built_in">open</span>(my_path, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>str1 = f.read()<br>char_encoding= chardet.detect(str1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;字符串为：<span class="hljs-subst">&#123;str1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;字符串编码信息为：<span class="hljs-subst">&#123;char_encoding&#125;</span>&#x27;</span> ) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;字符串编码为： <span class="hljs-subst">&#123;char_encoding[<span class="hljs-string">&quot;encoding&quot;</span>]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-把txt变成csv"><a href="#3-把txt变成csv" class="headerlink" title="3. 把txt变成csv"></a>3. 把txt变成csv</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import csv<br>import chardet<br><br>my_path = <span class="hljs-string">&#x27;.\\AuditTrail0.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(my_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    str1 = f.<span class="hljs-built_in">read</span>()<br>char_encoding= chardet.detect(str1)<br>encoding_format = char_encoding[<span class="hljs-string">&quot;encoding&quot;</span>]<br><br>csv_file = <span class="hljs-string">&#x27;.\\AuditTrail0.csv&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(my_path,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=encoding_format) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    <span class="hljs-keyword">lines</span> = <span class="hljs-built_in">file</span>.readlines()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_file,<span class="hljs-string">&#x27;w&#x27;</span>,newline=<span class="hljs-string">&#x27;&#x27;</span>,encoding=encoding_format) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    writer = csv.writer(<span class="hljs-built_in">file</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">lines</span>:<br>        row = <span class="hljs-built_in">line</span>.strip().<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        writer.writerow(row)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Comfort屏数值上下限设定</title>
    <link href="/2024/07/21/Comfort%E5%B1%8F%E6%95%B0%E5%80%BC%E4%B8%8A%E4%B8%8B%E9%99%90%E8%AE%BE%E5%AE%9A/"/>
    <url>/2024/07/21/Comfort%E5%B1%8F%E6%95%B0%E5%80%BC%E4%B8%8A%E4%B8%8B%E9%99%90%E8%AE%BE%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="1-上下限在哪里设定"><a href="#1-上下限在哪里设定" class="headerlink" title="1. 上下限在哪里设定"></a>1. 上下限在哪里设定</h2><ul><li>在HMI的变量表里面，右键需要设置的变量，在属性中找到上限和下限，设定为自己期待的值。</li><li>选择常量或者变量都行，变量更灵活<br><img src="/img/blog_page/3427087-20240516145315791-913210672.png"></li></ul><h2 id="2-上下限1和2的区别"><a href="#2-上下限1和2的区别" class="headerlink" title="2. 上下限1和2的区别"></a>2. 上下限1和2的区别</h2><ul><li>HMI的限制设定有两个，上下限1相当于是超过正常值的限值，类似高报警</li><li>上下限2相当于是报警的限值，，类似高高报警。对于输入类型，不允许输入值超过上下限2范围</li><li>上下限1在视图中没有直接表现，应该可以用来做提示或者警告（而非报警）一类的信息。</li><li>上下限2直接表现在视图中。</li><li>一般在工程中为了方便，要不空白上下限1，要不把上下限1和2的值设置为一样。</li><li>在帮助中的解释如下图<br><img src="/img/blog_page/3427087-20240516145836001-286420226.png"></li></ul><h2 id="3-在趋势视图中，如何指定上下限颜色"><a href="#3-在趋势视图中，如何指定上下限颜色" class="headerlink" title="3. 在趋势视图中，如何指定上下限颜色"></a>3. 在趋势视图中，如何指定上下限颜色</h2><ul><li>打开趋势视图属性，找到限制，如图<br><img src="/img/blog_page/3427087-20240516150126403-1876123266.png"></li><li>双击打开复选框指定期待的颜色<br><img src="/img/blog_page/3427087-20240516150218876-394415256.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>HMI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HMI</tag>
      
      <tag>industrial control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于TIA WINCC的审计追踪功能</title>
    <link href="/2024/07/21/%E5%9F%BA%E4%BA%8ETIA%20WINCC%E7%9A%84%E5%AE%A1%E8%AE%A1%E8%BF%BD%E8%B8%AA%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/07/21/%E5%9F%BA%E4%BA%8ETIA%20WINCC%E7%9A%84%E5%AE%A1%E8%AE%A1%E8%BF%BD%E8%B8%AA%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="1-哪些HMI可以用auditTrail"><a href="#1-哪些HMI可以用auditTrail" class="headerlink" title="1. 哪些HMI可以用auditTrail"></a>1. 哪些HMI可以用auditTrail</h2><ul><li>TP277&#x2F;OP277&#x2F;MP277等等</li><li>精致面板系列</li><li>wincc runtime advanced</li><li>wincc runtime advanced的面板PC</li></ul><h2 id="2-设置步骤"><a href="#2-设置步骤" class="headerlink" title="2. 设置步骤"></a>2. 设置步骤</h2><ul><li><p>进入”优良系统设置”，启动”组态与GMP相符”，启动GMP功能<br><img src="/img/blog_page/3427087-20240514101552831-1918982484.png"></p></li><li><p>进入”记录”-“审计追踪”</p><ul><li>HMI保存记录可以选SD卡，U盘等，PC可以选择保存的磁盘</li><li>历史记录保存格式为:TXT，CSV，以及RDB格式。但是只有TXT格式数据可以用于保存中文的记录信息。<br><img src="/img/blog_page/3427087-20240514101411739-723924561.png"><br><img src="/img/blog_page/3427087-20240514102122833-594141866.png"></li></ul></li><li><p>设置需要”GMP”功能的变量</p><ul><li>勾选<code>GMP相关</code></li><li><code>需要注释</code>，当改变一个值的时候，会弹出一个注释窗口，需要工作人员输入更改理由后才能将数值更改</li><li><code>确认</code>，需要确认更改，确认后数据才生效，也可以对重要的信息选择电子签名，电子签名需要工作人员在更改数据前再次输入密码。<br><img src="/img/blog_page/3427087-20240514102627709-128675759.png"><br><img src="/img/blog_page/3427087-20240514103131750-924033560.png"></li></ul></li><li><p>创建用户组和用户</p><ul><li>组是用户所在的类别，比如工程师小王属于工程师组，工程师小莉属于工程师组，操作员小五属于操作员组。一个组可以很多个员工。</li><li>用户是实际现场存在的员工的账户密码，为每个用户选择他属于的用户组。一个员工只能属于一个组。</li><li>下图建立了管理员2个，工程师3个，生产者5个，他们分别属于管理员组，工程师组，生产组</li><li>组的权限分为用户管理，监视，操作；可以为不同的组分配不同的权限<br><img src="/img/blog_page/3427087-20240514103312621-1650506917.png"><br><img src="/img/blog_page/3427087-20240514104054566-1119694946.png"></li></ul></li><li><p>创建画面</p><ul><li>如下图所示，创建了审计追踪的测试画面</li><li>报警视图属性设置为报警缓冲区，system<br><img src="/img/blog_page/3427087-20240514104342196-1411994547.png"><br><img src="/img/blog_page/3427087-20240514104407772-1309535995.png"></li></ul></li></ul><h2 id="3-运行仿真"><a href="#3-运行仿真" class="headerlink" title="3. 运行仿真"></a>3. 运行仿真</h2><ul><li>系统会记录每一条监控数据的改变是由哪个用户产生的，改变的时间点，改变的原因。一些重要数据会需要二次确认和电子签名<br><img src="/img/blog_page/3427087-20240514104741099-844862806.png"></li></ul><h2 id="4-数据记录"><a href="#4-数据记录" class="headerlink" title="4. 数据记录"></a>4. 数据记录</h2><ul><li>在第二步中设置了数据记录保存的位置，我保存为txt文档的，找到txt文档并打开<br><img src="/img/blog_page/3427087-20240514105059843-1530789154.png"></li></ul><h2 id="5-txt文档显示不方便的问题"><a href="#5-txt文档显示不方便的问题" class="headerlink" title="5. txt文档显示不方便的问题"></a>5. txt文档显示不方便的问题</h2><ul><li>西门子有个小插件叫做<code>Wincc AuditViewer</code>，可以用于显示导出的数据，不会存在格式问题。应该去官网下载即可。</li><li>或者可以把TXT文档转换成cvs文件将就看看，下面手写一段转换程序，分隔符上还存在一点问题，将就能用</li><li>不转换也行，直接打开txt也能看，就是不对齐看着比较麻烦<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># txt2csv</span><br><br>import csv<br>import chardet<br><br>my_path = <span class="hljs-string">&#x27;.\\AuditTrail0.txt&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(my_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    str1 = f.<span class="hljs-built_in">read</span>()<br>char_encoding= chardet.detect(str1)<br>encoding_format = char_encoding[<span class="hljs-string">&quot;encoding&quot;</span>]<br><br>csv_file = <span class="hljs-string">&#x27;.\\AuditTrail0.csv&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(my_path,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=encoding_format) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    <span class="hljs-keyword">lines</span> = <span class="hljs-built_in">file</span>.readlines()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_file,<span class="hljs-string">&#x27;w&#x27;</span>,newline=<span class="hljs-string">&#x27;&#x27;</span>,encoding=encoding_format) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>    writer = csv.writer(<span class="hljs-built_in">file</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">lines</span>:<br>        row = <span class="hljs-built_in">line</span>.strip().<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        writer.writerow(row)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>HMI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HMI</tag>
      
      <tag>industrial control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#应用access和sql serve数据库</title>
    <link href="/2024/07/21/C#%E5%BA%94%E7%94%A8access%E5%92%8Csql%20serve%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2024/07/21/C#%E5%BA%94%E7%94%A8access%E5%92%8Csql%20serve%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>从一个开源程序，学习access和sql serve在C#中的应用</p><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>近来想看看怎么实现数据库的连接，在github上找到一个开源的记账项目，仅供学习使用。</p><ul><li>项目使用了一个access数据库，做用户登陆，保存登陆数据<ul><li>.mdb:access数据库文件<br><img src="/img/blog_page/3427087-20240520112931600-1315834347.png"></li></ul></li><li>登陆成功之后，项目新建了一个sql serve数据库文件， 保存用户数据。<ul><li>.mdf：数据文件</li><li>.ldf:日志文件<br><img src="/img/blog_page/3427087-20240520113149776-2007725429.png"></li></ul></li></ul><h2 id="2-打开数据库文件"><a href="#2-打开数据库文件" class="headerlink" title="2. 打开数据库文件"></a>2. 打开数据库文件</h2><ul><li><p>打开access数据库文件：</p><ul><li>安装access数据库。从微软官网下载office365全家桶，自带access。</li><li>双击打开，数据库文件。数据库密码从项目源码中可以得到：<code>string connectstring = &quot;provider=Microsoft.jet.OLEDB.4.0;Data Source=accountsystem.mdb;Jet OleDb:Database Password=lxw618&quot;</code></li><li>登陆后在相应的表中得到了相应的登陆用户和密码。用于后续探索。</li></ul></li><li><p>打开sql serve数据库文件</p><ul><li>安装sql serve数据库，去官网下载，可以选择SSMS安装（带UI），下载后如图：<br><img src="/img/blog_page/3427087-20240520114242076-321453979.png"></li><li>连接到SQL server服务器（没有远程的情况下，本地电脑本身也可以作为服务器）<ul><li>本机服务器名称可以为<code>本机名</code>，可以为<code>.</code>， 也可以为<code>local</code>，也可以为<code>本机IP</code></li></ul></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240520114901410-946271496.png"><br><img src="/img/blog_page/3427087-20240520115432796-307468361.png"></p><h2 id="3-sql-server如何导入外部-mdf文件"><a href="#3-sql-server如何导入外部-mdf文件" class="headerlink" title="3. sql server如何导入外部.mdf文件"></a>3. sql server如何导入外部.mdf文件</h2><ul><li>以管理身份运行SSMS，不然没有权限导入，切记<br><img src="/img/blog_page/3427087-20240520115719370-951774518.png"></li><li>进入并且连接上数据库之后，右键“数据库”，选择“附加”，添加外部mdf文件，ldf文件会一并自动添加到数据库中<br><img src="/img/blog_page/3427087-20240520124926856-1123771229.png"></li><li>导入后的外部数据库<br><img src="/img/blog_page/3427087-20240520125021429-1100672402.png"></li></ul><h2 id="4-检查配置sql远程权限，远程TCP连接用，本地不用"><a href="#4-检查配置sql远程权限，远程TCP连接用，本地不用" class="headerlink" title="4. 检查配置sql远程权限，远程TCP连接用，本地不用"></a>4. 检查配置sql远程权限，远程TCP连接用，本地不用</h2><ul><li>SQL配置管理检查，TCP端口1433<br><img src="/img/blog_page/3427087-20240520130951971-736554499.png"></li><li>查看sql实例运行状态<br><img src="/img/blog_page/3427087-20240520131302050-396938146.png"></li><li>防火墙设置<br><img src="/img/blog_page/3427087-20240520131603328-1144114716.png"><br><img src="/img/blog_page/3427087-20240520131624917-796223776.png"><br><img src="/img/blog_page/3427087-20240520131708089-242416580.png"></li></ul><h2 id="5-测试sql-serve"><a href="#5-测试sql-serve" class="headerlink" title="5. 测试sql serve"></a>5. 测试sql serve</h2><ul><li><p>除了通过SSMS连接，还有一些其他方式，如<code>建立.udl</code>文件</p><ul><li>建立一个新建文本文档，把后缀改为.udl；右键打开文件属性，选择连接。测试连接<br><img src="/img/blog_page/3427087-20240520125408427-1407161977.png"></li></ul></li><li><p>通过CMD测试连接,如果显示<code>1&gt;</code>则连接成功。用<code>QUIT</code>退出测试</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sqlcmd -S &lt;<span class="hljs-keyword">server</span> <span class="hljs-type">name</span>&gt; -U &lt;<span class="hljs-keyword">user</span> <span class="hljs-type">name</span>&gt; -p &lt;pass word&gt; -d &lt;<span class="hljs-keyword">database</span> <span class="hljs-type">name</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-通过C-实现数据库的连接"><a href="#6-通过C-实现数据库的连接" class="headerlink" title="6. 通过C#实现数据库的连接"></a>6. 通过C#实现数据库的连接</h2><ul><li><p>access数据库的连接方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">GetSqlConnectString</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-type">string</span> <span class="hljs-variable">connectstring</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;provider=Microsoft.jet.OLEDB.4.0;Data Source=accountsystem.mdb;Jet OleDb:Database Password=lxw618&quot;</span>;<br>        <span class="hljs-type">string</span> <span class="hljs-variable">sqlcommand</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select connect from [Set]&quot;</span>;<br>        <span class="hljs-type">OleDbConnection</span> <span class="hljs-variable">aConnection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OleDbConnection</span>(connectstring);<br>        aConnection.Open();<br>        <span class="hljs-type">OleDbCommand</span> <span class="hljs-variable">aCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OleDbCommand</span>(sqlcommand, aConnection);<br>        <span class="hljs-type">OleDbDataReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> aCommand.ExecuteReader();<br>        reader.Read();<br>        sqlConectstring = reader.GetString(<span class="hljs-number">0</span>);               <br>        reader.Close();<br>        aConnection.Close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex)<br>    &#123;<br>        MessageBox.Show(ex.Message, <span class="hljs-string">&quot;系统错误&quot;</span>);                <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>sql server数据库连接方法，实际上示例名可以空着</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">private <span class="hljs-type">void</span> btnSetConnect_Click(<span class="hljs-keyword">object</span> sender, EventArgs e)<br>&#123;<br>    try<br>    &#123;<br>        <span class="hljs-keyword">if</span> (this.<span class="hljs-keyword">IsNull</span>() == <span class="hljs-keyword">true</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;                <br>        string connectstring = &quot;Data Source=&quot; + txtServer.Text + &quot;\\&quot; + txtCase.Text + &quot;;Initial Catalog=&quot; + txtDatabase.Text + &quot;;User ID=&quot; + txtUsername.Text + &quot;;Password=&quot; + txtPassword.Text;<br>        string sqlcommand = &quot;select username,password from [User]&quot;;<br>        SqlConnection sqlConnection = <span class="hljs-built_in">new</span> SqlConnection(connectstring);<br>        sqlConnection.<span class="hljs-keyword">Open</span>();<br>        SqlCommand sqlCommand = <span class="hljs-built_in">new</span> SqlCommand(sqlcommand, sqlConnection);<br>        SqlDataReader reader = sqlCommand.ExecuteReader();<br>        MessageBox.<span class="hljs-keyword">Show</span>(&quot;连接成功&quot;, &quot;恭喜&quot;);<br>    &#125;<br>    catch (<span class="hljs-keyword">Exception</span> ex)<br>    &#123;<br>        MessageBox.<span class="hljs-keyword">Show</span>(ex.Message, &quot;系统错误&quot;);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="7-登陆测试"><a href="#7-登陆测试" class="headerlink" title="7. 登陆测试"></a>7. 登陆测试</h2><ul><li><code>.</code>表示本地</li><li>本地服务器实例名空着，因为不管用cmd还是udl验证都没填写实例名</li><li>数据库名，用户名，密码保持一致</li><li>实际上的中断用户名和密码是通过在线调试程序打断点的方式得到的。程序里有行比较数据库用户程序名和输入用户程序名的代码段。<br><img src="/img/blog_page/3427087-20240520130148482-1104705752.png"></li></ul><h2 id="8-附录，早前使用access练习sql指令的命令行"><a href="#8-附录，早前使用access练习sql指令的命令行" class="headerlink" title="8. 附录，早前使用access练习sql指令的命令行"></a>8. 附录，早前使用access练习sql指令的命令行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 学生(学号 <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">Primary</span> Key, 姓名 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">Not</span> <span class="hljs-keyword">Null</span>, 性别 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">1</span>), 出生日期 <span class="hljs-type">DATE</span>,家庭住址 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>), 学分 NUMBER);<span class="hljs-comment">----创建表格</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 学生<span class="hljs-comment">----删除表格</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 学生 ( 学号, 姓名, 性别, 出生日期, 家庭住址, 学分 )<span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, &quot;张三&quot;, &quot;男&quot;, #<span class="hljs-number">1999</span><span class="hljs-operator">/</span><span class="hljs-number">12</span><span class="hljs-operator">/</span><span class="hljs-number">9</span>#, &quot;成都市&quot;, <span class="hljs-number">98.5</span>);<span class="hljs-comment">----依据字段插入值</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 学生 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, &quot;翠翠&quot;, &quot;女&quot;, #<span class="hljs-number">2000</span><span class="hljs-operator">/</span><span class="hljs-number">12</span><span class="hljs-operator">/</span><span class="hljs-number">9</span>#, &quot;成都市&quot;, <span class="hljs-number">97.5</span>);<span class="hljs-comment">----依据字段（不标明字段）插入值</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 学生 ( 学号, 姓名, 性别, 家庭住址, 学分 ) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, &quot;李四&quot;, &quot;男&quot;, &quot;成都市&quot;, <span class="hljs-number">55.5</span>);<span class="hljs-comment">----依据字段（带空缺）插入值</span><br><br><span class="hljs-keyword">UPDATE</span> 学生 <span class="hljs-keyword">SET</span> 学分 <span class="hljs-operator">=</span> 学分<span class="hljs-number">-50</span> <span class="hljs-keyword">WHERE</span> 姓名<span class="hljs-operator">=</span>&quot;张三&quot;;<span class="hljs-comment">----带条件的更新数据</span><br><br><span class="hljs-keyword">UPDATE</span> 学生 <span class="hljs-keyword">SET</span> 学分 <span class="hljs-operator">=</span> 学分<span class="hljs-number">-50</span>;<span class="hljs-comment">----更新所有数据</span><br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 姓名 <span class="hljs-operator">=</span> &quot;李四&quot;;<span class="hljs-comment">----带条件的删除</span><br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 学生;<span class="hljs-comment">----删除</span><br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别 <span class="hljs-keyword">FROM</span> 学生;<span class="hljs-comment">----筛选</span><br><br><span class="hljs-keyword">SELECT</span> 姓名 <span class="hljs-keyword">AS</span> 名字 <span class="hljs-keyword">FROM</span> 学生;<span class="hljs-comment">----别名</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 性别 <span class="hljs-keyword">FROM</span> 学生;<span class="hljs-comment">----限制，不重复出现</span><br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别, 学分 <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 性别 <span class="hljs-operator">=</span> &quot;男&quot;;<br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别, 学分 <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 学分 <span class="hljs-operator">&gt;</span> <span class="hljs-number">90</span> <span class="hljs-keyword">OR</span> 学分 <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别, 学分 <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 性别 <span class="hljs-keyword">IN</span> (&quot;男&quot;);<br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别, 学分 <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 姓名 <span class="hljs-keyword">LIKE</span> &quot;李*&quot;;<br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别, 学分 <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 出生日期 <span class="hljs-keyword">Is</span> <span class="hljs-keyword">Null</span>;<br><br><span class="hljs-keyword">SELECT</span> 姓名, 性别, 学分 <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 出生日期 <span class="hljs-keyword">Is</span> <span class="hljs-keyword">Not</span> <span class="hljs-keyword">Null</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 学分 <span class="hljs-keyword">ASC</span>;<span class="hljs-comment">----正序</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 学分 <span class="hljs-keyword">DESC</span>;<span class="hljs-comment">----反序</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 性别 <span class="hljs-operator">=</span> &quot;男&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 学分 <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">1</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 学生 <span class="hljs-keyword">WHERE</span> 性别 <span class="hljs-operator">=</span> &quot;男&quot; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 学分 <span class="hljs-keyword">DESC</span>;<span class="hljs-comment">----取前1名</span><br>...<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">AS</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>AVG<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">HAVING</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>把markdown文件转换为html文件</title>
    <link href="/2024/07/21/%E6%8A%8Amarkdown%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAhtml%E6%96%87%E4%BB%B6/"/>
    <url>/2024/07/21/%E6%8A%8Amarkdown%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAhtml%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ul><li>使用<code>pip install markdown</code>模块</li><li>只做到了分行；</li><li>表格，-，和空格还没能无缝转换</li><li>代码如下：<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import os<br>import codecs<br>import markdown<br><br>def convert_markdown_to_html(markdown_file):<br>    <span class="hljs-keyword">with</span> codecs.<span class="hljs-built_in">open</span>(markdown_file,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>        markdown_text = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>()<br>        html_text = markdown.markdown(markdown_text,extensions=[<span class="hljs-string">&#x27;nl2br&#x27;</span>])<br><br>    html_file = os.path.splitext(markdown_file)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.html&#x27;</span><br>    <span class="hljs-keyword">with</span> codecs.<span class="hljs-built_in">open</span>(html_file,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">file</span>:<br>        <span class="hljs-built_in">file</span>.<span class="hljs-built_in">write</span>(html_text)<br><br>markdown_file = <span class="hljs-string">&quot;.//test.md&quot;</span><br>convert_markdown_to_html(markdown_file)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于西门子间接寻址的一些理解</title>
    <link href="/2024/07/21/%E5%85%B3%E4%BA%8E%E8%A5%BF%E9%97%A8%E5%AD%90%E9%97%B4%E6%8E%A5%E5%AF%BB%E5%9D%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <url>/2024/07/21/%E5%85%B3%E4%BA%8E%E8%A5%BF%E9%97%A8%E5%AD%90%E9%97%B4%E6%8E%A5%E5%AF%BB%E5%9D%80%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>今天不研究高大上的，研究一个接近底层的东西，叫<code>间接寻址</code>。它很基础，基础到我们无时无刻都在用，但是同时它也很难理解，因为其实寄存器的概念已经被渐渐隐藏了。</p><h2 id="1-地址的概念"><a href="#1-地址的概念" class="headerlink" title="1. 地址的概念"></a>1. 地址的概念</h2><p> 我们通常提到的物理输入输出印象区P，印象输入区I，印象输出区Q，位存储区M，定时器T，计数器C，数据区DB，<font color=red>背景数据区DI</font>，本地数据区L。<br> 每个区域（除T&#x2F;C）都可以用BIT,BYTE,WORD,DWORD来指定它们的大小。<br> <code>区域+区域位置和长度</code>，其实构成了我们描述一个地址的必要条件。</p><ul><li>存储的区域</li><li>这个区域中具体的位置</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//例子： A Q2.<span class="hljs-number">0</span><br><span class="hljs-attribute">A</span> <span class="hljs-operator">=</span> 指令符；<br><span class="hljs-attribute">Q</span> <span class="hljs-operator">=</span> 输出印象区；<br><span class="hljs-number">2.0</span> <span class="hljs-operator">=</span> 输出印象区的第二个字节的第<span class="hljs-number">0</span>位；<br><br>//例子： DBX200.<span class="hljs-number">0</span><br><span class="hljs-attribute">DB</span> <span class="hljs-operator">=</span> 数据区；<br><span class="hljs-attribute">X</span> <span class="hljs-operator">=</span> 位；<br><span class="hljs-number">200</span> <span class="hljs-operator">=</span> 具体位置<br><span class="hljs-number">0</span> <span class="hljs-operator">=</span> 具体的位位置<br></code></pre></td></tr></table></figure><p> 所以一个地址的确切构成应该是<code>&lt;存储区符号&gt;&lt;存储区尺寸符号&gt;&lt;尺寸数值&gt;.&lt;位数值&gt;</code>。把&lt;存储区符号&gt;&lt;存储区尺寸符号&gt;统一看作&lt;地址标志符&gt;，那么地址组成又可以写成**<code>&lt;地址标志符&gt;&lt;数值单元&gt;</code>**。</p><h2 id="2-间接寻址"><a href="#2-间接寻址" class="headerlink" title="2. 间接寻址"></a>2. 间接寻址</h2><ul><li>间接寻址对应的是直接寻址，那什么是直接寻址？<br> <strong><code>直接给出指令的确切操作数就叫直接寻址。</code></strong><br> <strong><code>地址的最小单元是BIT。</code></strong></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//直接操作Q20.0的地址，直接寻址</span><br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">Q20</span><span class="hljs-selector-class">.0</span><br></code></pre></td></tr></table></figure><ul><li>对应的，间接给出的寻址方式。就是间接寻址。<br><strong><code>用[ ]标明的内容，间接指代地址</code></strong><br><strong><code>其中MD100和DBW100被称为指针Pointer,它指向它们包含的数值所代表的地址</code></strong><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//间接访问地址，间接寻址</span><br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">Q</span><span class="hljs-selector-attr">[MD100]</span><br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">T</span><span class="hljs-selector-attr">[DBW100]</span><br></code></pre></td></tr></table></figure></li><li>指针格式（<strong>存储器间接寻址</strong>）<ol><li><em><u>存储器间接寻址具有<code>两个指针格式：单字和双字</code>。单字指针是一个16bit的结构，从0-15bit，指示一个从0-65535的数值，这个<font color=red>数值就是被寻址的存储区域的编号</font>。双字指针是一个32bit的结构，从0-2bit，共三位，按照8进制指示被寻址的位编号，也就是0-7；而从3-18bit，共16位，指示一个从0-65535的数值，<font color=red>这个数值就是被寻址的字节编号。*<em>这句话说明相比于单字指针，双字指针可以多表达0-7bit的位编号</em></em></font></u>*</li><li><em><u>指针可以存放在M、DI、DB和L区域中，也就是说，可以用这些区域的内容来做指针。</u></em><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel">//<br>L DW#<span class="hljs-number">16</span>#<span class="hljs-number">35</span> //将<span class="hljs-number">32</span>位<span class="hljs-number">16</span>进制数<span class="hljs-number">35</span>存入ACC1<br><span class="hljs-built_in">T</span> <span class="hljs-symbol">MD2</span> //这个值再存入<span class="hljs-symbol">MD2</span>，这是个<span class="hljs-number">32</span>位的位存储区域<br>L +<span class="hljs-number">10</span> //将<span class="hljs-number">16</span>位整数<span class="hljs-number">10</span>存入ACC1，<span class="hljs-number">32</span>位<span class="hljs-number">16</span>进制数<span class="hljs-number">35</span>自动移动到ACC2<br><span class="hljs-built_in">T</span> <span class="hljs-symbol">MW100</span> //这个值再存入<span class="hljs-symbol">MW100</span>，这是个<span class="hljs-number">16</span>位的位存储区域<br>OPN DBW[<span class="hljs-symbol">MW100</span>] //打开DBW10。这里的[<span class="hljs-symbol">MW100</span>]就是个单字指针，存放指针的区域是M区，<span class="hljs-symbol">MW100</span>中的值<span class="hljs-number">10</span>，就是指针间接指定的地址，它是个<span class="hljs-number">16</span>位的值！<br>//<br>L L#+<span class="hljs-number">10</span> //以<span class="hljs-number">32</span>位形式，把<span class="hljs-number">10</span>放入ACC1，此时，ACC2中的内容为：<span class="hljs-number">16</span>位整数<span class="hljs-number">10</span><br><span class="hljs-built_in">T</span> <span class="hljs-symbol">MD104</span> //这个值再存入<span class="hljs-symbol">MD104</span>，这是个<span class="hljs-number">32</span>位的位存储区域<br>A I[<span class="hljs-symbol">MD104</span>] //对<span class="hljs-symbol">I1</span>.<span class="hljs-number">2</span>进行与逻辑操作！<br>=DIX[<span class="hljs-symbol">MD2</span>] //赋值背景数据位DIX6.<span class="hljs-number">5</span>！<br>//<br>A <span class="hljs-built_in">DB</span>[<span class="hljs-symbol">MW100</span>].DBX[<span class="hljs-symbol">MD2</span>] //读入<span class="hljs-symbol">DB10</span>.DBX6.<span class="hljs-number">5</span>数据位状态<br>=Q[<span class="hljs-symbol">MD2</span>] //赋值给<span class="hljs-symbol">Q6</span>.<span class="hljs-number">5</span><br>//<br>A <span class="hljs-built_in">DB</span>[<span class="hljs-symbol">MW100</span>].DBX[<span class="hljs-symbol">MD2</span>] //读入<span class="hljs-symbol">DB10</span>.DBX6.<span class="hljs-number">5</span>数据位状态<br>=<span class="hljs-symbol">Q10</span> //错误！！没有<span class="hljs-symbol">Q10</span>这个元件<br></code></pre></td></tr></table></figure>通过上面发现：双字指针描述byte.bit的这种结构，单字指针只能描述存储区域。<br><strong><u><font color=red>换句话说，单字指针不能描述P,I,Q,L这些区域，因为描述它们要精确到bit。</font></u></strong><br><strong><u><font color=red>对双字指针而言，似乎一切都好，但是也有一个限制，对于非位区域寻址的时候，它的描述必须要保全其0-2bit都是0，也就是说对于非位区域，它的的精度到不了位</font></u></strong><br><strong><u><font color=red>也正是由于双字指针是一个具有位的指针，因此，当对字节、字或者双字存储区地址进行寻址时，必须确保双字指针的内容是8或者8的倍数</font></u></strong></li></ol></li></ul><p>上诉例子中有段代码是</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">I</span><span class="hljs-selector-attr">[MD104]</span> <span class="hljs-comment">//对I1.2进行与逻辑操作！</span><br></code></pre></td></tr></table></figure><p>那么，为什么是I1.2呢？</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">原因：<br>通过L L#<span class="hljs-number">+10</span>，MD104应该是等于十进制的<span class="hljs-number">10</span>，转换为<span class="hljs-number">32</span>位二进制数如下：<br>MD104 = <span class="hljs-number">2</span>#<span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">1010</span>；<br>按照双字指针的概念，<span class="hljs-number">3</span><span class="hljs-number">-18</span>bit指定<span class="hljs-type">byte</span>,<span class="hljs-number">0</span><span class="hljs-number">-2</span>bit指定最终要操作的位，那么计算出来的结果就应该是<span class="hljs-number">1.2</span>！<br>按照双字指针的概念，<span class="hljs-number">3</span><span class="hljs-number">-18</span>bit指定<span class="hljs-type">byte</span>,<span class="hljs-number">0</span><span class="hljs-number">-2</span>bit指定最终要操作的位，那么计算出来的结果就应该是<span class="hljs-number">1.2</span>！<br>按照双字指针的概念，<span class="hljs-number">3</span><span class="hljs-number">-18</span>bit指定<span class="hljs-type">byte</span>,<span class="hljs-number">0</span><span class="hljs-number">-2</span>bit指定最终要操作的位，那么计算出来的结果就应该是<span class="hljs-number">1.2</span>！<br></code></pre></td></tr></table></figure><ul><li>指针格式（<strong>寄存器间接寻址</strong>）<ol><li><p><code>存储器间接寻址</code>和<code>寄存器间接寻址</code>有什么不一样：<br> <strong><u><font color=red>在先前所说的存储器间接寻址中，间接指针用M、DB、DI和L直接指定，就是说，指针指向的存储区内容就是指令要执    行的确切地址数值单元。但在寄存器间接寻址中，指令要执行的确切地址数值单元，并非寄存器指向的存储区内容，也就是说，寄存器本身也是间接的指向真正的地址数值单元。</font></u></strong></p></li><li><p>寄存器间接寻址的途径</p><ul><li>区域内寄存器间接寻址</li><li>区域间寄存器间接寻址</li></ul></li><li><p>寄存器间接寻址的格式</p><ul><li><code>&lt;地址标志符&gt;&lt;寄存器，P#byte.bit&gt;</code></li></ul></li></ol></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//举个例子</span><br>DIX<span class="hljs-selector-attr">[AR1,P#1.5]</span> <span class="hljs-comment">//要寻址的地址区域事先已经确定(DI)，AR1可以改变的只是这个区域内的确切地址数值单元，所以我们称之为区域内寄存器间接寻址方式，相应的，这里的[AR1,P#1.5] 就叫做区域内寻址指针。</span><br><span class="hljs-attribute">X</span><span class="hljs-selector-attr">[AR1,P#1.5]</span> <span class="hljs-comment">//要寻址的地址区域和确切的地址数值单元，都未事先确定，只是确定了存储大小，这就是意味着我们可以在不同的区域间的不同地址数值单元以给定的区域大小进行寻址，所以称之为：区域间寄存器间接寻址方式，相应的，这里的[AR1,P#1.5] 就叫做区域间寻址指针。</span><br></code></pre></td></tr></table></figure><ul><li>AR的格式<br> <code>地址寄存器</code>AR是专门用于寻址的一个特殊指针区域，西门子的地址寄存器一共2个，<code>AR1和AR2，每个32位</code>。<ul><li><strong><u><font color=red>区域内寻址寄存器里面，AR的内容只是指代数值单元，因为其他的已经确认，所以这种情况的的AR等同于存储寄存器中的双字指针，也就是0-2指代bit,3-18指代byte字节，其中第31位固定为0。</font></u></strong></li><li><strong><u><font color=red>区域间寻址寄存器31位固定为1，24-26bit可以被定义用于指定存储区域，它其实是一种我们常见的区域划分标志（如B#16#84表示DB区的概念就来自于此）。</font></u></strong></li></ul></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 比较区域内寻址寄存器和区域间寻址寄存器的格式差别</span><br>区域内寻址寄存器：<br><span class="hljs-symbol">AR:</span><span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0</span>BBB <span class="hljs-keyword">BBBB </span><span class="hljs-keyword">BBBB </span><span class="hljs-keyword">BBBB </span><span class="hljs-keyword">BXXX</span><br><span class="hljs-keyword"></span><br>区域间寻址寄存器：<br><span class="hljs-symbol">AR:</span><span class="hljs-number">1000</span> <span class="hljs-number">0</span>YYY <span class="hljs-number">0000</span> <span class="hljs-number">0</span>BBB <span class="hljs-keyword">BBBB </span><span class="hljs-keyword">BBBB </span><span class="hljs-keyword">BBBB </span><span class="hljs-keyword">BXXX</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment"># 差别1：区域间的第31位固定为1了。</span><br><span class="hljs-comment"># 差别2：区域间的第24-26位可以被定义和修改了。</span><br></code></pre></td></tr></table></figure><ul><li>区域标志符（区域间寻址寄存器24-26位）<ul><li><p>我们一定不会陌生的知识如下：</p><ol><li>数据区P，B#16#80（2#000）</li><li>数据区I，B#16#81（2#001）</li><li>数据区Q，B#16#82（2#010）</li><li>数据区M，B#16#83（2#011）</li><li>数据区DB，B#16#84（2#100）</li><li>数据区DI，B#16#85（2#101），表示背景DB</li><li>数据区L，B#16#86（2#111）</li></ol></li><li><p>当我们把这些AR的内容全部表达出来：</p><ol><li>数据区P，B#16#800xxxxx</li><li>数据区I，B#16#810xxxxx</li><li>数据区Q，B#16#820xxxxx</li><li>数据区M，B#16#830xxxxx</li><li>数据区DB，B#16#840xxxxx</li><li>数据区DI，B#16#850xxxxx</li><li>数据区L，B#16#860xxxxxx</li></ol></li></ul></li></ul><p><strong><u><font color=red>我们从上面能得到一个初步结论：果AR中的内容是8开头，那么就一定是区域间寻址。</font></u></strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//举个例子</span><br>AR <span class="hljs-punctuation">=</span> <span class="hljs-number">16</span><span class="hljs-meta">#840000D4</span><br><span class="hljs-comment">//我们可以转换位二进制显示</span><br>AR <span class="hljs-punctuation">=</span> <span class="hljs-number">2</span><span class="hljs-meta"># 1000 0100 0000 0000 0000 0000 1101 0100</span><br> <span class="hljs-comment">// bit31=1,表示区域间寄存器寻址</span><br><span class="hljs-comment">// bit24-26=100,表示DB</span><br><span class="hljs-comment">// bit3-18=26,表示区域位置是26</span><br><span class="hljs-comment">// bit0-2=100，表示4</span><br><span class="hljs-comment">//合计如下</span><br>AR表达的地址是DBX26.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ul><li>P#指针是什么<br>P#中的P是Pointer，是个32位的直接指针。所谓的直接，是指P#中的#后面所跟的数值或者存储单元，是P直接给定的。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#Q1</span><span class="hljs-selector-class">.0</span> <span class="hljs-comment">//把Q1.0这个指针存入ACC1，此时ACC1的内容=82000008（hex）=Q1.0</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#1</span><span class="hljs-selector-class">.0</span> <span class="hljs-comment">//把1.0这个指针存入ACC1，此时ACC1的内容=00000008（hex）=1.0（这是个区域内寄存器寻址指针，如X[AR1,P#1.5]）</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#MB100</span> <span class="hljs-comment">//错误！必须按照byte.bit结构给定指针。</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#M100</span><span class="hljs-selector-class">.0</span> <span class="hljs-comment">//把M100.0这个指针存入ACC1，此时ACC1的内容=83000320（hex）=M100.0</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#DB100</span><span class="hljs-selector-class">.DBX26</span><span class="hljs-selector-class">.4</span> <span class="hljs-comment">//错误！DBX已经提供了存储区域，不能重复指定</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#DBX26</span><span class="hljs-selector-class">.4</span> <span class="hljs-comment">//把DBX26.4这个指针存入ACC1，此时ACC1的内容=840000D4（hex）=DBX26.4</span><br><span class="hljs-comment">//对P#指定带有存储区域时，累加器中的内容和区域间寻址指针内容完全相同。事实上，把什么样的值传给AR，就决定了是以什么样的方式来进行寄存器间接寻址。</span><br></code></pre></td></tr></table></figure></li></ul><p><strong><u><font color=red>在寄存器寻址中，P#XXX作为寄存器AR指针的偏移量，用来和AR指针进行相加运算，运算的结果，才是指令真正要操作的确切地址数值单元！</font></u></strong></p><ul><li><p>P#的运算规则</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//运算的法则是：AR1和P<span class="hljs-punctuation">#</span>中的数值，按照BYTE位和BIT位分类相加。BIT位相加按八进制规则运算，而BYTE位相加，则按照十进制规则运算。<br><br>对于[AR1，P<span class="hljs-punctuation">#</span>2.6]，若AR1=26.4 &gt;&gt;&gt;AR1(26.4)+P<span class="hljs-punctuation">#</span><span class="hljs-params">(2.6)</span>=29.7，这是区域内寄存器间接寻址的最终确切地址数值单元<br>对于[AR1，P<span class="hljs-punctuation">#</span>2.6]，若AR1=DBX26.4 &gt;&gt;&gt;AR1(DBX26.4)+P<span class="hljs-punctuation">#</span><span class="hljs-params">(2.6)</span>=DBX29.7，这是区域间寄存器间接寻址的最终确切地址数值单元<br></code></pre></td></tr></table></figure></li><li><p>AR的地址运算</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//1.直接赋值，保证直接数是32位，包含相关区域，位置，地址信息</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-tag">DW</span><span class="hljs-selector-id">#16</span><span class="hljs-selector-id">#83000320</span><br><span class="hljs-selector-tag">LAR1</span><br><span class="hljs-comment">//2.间接赋值，可以用存储器间接寻址指针给定AR1内容。具体内容存储在MD100中</span><br><span class="hljs-selector-tag">L</span> <span class="hljs-selector-attr">[MD100]</span><br><span class="hljs-selector-tag">LAR1</span><br><span class="hljs-comment">//3.指针赋值，使用P#这个32位“常数”指针赋值AR。</span><br><span class="hljs-selector-tag">LAR1</span> <span class="hljs-selector-tag">P</span><span class="hljs-selector-id">#26</span><span class="hljs-selector-class">.2</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟值处理-base on simatic</title>
    <link href="/2024/07/21/%E6%A8%A1%E6%8B%9F%E5%80%BC%E5%A4%84%E7%90%86-base%20on%20simatic/"/>
    <url>/2024/07/21/%E6%A8%A1%E6%8B%9F%E5%80%BC%E5%A4%84%E7%90%86-base%20on%20simatic/</url>
    
    <content type="html"><![CDATA[<h2 id="1-模拟量有哪些"><a href="#1-模拟量有哪些" class="headerlink" title="1. 模拟量有哪些"></a>1. 模拟量有哪些</h2><ul><li>温度</li><li>压力</li><li>速度</li><li>填充量</li><li>PH值</li></ul><h2 id="2-变送器"><a href="#2-变送器" class="headerlink" title="2. 变送器"></a>2. 变送器</h2><p>对于PLC而言，只能处理<code>位模式格式</code>的模拟值（-32767~32767）。所以变送器的目的是测量如压力流量温度等物理值，再转换成<code>电流/电压/电阻</code>等形式，方便模拟量输入模块采集，采集后再模块内部有一个AD（模数）转换器，可以把电流电压电阻值变成<code>16位</code>整数值。</p><ul><li>电压变送器</li><li>电流变送器<ul><li>2线制电流变送器（无源变送器，靠模拟量模块给电压）</li><li>4线制电流变送器（有源，变送器自己出一个负载供电）</li></ul></li><li>电阻变送器<ul><li>2线</li><li>3线</li><li>4线</li></ul></li><li>热电偶</li><li>隔离变送器</li></ul><h2 id="3-模数转换"><a href="#3-模数转换" class="headerlink" title="3. 模数转换"></a>3. 模数转换</h2><p>PLC只能处理数字格式的信息。因此模块内部靠ADC转换，把模拟量的连续变化的曲线数字化为一个近似的跳变曲线（采样点越多，越趋近于真实的模拟量曲线）。对于西门子的产品，ADC芯片的转换始终返回的是一个<code>16bits</code>字。<br><img src="/img/blog_page/3427087-20240521145855666-794032729.png"></p><ul><li>模数转换关键参数1：准确性&#x2F;精度</li><li>模数转换关键参数2：转换速度</li></ul><h2 id="4-精度"><a href="#4-精度" class="headerlink" title="4. 精度"></a>4. 精度</h2><p>精度越高，跳变的数字曲线才会越趋近于物理上连续的真实模拟量曲线。<br>在西门子的模拟量模块选型中，经常会遇到描述模块精度的词汇，如模块精度为13bits,或者模块精度为16位。下面将用计算来说明一下模块精度怎么理解：</p><ul><li>在0-10V的测量模块中，模块精度等于13位（&#x3D;12bit + S），其中<code>S表示符号位；0-正1-负</code>。<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-comment">//仅作举例</span><br><span class="hljs-number">2</span>^<span class="hljs-number">12</span>=<span class="hljs-number">4096</span><br>最小增量 = <span class="hljs-number">10</span>V / <span class="hljs-number">4096</span><br>        = <span class="hljs-number">2.4</span><span class="hljs-keyword">mV</span><br></code></pre></td></tr></table></figure></li><li>在0-10V的测量模块中，模块精度等于16位（&#x3D;15bit + S），其中<code>S表示符号位；0-正1-负</code>。<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-number">2</span>^<span class="hljs-number">15</span>=<span class="hljs-number">32768</span><br><span class="hljs-comment">//实际上因为额定范围，上溢下溢等概念，导致10V对应的数字值应该是27648，这里只是理论计算</span><br><span class="hljs-comment">//双极性-32768~+32767，单极性0~+32767,所以单双极性之间最小增量是一致的。</span><br>理论最小增量 = <span class="hljs-number">10</span>V / <span class="hljs-number">32768</span><br>        = <span class="hljs-number">0.305</span><span class="hljs-keyword">mV</span><br>实际最小增量 = <span class="hljs-number">10</span>V / <span class="hljs-number">27648</span><br>        = <span class="hljs-number">0.3617</span><span class="hljs-keyword">mV</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="5-输出范围"><a href="#5-输出范围" class="headerlink" title="5. 输出范围"></a>5. 输出范围</h2><ul><li><p>低于16bit的模块未使用的有效位用“0”填充，<code>模拟值左对齐，即右边部分是填充部分</code></p></li><li><p><font color=red>无论是何种精度，模块都将占用-32768~+32767的所有范围，精度决定了两个连续值之间的缩放值（单位步长）</font></p><ul><li>16bit模块以1个单位步长递增，（2^0&#x3D;1）</li><li>13bit模块以8个单位步长递增，（2^3&#x3D;8）<br><img src="/img/blog_page/3427087-20240521153231820-825332649.png"></li></ul></li><li><p>双极性输入输出范围表示</p><ul><li>输入，精度16bit,+-10V<br><img src="/img/blog_page/3427087-20240521153454704-213228232.png"></li><li>输出，精度16bit,+-10V<br><img src="/img/blog_page/3427087-20240521153551625-1586674874.png"></li></ul></li><li><p>单极性输入输出范围表示</p><ul><li>输入，精度16bit,+-10V<br><img src="/img/blog_page/3427087-20240521153658613-667023362.png"></li><li>输出，精度16bit,+-10V<br><img src="/img/blog_page/3427087-20240521153735458-537461221.png"></li></ul></li></ul><h2 id="6-误差"><a href="#6-误差" class="headerlink" title="6. 误差"></a>6. 误差</h2><ul><li>基本误差，在25℃环境下的操作极限，使用<code>最大值*误差值</code></li><li>全温范围误差，整个温度范围的操作限值，使用<code>最大值*误差值</code></li><li>线性误差</li><li>温度误差<ul><li>如下图，西门子的手册里对温度误差的案例可能会引起一些误会，其实在这个案例里面不管是+-2.4K(开式温度)还是+-6℃（摄氏温度），它们所表达的都是一个<code>相对温度</code>（<font color=red>相对于-273.15或者相对于0</font>）。相对温度下不考虑绝对计量起点，所以这里用K和用摄氏度都可以，直接相加就行。<br><img src="/img/blog_page/3427087-20240521163705617-328852131.png"></li></ul></li></ul><h2 id="7-重复精度"><a href="#7-重复精度" class="headerlink" title="7. 重复精度"></a>7. 重复精度</h2><p>重复精度是指一个值重复输入或者输出的次数很多的时候，实际值离重复值直接最大的偏差范围<br><img src="/img/blog_page/3427087-20240521164143136-1305173758.png"></p><h2 id="8-干扰频率抑制"><a href="#8-干扰频率抑制" class="headerlink" title="8. 干扰频率抑制"></a>8. 干扰频率抑制</h2><p>抑制由AC电压电源产生的一些干扰。这些干扰在测热电偶的时候影响会相对大些。设置的时候，设置的频率越高，转换的时间越短</p><ul><li>干扰频率的设置值越大，对干扰的过滤效果越差。因为越大的设置值采样时间越短，所以单位时间内可以采集到更多的点位。400Hz一般用在航空和军工场景。<br><img src="/img/blog_page/3427087-20240521164719222-1487237071.png"></li></ul><h2 id="9-共模干扰和串模干扰"><a href="#9-共模干扰和串模干扰" class="headerlink" title="9. 共模干扰和串模干扰"></a>9. 共模干扰和串模干扰</h2><p><img src="/img/blog_page/3427087-20240521165014694-754406704.png"><br><img src="/img/blog_page/3427087-20240521165038183-1507136183.png"></p><h2 id="10-串扰"><a href="#10-串扰" class="headerlink" title="10. 串扰"></a>10. 串扰</h2><p>因为在工艺上，其实并不可能完全隔绝模块通道和环境条件，也就是说始终会有泄露电流或者干扰耦合。<br><img src="/img/blog_page/3427087-20240521165233767-525227264.png"></p><h2 id="11-模拟量的常见诊断"><a href="#11-模拟量的常见诊断" class="headerlink" title="11. 模拟量的常见诊断"></a>11. 模拟量的常见诊断</h2><ul><li>L+ 缺失</li><li>断路<ul><li>只对电流有效，最电流小于某个值时不可用</li></ul></li><li>短路<ul><li>只对电压有效，最电压小于某个值时不可用</li></ul></li><li>上溢</li><li>下溢</li><li>共模<ul><li>诊断测量输入（-）和模拟地之间的参考点是否超过了允许的最大电位差.</li></ul></li><li>过载<ul><li>环境温度或者模块温度太高</li></ul></li><li>基准节<ul><li>用于热电偶测量，若外部参考端的RTD电阻产生了错误，可能触发该诊断。</li></ul></li></ul><h2 id="12-值状态"><a href="#12-值状态" class="headerlink" title="12. 值状态"></a>12. 值状态</h2><p>用于表征信号输出或者输入的质量状态，QI。没有诊断发生的时候不一定有QI，有QI的时候通道一定不存在诊断信息。</p><h2 id="13-转换时间，循环时间"><a href="#13-转换时间，循环时间" class="headerlink" title="13. 转换时间，循环时间"></a>13. 转换时间，循环时间</h2><p><img src="/img/blog_page/3427087-20240522091342826-2078227175.png"></p><h2 id="14-滤波"><a href="#14-滤波" class="headerlink" title="14. 滤波"></a>14. 滤波</h2><p>滤波用在处理缓慢变化的模拟量（如温度），可降低干扰信号的强度。</p><ul><li>组态中有无，弱，中，强四种滤波方式。越大滤波效果越好<br><img src="/img/blog_page/3427087-20240522091757841-1502827891.png"><br><img src="/img/blog_page/3427087-20240522091820307-340482034.png"></li></ul><h2 id="15-模拟量校准"><a href="#15-模拟量校准" class="headerlink" title="15. 模拟量校准"></a>15. 模拟量校准</h2><ul><li>用户校准</li><li>工厂校准</li></ul><h2 id="16-PTC和RTD的区别"><a href="#16-PTC和RTD的区别" class="headerlink" title="16. PTC和RTD的区别"></a>16. PTC和RTD的区别</h2><ul><li>PTC，基于半导体材料的热敏电阻，阻值和温度变换正相关（负相关的是NTC）</li><li>RTD，基于金属材料如Pt的热敏电阻，它们的阻值随温度的升高而下降。</li><li>相比于PTC, RTD具有更高的精度和稳定性，也有更宽泛的温度范围。但是PTC具有更低的价格，以及比RTD更快的响应时间。</li></ul><h2 id="17-标定和反向标定模拟量值"><a href="#17-标定和反向标定模拟量值" class="headerlink" title="17. 标定和反向标定模拟量值"></a>17. 标定和反向标定模拟量值</h2><ul><li>SCALE,标定。把数字值（-27647~+27648）转换成对应的物理量值（电压电流）<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">#tempScaleWord := SCALE(IN := #value.AQ_digital, HI_LIM := #HI_LIM, LO_LIM := #LO_LIM, BIPOLAR := #BIPOLAR, OUT =&gt; #value.AQ_analog);<br></code></pre></td></tr></table></figure></li><li>UNSCALE,反向标定。把物理量值转换成对应的数字值<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">#tempUNScaleWord := UNSCALE(IN := (#HI_LIM * #statTemperaPara.range), HI_LIM := #HI_LIM, LO_LIM := #LO_LIM, BIPOLAR := #BIPOLAR, OUT =&gt; #statTemperaPara.digitalvalue);<br></code></pre></td></tr></table></figure></li><li>SCALE和UNSCALE的算法规则<ul><li>SCALE:<code>OUT = [((FLOAT (IN) – K1)/(K2–K1)) ∗ (HI_LIM–LO_LIM)] + LO_LIM</code></li><li>UNSCALE:<code>OUT = [((IN–LO_LIM)/(HI_LIM–LO_LIM)) ∗ (K2–K1) ] + K1</code></li><li>在西门子官方指令中，如果单极性，则K1&#x3D;0.0,K2&#x3D;+27648.0;如果双极性，则K1&#x3D;-27648.0.0,K2&#x3D;+27648.0</li><li>在西门子官方指令中，<font color=red>如果IN值超过27648或者小于-27648，其输出结果会被固定为一个最接近输出值的合法值，并输出一个超范围错误状态。</font></li><li><font color=red>如果想输出超过-27648 ~ +27647的值，比如输出-32512 ~ +32511。可以按照以上算法手动计算。</font></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#中使用AutoResetEvent或者ManualResetEvent做线程管理</title>
    <link href="/2024/07/21/C#%E4%B8%AD%E4%BD%BF%E7%94%A8AutoResetEvent%E6%88%96%E8%80%85ManualResetEvent%E5%81%9A%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2024/07/21/C#%E4%B8%AD%E4%BD%BF%E7%94%A8AutoResetEvent%E6%88%96%E8%80%85ManualResetEvent%E5%81%9A%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Task-thread-sync-async-await-WhenAll"><a href="#1-Task-thread-sync-async-await-WhenAll" class="headerlink" title="1. Task&#x2F;thread&#x2F;sync&#x2F;async..await&#x2F;WhenAll"></a>1. Task&#x2F;thread&#x2F;sync&#x2F;async..await&#x2F;WhenAll</h2><p><a href="https://www.cnblogs.com/xiacuncun/p/18177093" title="线程和任务">相关基础知识参见此处链接</a></p><h2 id="2-什么是AutoResetEvent和ManualResetEvent事件"><a href="#2-什么是AutoResetEvent和ManualResetEvent事件" class="headerlink" title="2. 什么是AutoResetEvent和ManualResetEvent事件"></a>2. 什么是AutoResetEvent和ManualResetEvent事件</h2><ul><li>他们都是C#中System.Threading下面的类。用于在多个线程之间进行事件通知和管理。</li><li>他们的管理方法主要是三个：<ul><li>Reset()：关闭</li><li>WaitOne()：阻挡</li><li>Set()：启动</li></ul></li><li>AutoResetEvent和ManualResetEvent的区别<ul><li>自动方法遵循<code>set -&gt; WaitOne -&gt; Reset</code>的流程自动执行，但是自动方法的一个<code>set</code>只能控制一个线程</li><li>手动方法也是遵循<code>set -&gt; WaitOne -&gt; Reset</code>的流程，但是手动方法可以灵活的进行手动控制，一个手动的<code>set</code>可以控制多个同步线程。</li></ul></li></ul><h2 id="3-理解"><a href="#3-理解" class="headerlink" title="3. 理解"></a>3. 理解</h2><ul><li>不管是auto还是manual，都要经历的步骤如下（其他地方看到一个很形象的举例）：<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">车辆过高速收费站时：<br>自动：车闸默认关闭（new <span class="hljs-built_in">AutoResetEvent</span>(false)） -&gt; 车辆到达收费站被阻(waitone()) -&gt; 交费,然后开闸（<span class="hljs-built_in">set</span>()） -&gt; 关闭车闸（<span class="hljs-built_in">reset</span>()）<br><br>手动：车闸打开后（<span class="hljs-built_in">set</span>()），并不会自动关闭，所以如果不去手动关闭（<span class="hljs-built_in">reset</span>()），后面的车会一辆一辆的通过。<br><br>自动可以自动关闭车闸（reset（））,让一次只能过一个车，特点就是自动情况下，同步存在两个同步线程，最终只能执行第一个线程。<br>手动需要手动关闭车闸（reset（））,特点就是手动情况下，如果不手动reset（），所有线程都会被依次执行完毕。<br><span class="hljs-built_in">WaitOne</span>()是否生效取决于有没有Reset（）。如果一开始就是<span class="hljs-built_in">Reset</span>()的，那么WaitOne不会阻挡任何线程执行。<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-AutoResetEvent和ManualResetEvent的初始化状态"><a href="#4-AutoResetEvent和ManualResetEvent的初始化状态" class="headerlink" title="4. AutoResetEvent和ManualResetEvent的初始化状态"></a>4. AutoResetEvent和ManualResetEvent的初始化状态</h2><ul><li><code>new Auto/ManualResetEvent(false):</code>默认阻挡线程。</li><li><code>new Auto/ManualResetEvent(true):</code>默认通过线程。</li><li><code>new Auto/ManualResetEvent(true)</code>中，<code>WaitOne</code>没有任何意义，它阻挡不了线程</li></ul><h2 id="5-auto-manual测试代码"><a href="#5-auto-manual测试代码" class="headerlink" title="5. auto&#x2F;manual测试代码"></a>5. auto&#x2F;manual测试代码</h2><ul><li><p>autoresetevent中的验证代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-keyword">static</span> EventWaitHandle my_task1 = <span class="hljs-keyword">new</span> AutoResetEvent(<span class="hljs-literal">true</span>);<span class="hljs-comment">//默认自动执行</span><br>    <span class="hljs-keyword">static</span> AutoResetEvent my_task2 = <span class="hljs-keyword">new</span> AutoResetEvent(<span class="hljs-literal">false</span>);<span class="hljs-comment">//默认自动阻挡</span><br>    <span class="hljs-comment">//static ManualResetEvent my_task3 = new ManualResetEvent(false);//默认手动阻挡</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//thread</span><br>        <span class="hljs-keyword">new</span> Thread(func1).Start();<br> <br>        <span class="hljs-keyword">new</span> Thread(func3).Start();<br><br>        my_task2.Set();<span class="hljs-comment">//开启，因为func3的调用在func2的上面，所以set先管理到func3。func3能执行，func2不能执行，这表明autoresetevent是典型的队列操作形式</span><br><br>        <span class="hljs-keyword">new</span> Thread(func2).Start();<br><br>        Console.ReadKey();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span>()</span><br>    &#123;<br>        my_task1.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;此时的waitOne不能阻挡线程执行&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span>()</span><br>    &#123;<br>        my_task2.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;此时的waitOne会阻挡线程执行&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func3</span>()</span><br>    &#123;<br>        my_task2.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;此时的waitOne会阻挡线程执行，开启set后通过&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="/img/blog_page/3427087-20240613131939312-1702027830.png"></p></li><li><p>manualresetevent中的验证代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-comment">//static EventWaitHandle my_task1 = new AutoResetEvent(true);//默认自动执行</span><br>    <span class="hljs-comment">//static AutoResetEvent my_task2 = new AutoResetEvent(false);//默认自动阻挡</span><br>    <span class="hljs-keyword">static</span> ManualResetEvent my_task3 = <span class="hljs-keyword">new</span> ManualResetEvent(<span class="hljs-literal">false</span>);<span class="hljs-comment">//默认手动阻挡</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//thread</span><br>        <span class="hljs-keyword">new</span> Thread(func1).Start();<br> <br>        <span class="hljs-keyword">new</span> Thread(func2).Start();<br><br>        <span class="hljs-keyword">new</span> Thread(func3).Start();<br><br>        <span class="hljs-keyword">new</span> Thread(func4).Start();<br><br>        my_task3.Set();<span class="hljs-comment">//手动set一次，执行多个线程</span><br><br>        Timer my_time = <span class="hljs-keyword">new</span> Timer(CloseDown,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2000</span>);<span class="hljs-comment">//2秒计时器</span><br><br>        Console.ReadKey();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func1</span>()</span><br>    &#123;<br>        my_task3.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;手动第一次执行&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func2</span>()</span><br>    &#123;<br>        my_task3.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;手动第二次执行&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func3</span>()</span><br>    &#123;<br>        my_task3.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;手动第三次执行&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">func4</span>()</span><br>    &#123;<br>        Thread.Sleep(<span class="hljs-number">3000</span>);<span class="hljs-comment">//等待3秒，大于reset时间，故不会执行</span><br>        my_task3.WaitOne();<br>        Console.WriteLine(<span class="hljs-string">&quot;不会执行第四次&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 2秒后关闭线程</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;o&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseDown</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> o</span>)</span><br>    &#123; <br>    my_task3.Reset();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="/img/blog_page/3427087-20240613133032119-711665457.png"></p></li></ul><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><ul><li>auto一次只能执行一个线程</li><li>manual开启后可以同步执行超多线程</li><li>AutoResetEvent.Set() &#x3D; ManualResetEvent.Set() + ManualResetEvent.Reset();</li><li>多个线程的暂停，继续，可以选择Manual。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c#</tag>
      
      <tag>winform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用西门子DQ模块控制移位寄存器，模拟串行通信</title>
    <link href="/2024/07/21/%E5%88%A9%E7%94%A8%E8%A5%BF%E9%97%A8%E5%AD%90DQ%E6%A8%A1%E5%9D%97%E6%8E%A7%E5%88%B6%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%8C%E6%A8%A1%E6%8B%9F%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/"/>
    <url>/2024/07/21/%E5%88%A9%E7%94%A8%E8%A5%BF%E9%97%A8%E5%AD%90DQ%E6%A8%A1%E5%9D%97%E6%8E%A7%E5%88%B6%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%8C%E6%A8%A1%E6%8B%9F%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><ul><li>以前了解过串行通信的方法但是没有详细了解过具体实现。趁着手上有的一堆破铜烂铁尝试自己去实现一个最简单的串行控制。<br>目的是通过移位寄存器的不同位的表达，达到2*2&#x3D;4个的继电器管断组合，达到切换矩阵的目的。<br>这里只记录一下程序实现，不记录硬件电路。</li></ul><h2 id="2-材料"><a href="#2-材料" class="headerlink" title="2. 材料"></a>2. 材料</h2><ul><li>移位寄存器：SN74AHC594</li><li>固态继电器：4个</li><li>电源模块及外围器件，若干</li><li>CPU1500+DQ16</li></ul><h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h2><ul><li>选择的是一个8位移位寄存器，当响应bit等于1的时候，动作相应的继电器，组合应用。</li><li>移位寄存器的时钟（CLOCK）上升沿的时候会把对应的数据（DATA）状态传出（左移）。</li><li>8位数据传递完成后，片选信号（CS）拉高，完成一次数据传递过程。片选信号不用依靠时钟传递。</li></ul><h2 id="4-程序过程"><a href="#4-程序过程" class="headerlink" title="4. 程序过程"></a>4. 程序过程</h2><ul><li><p>写入数据选择</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//for 2 - 2 switch module</span><br><br><span class="hljs-comment">//1.select number</span><br>IF #IO_enable AND NOT #IO_reset THEN<br>    #statSwitchNbr := #I_switch_nbr;<br>END_IF;<br><br>CASE #statSwitchNbr OF<br>        <span class="hljs-comment">//default</span><br>    <span class="hljs-number">0</span>:<br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">00000000</span>;<br>        <span class="hljs-comment">//normal</span><br>    <span class="hljs-number">10</span>:<br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">01100010</span>;<br>        <span class="hljs-comment">//cross</span><br>    <span class="hljs-number">20</span>:<br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">00010100</span>;<br>        <span class="hljs-comment">//short</span><br>    <span class="hljs-number">30</span>:<br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">00000110</span>;<br>        <span class="hljs-comment">//short</span><br>    <span class="hljs-number">40</span>:<br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">01110000</span>;<br>        <span class="hljs-comment">//wire break</span><br>    <span class="hljs-number">50</span>:<br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">00000000</span>;<br>    ELSE<br>        <span class="hljs-comment">//others</span><br>        #statShiftregister := <span class="hljs-number">2</span>#<span class="hljs-number">11111111</span>;<br>END_CASE;<br><span class="hljs-comment">//#tmpRel := Serialize(SRC_VARIABLE := #statShiftregister, DEST_ARRAY =&gt; #statShiftArr, POS := #tmpPos);</span><br>#statShiftArr[<span class="hljs-number">7</span>] := #statShiftregister.%X0;<br>#statShiftArr[<span class="hljs-number">6</span>] := #statShiftregister.%X1;<br>#statShiftArr[<span class="hljs-number">5</span>] := #statShiftregister.%X2;<br>#statShiftArr[<span class="hljs-number">4</span>] := #statShiftregister.%X3;<br>#statShiftArr[<span class="hljs-number">3</span>] := #statShiftregister.%X4;<br>#statShiftArr[<span class="hljs-number">2</span>] := #statShiftregister.%X5;<br>#statShiftArr[<span class="hljs-number">1</span>] := #statShiftregister.%X6;<br>#statShiftArr[<span class="hljs-number">0</span>] := #statShiftregister.%X7;<br></code></pre></td></tr></table></figure></li><li><p>时钟信号</p><ul><li>按照以前做的两个定时器实现高低电平切换的方法实现了此处的时钟信号<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//2. clock<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">data_clock</span><span class="hljs-params">(<span class="hljs-variable">In_switchtime</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">T</span>#1000<span class="hljs-variable">ms</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">In_startAlternate</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">IO_enable</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">Out_switchtime_up</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statClock_up</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">Out_switchtime_Down</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statClock_down</span>)</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>数据写入信号</p><ul><li>时钟信号的低电平半区内，等待一小段时间后写入数据（等待是为了数据写入稳定）。写入数据后，时钟信号的高电平脉冲会触发数据写进移位寄存器内。一个循环结束。<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//3. shift register<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">statClock_down</span>,</span><br><span class="hljs-params">           <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">T</span>#500<span class="hljs-variable">ms</span>)</span>;<br><br>//4. output data<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span> THEN<br>    IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span>.Q AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[0] THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">O_Data</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[<span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span>];<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> + 1;<br>    END_IF;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[0] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span>.Q;<br>END_IF;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>数据发送完成后，片选信号激活</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//6. output cs<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_cs</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statClock_up</span>,</span><br><span class="hljs-params">         <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">T</span>#100<span class="hljs-variable">MS</span>)</span>;<br><br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> &gt; 7 AND <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_cs</span>.Q THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statCS</span> := true;<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">O_cs</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statCS</span>;<br></code></pre></td></tr></table></figure></li><li><p>完成数据发生，以及复位功能实现</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//7. finish<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_finish</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statCS</span>,</span><br><span class="hljs-params">             <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">t</span>#100<span class="hljs-variable">MS</span>)</span>;<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_finish</span>.Q THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statCS</span> := false;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> := false;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span><span class="hljs-punctuation">:</span>=false;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> := 0;<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span>);<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">time_cs</span>);<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">time_finish</span>);<br>END_IF;<br>    <br>//8. reset<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span> AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[2] THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statSwitchNbr</span> := 0;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> := false;<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[2] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span>;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_reset</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">IO_reset</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">t</span>#50<span class="hljs-variable">ms</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">Q</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">statReset</span>)</span>;<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">statReset</span> THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> := true;<br>END_IF;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-整体代码如下"><a href="#5-整体代码如下" class="headerlink" title="5. 整体代码如下"></a>5. 整体代码如下</h2><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//for 2 - 2 switch module<br><br>//1.select number<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span> THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statSwitchNbr</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">I_switch_nbr</span>;<br>END_IF;<br><br>CASE <span class="hljs-punctuation">#</span><span class="hljs-keyword">statSwitchNbr</span> OF<br>        //default<br>    0:<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>00000000;<br>        //normal<br>    10:<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>01100010;<br>        //cross<br>    20:<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>00010100;<br>        //short<br>    30:<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>00000110;<br>        //short<br>    40:<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>01110000;<br>        //wire break<br>    50:<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>00000000;<br>    ELSE<br>        //others<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span> := 2<span class="hljs-punctuation">#</span>11111111;<br>END_CASE;<br>//<span class="hljs-punctuation">#</span><span class="hljs-keyword">tmpRel</span> := Serialize(SRC_VARIABLE := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>, DEST_ARRAY =&gt; <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>, POS := <span class="hljs-punctuation">#</span><span class="hljs-keyword">tmpPos</span>);<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[7] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X0;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[6] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X1;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[5] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X2;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[4] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X3;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[3] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X4;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[2] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X5;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[1] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X6;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[0] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftregister</span>.%X7;<br><br><br>//2. clock<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">data_clock</span><span class="hljs-params">(<span class="hljs-variable">In_switchtime</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">T</span>#1000<span class="hljs-variable">ms</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">In_startAlternate</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">IO_enable</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">Out_switchtime_up</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statClock_up</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">Out_switchtime_Down</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>#<span class="hljs-variable">statClock_down</span>)</span>;<br><br>//3. shift register<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">statClock_down</span>,</span><br><span class="hljs-params">           <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">T</span>#500<span class="hljs-variable">ms</span>)</span>;<br><br>//4. output data<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span> THEN<br>    IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span>.Q AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[0] THEN<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">O_Data</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statShiftArr</span>[<span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span>];<br>        <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> + 1;<br>    END_IF;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[0] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span>.Q;<br>END_IF;<br><br>//5. output clock<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">O_clk</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statClock_up</span>;<br><br>//6. output cs<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_cs</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statClock_up</span>,</span><br><span class="hljs-params">         <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">T</span>#100<span class="hljs-variable">MS</span>)</span>;<br><br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> &gt; 7 AND <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_cs</span>.Q THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statCS</span> := true;<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">O_cs</span> := <span class="hljs-punctuation">#</span><span class="hljs-keyword">statCS</span>;<br><br>//7. finish<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_finish</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span>#<span class="hljs-variable">statCS</span>,</span><br><span class="hljs-params">             <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">t</span>#100<span class="hljs-variable">MS</span>)</span>;<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">time_finish</span>.Q THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statCS</span> := false;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> := false;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span><span class="hljs-punctuation">:</span>=false;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statData_count</span> := 0;<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">time_data</span>);<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">time_cs</span>);<br>    RESET_TIMER(<span class="hljs-punctuation">#</span><span class="hljs-keyword">time_finish</span>);<br>END_IF;<br>    <br>//8. reset<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span> AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[2] THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">statSwitchNbr</span> := 0;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> := false;<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">statPulserArr</span>[2] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_reset</span>;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">time_reset</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> #<span class="hljs-variable">IO_reset</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">t</span>#50<span class="hljs-variable">ms</span>,</span><br><span class="hljs-params">            <span class="hljs-variable">Q</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> #<span class="hljs-variable">statReset</span>)</span>;<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">statReset</span> THEN<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">IO_enable</span> := true;<br>END_IF;<br></code></pre></td></tr></table></figure><h2 id="6-调试过程"><a href="#6-调试过程" class="headerlink" title="6. 调试过程"></a>6. 调试过程</h2><ul><li><p>刚开始的脉冲，如图标记出来的其实是被扔掉的。程序里面一共会记录8个上升脉冲，但是标记的这一个被先进先出挤掉了。当然针对这种情况，也可以通过程序把时钟的第一个上升沿过滤掉，但是没有必要，因为这个数据本身就会被移位寄存器扔掉，移位寄存器只记录了从最后一个数据开始倒数8位数据长度。</p></li><li><p>按照程序的写法，此时发送的数据是<code>2#01100010</code>，所以观察的时钟的每一个上升沿，按照时间顺序应该是<code>0-&gt;1-&gt;1-&gt;0-&gt;0-&gt;0-&gt;1-&gt;0</code>。<br><img src="/img/blog_page/3427087-20240606130321900-53405143.png"></p></li><li><p>结束时候片选信号如下，因为enable结束的时刻把所有过程信号都清零了，所以最后一个时钟高电平很短。<br><img src="/img/blog_page/3427087-20240606130811545-1518134440.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何导出PLC的服务数据</title>
    <link href="/2024/07/21/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BAPLC%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/07/21/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BAPLC%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么叫服务数据"><a href="#1-什么叫服务数据" class="headerlink" title="1. 什么叫服务数据"></a>1. 什么叫服务数据</h2><ul><li>服务数据，service data：除了诊断缓冲区的内容外，服务数据还包含有关CPU内部状态的更多信息。如果CPU发生故障且无法通过其他方法解决的时候，则用户可以导出服务数据发送给西门子服务与支持团队，便于服务与支持人员快速分析问题原因</li></ul><h2 id="2-如何读取服务数据"><a href="#2-如何读取服务数据" class="headerlink" title="2. 如何读取服务数据"></a>2. 如何读取服务数据</h2><ul><li><p>MFCT工具读取，<a href="https://support.industry.siemens.com/cs/document/109773881/" title="MFCT download">MultifiedBus tool download</a></p></li><li><p>SIMATIC存储卡读取，采用该方式很复杂，对格式要求很高，在有其他办法的时候尽量避免这种方法，<a href="https://support.industry.siemens.com/cs/mdm/59191792/" title="SIMATIC Card">SIMATIC Card save service data</a></p></li><li><p>classsic Step7读取，在1500系统上一般用不上,方法如下<a href="https://support.industry.siemens.com/cs/mdm/59191792/" title="step7">Step7 save service data</a></p></li><li><p>web读取,在web浏览器的地址栏中，按照<code>https://&lt;CPU IP Address&gt;/save_service_data</code>格式输入url（前提条件是使能并登录了web）。</p><ul><li>如下图所示，点击<code>save service data</code>按钮，浏览器会自动下载服务数据到本地</li><li>仅包含以<code>&lt;订货号&gt;&lt;序列号&gt;&lt;时间戳&gt;.dmp</code>命名规则的文件。<br><img src="/img/blog_page/3427087-20240516101524316-1362539993.png"><br><img src="/img/blog_page/3427087-20240516101915242-2128958835.png"></li></ul></li><li><p>SIMATIC Automation Tool读取，<a href="https://support.industry.siemens.com/cs/document/98161300/" title="SIMATIC automation tool">SIMATIC automation tool download</a>。下面将使用automation tool 详细描述获取service data过程</p></li></ul><h2 id="3-使用simatic-automation-tool获取service-data"><a href="#3-使用simatic-automation-tool获取service-data" class="headerlink" title="3. 使用simatic automation tool获取service data"></a>3. 使用simatic automation tool获取service data</h2><ul><li>下载automation tool 并授权，不授权有21天试用期</li><li>双击打开后，选择网卡，选.Auto的，搜索范围广一些<br><img src="/img/blog_page/3427087-20240516103359663-997663276.png"></li><li>选择扫描网络按钮<br><img src="/img/blog_page/3427087-20240516103435172-90177096.png"></li><li>扫描完成后结果如下<br><img src="/img/blog_page/3427087-20240516103548671-738110612.png"></li><li>勾选CPU复选框<ul><li><del>实测1500上，模块级别和IM级别暂时都不支持直接读出服务数据。服务数据一般也是从PLC打包捞出来的。</del><br><img src="/img/blog_page/3427087-20240516104708826-278997077.png"></li></ul></li><li>选择“操作”，“诊断”，“读服务数据”，“继续”。等待服务数据上传完成即可。<br><img src="/img/blog_page/3427087-20240516105011128-293629244.png"><br><img src="/img/blog_page/3427087-20240516105109514-1703357622.png"></li><li>服务数据存储位置<ul><li>“选项”，“设置”，“服务数据”</li><li>在该路径下找到导出的数据即可<br><img src="/img/blog_page/3427087-20240516105227879-371618962.png"></li></ul></li><li>服务数据包含内容<br><img src="/img/blog_page/3427087-20240516105336994-1704486798.png"></li></ul><h2 id="4-automation-tool帮助"><a href="#4-automation-tool帮助" class="headerlink" title="4. automation tool帮助"></a>4. automation tool帮助</h2><p><img src="/img/blog_page/3427087-20240516105439447-802316250.png"></p>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>海康威视工业相机通过MVS修改IP</title>
    <link href="/2024/07/21/%E6%B5%B7%E5%BA%B7%E5%A8%81%E8%A7%86%E5%B7%A5%E4%B8%9A%E7%9B%B8%E6%9C%BA%E9%80%9A%E8%BF%87MVS%E4%BF%AE%E6%94%B9IP/"/>
    <url>/2024/07/21/%E6%B5%B7%E5%BA%B7%E5%A8%81%E8%A7%86%E5%B7%A5%E4%B8%9A%E7%9B%B8%E6%9C%BA%E9%80%9A%E8%BF%87MVS%E4%BF%AE%E6%94%B9IP/</url>
    
    <content type="html"><![CDATA[<ul><li><p>相机型号：<br><img src="/img/blog_page/3427087-20240531161202120-196506597.png"></p></li><li><p>修改IP </p><ul><li><p>点开MVS软件后，左侧GigE会出现网卡的静态IP，如图<br><img src="/img/blog_page/3427087-20240531161338918-1775709132.png"></p></li><li><p>想要修改相机IP，首先需要修改电脑的网络设置，设置成自己想要的IP段</p></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240531161511667-1777089124.png"></p><ul><li><p>修改好之后，相机的图标会变为黄色感叹号，表示不能连接<br><img src="/img/blog_page/3427087-20240531161641322-364648042.png"></p></li><li><p>此时双击相机，则可设置IP（IP段始终和电脑网卡的IP段保持一致，不能跨段设置）<br><img src="/img/blog_page/3427087-20240531161748414-1767450491.png"></p></li><li><p>查看已经保存进相机的IP设置，<code>传输层控制</code>-<code>GEV静态IP地址</code>（也能在这修改IP）。修修改的IP可以直接保存进相机Flash,重启后依旧存在。<br><img src="/img/blog_page/3427087-20240531162030331-267862728.png"></p></li><li><p>第一次打开相机整体画面偏黑和偏模糊怎么调节？</p><ul><li>除了调节焦距和光圈。还需调节<code>自动曝光</code>选项，任意选择一种曝光模式，只要更改了这里，效果会立即变好<br><img src="/img/blog_page/3427087-20240531162417817-268116663.png"></li></ul></li><li><p>调节采集速率</p><ul><li><code>采集帧率</code>，数值越大反应越快<br><img src="/img/blog_page/3427087-20240531164916946-240259659.png"></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>C sharp</category>
      
      <category>industrail camera</category>
      
    </categories>
    
    
    <tags>
      
      <tag>海康威视</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CP341+CM1241通过ASCII（自由口）协议通信</title>
    <link href="/2024/07/21/CP341+CM1241%E9%80%9A%E8%BF%87ASCII%EF%BC%88%E8%87%AA%E7%94%B1%E5%8F%A3%EF%BC%89%E5%8D%8F%E8%AE%AE%E9%80%9A%E4%BF%A1/"/>
    <url>/2024/07/21/CP341+CM1241%E9%80%9A%E8%BF%87ASCII%EF%BC%88%E8%87%AA%E7%94%B1%E5%8F%A3%EF%BC%89%E5%8D%8F%E8%AE%AE%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-硬件配置"><a href="#1-硬件配置" class="headerlink" title="1. 硬件配置"></a>1. 硬件配置</h2><ul><li>300侧<br><img src="/img/blog_page/3427087-20240625162501259-364815819.png"><br><img src="/img/blog_page/3427087-20240625162531681-464037467.png"></li><li>1200侧<br><img src="/img/blog_page/3427087-20240625162614516-1636168220.png"><br><img src="/img/blog_page/3427087-20240625162630644-122187666.png"></li></ul><p>对于以什么方式结束所接收的消息，此处是默认的时间结束。</p><h2 id="2-程序"><a href="#2-程序" class="headerlink" title="2. 程序"></a>2. 程序</h2><ul><li><p>300侧<br><code>EN_R</code>管脚可以常1；<br>LADDR是输入输出IO地址；<br>DB_NO填发送&#x2F;接收数据DB号；<br>DBB_NO填发送&#x2F;接收数据DB起始地址；<br><font color=green>图一左边<code>通信出错时的重连逻辑</code>，这一类重连思路对处理通信类程序提高稳定性作用很大。一般思路是当出现连接出错，连接超时或者连接没有反馈时，利用计时器，超时重置<code>request</code>，反复请求，当然请求次数如果过多也不能连接上的话，可以考虑做一个重连次数或者超时报警</font>；其余二进制魔数和此处PtP连接无关，不用在意。<br><img src="/img/blog_page/3427087-20240625163156251-1996870992.png"><br><img src="/img/blog_page/3427087-20240625163630393-912655381.png"></p></li><li><p>1200侧<br>send请求在自动程序中指定；<br><code>PORT</code>填硬件标识符<br><code>BUFFER</code>处拖整个DB过去或者DB里面的地址片段过去都没有区别（前提是所用DB里面的所有内存都被收发过程使用到）<br>SEND_REQ也可以做重连逻辑<br>对于<code>CM1241</code>这个模块而言，连续收发数据量过大的话可能出现缓存堆积，从而导致数据丢失或出错，可以使用指令<code>RCV_RST</code>来清除缓存。<br><img src="/img/blog_page/3427087-20240625164437155-951511556.png"><br><img src="/img/blog_page/3427087-20240625164455737-301579879.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PLC的开放式用户协议，TSAP（含S7300和S71200TCP连接实例）</title>
    <link href="/2024/07/21/PLC%E7%9A%84%E5%BC%80%E6%94%BE%E5%BC%8F%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE%EF%BC%8CTSAP%EF%BC%88%E5%90%ABS7300%E5%92%8CS71200TCP%E8%BF%9E%E6%8E%A5%E5%AE%9E%E4%BE%8B%EF%BC%89/"/>
    <url>/2024/07/21/PLC%E7%9A%84%E5%BC%80%E6%94%BE%E5%BC%8F%E7%94%A8%E6%88%B7%E5%8D%8F%E8%AE%AE%EF%BC%8CTSAP%EF%BC%88%E5%90%ABS7300%E5%92%8CS71200TCP%E8%BF%9E%E6%8E%A5%E5%AE%9E%E4%BE%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="0-向导"><a href="#0-向导" class="headerlink" title="0. 向导"></a>0. 向导</h2><p><a href="#section">只想看S7-300和S7-1200 TCP连接实例的朋友请直接点击这里</a></p><h2 id="1-OUC"><a href="#1-OUC" class="headerlink" title="1. OUC"></a>1. OUC</h2><p>开放式用户协议，包括ISO，ISO-on-TCP，TCP&#x2F;IP，UDP四种。西门子PLC中有多种不同的方式建立连接。</p><h2 id="2-在硬件组态中建立TCP通信"><a href="#2-在硬件组态中建立TCP通信" class="headerlink" title="2. 在硬件组态中建立TCP通信"></a>2. 在硬件组态中建立TCP通信</h2><ul><li>打开硬件组图，网络视图<br><img src="/img/blog_page/3427087-20240511160920321-291085229.png"></li><li>添加新连接<br><img src="/img/blog_page/3427087-20240511161137748-1460136048.png"></li><li>填入本地ID，关于本地ID：**<font color=red>针对1513实测过,ID的取值范围从16#01到16#999，但是16#01-16#99大概率被系统占用了，可用范围从16#100开始。西门子本身没有规定ID必须从多少开始，所以在允许范围类，随便填。一条TCP连接（或者一个通信设备之间）分配一个唯一的ID</font>**<ul><li>主动连接：如果本地对象是客户端就勾选主动建立连接，如果做服务器可以不用勾选</li><li>添加后关闭页面</li></ul></li></ul><p><img src="/img/blog_page/3427087-20240511163232908-1740416681.png"></p><ul><li>设置伙伴参数<ul><li><strong><font color=red>本地端口和伙伴端口可以不一致，也可以一致，本地端口甚至可以不用填写。端口设定范围从1-65535，也可以自由定义。一般约定从2000开始(ipv4)</font></strong></li><li>伙伴设备可以选择不指定</li></ul></li></ul><p><img src="/img/blog_page/3427087-20240511164312031-920183375.png"></p><ul><li>网络视图的连接建立好之后就可以在程序中调用<code>TSEND</code>和<code>TRCV</code>指令用作收发数据了。<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//ID就是在网络视图里面设置的ID</span><br><span class="hljs-string">&quot;TSEND_DB&quot;</span>.TSEND(REQ:=<span class="hljs-string">&quot;Tag_1&quot;</span>,<br><span class="hljs-symbol">                 ID:</span>=<span class="hljs-number">16</span><span class="hljs-meta">#100,</span><br><span class="hljs-symbol">                 DATA:</span>=_variant_inout_)<span class="hljs-punctuation">;</span><br><br><span class="hljs-string">&quot;TRCV_DB&quot;</span>.TRCV(EN_R:=<span class="hljs-string">&quot;Tag_2&quot;</span>,<br><span class="hljs-symbol">               ID:</span>=<span class="hljs-number">16</span><span class="hljs-meta">#100,</span><br><span class="hljs-symbol">               DATA:</span>=_variant_inout_)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure></li><li>在硬件组态里面建立TCP连接的方式会在“系统资源”里面使用一条OUC资源，连接在线时也能在线看到连接详情</li></ul><h2 id="2-参数化的方式建立TCP连接"><a href="#2-参数化的方式建立TCP连接" class="headerlink" title="2. 参数化的方式建立TCP连接"></a>2. 参数化的方式建立TCP连接</h2><ul><li><p>在这种方式中，不需要在硬件组态里面配置连接，它在资源占用上是动态化的，“系统资源”里面体现不出来，但是在线的时候看得到连接详情</p></li><li><p>TCON连接参数设置</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs leaf">&quot;_ShareDB&quot;.FB110.tcon.I_req := NOT &quot;_ShareDB&quot;.FB110.tdiscon.I_req;<br><br>&quot;_ShareDB&quot;.FB110.tcon.I_id := 16<span class="hljs-punctuation">#</span>100;//ID<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.InterfaceID := 64;//Local~PROFINET_接口，hw_Interface<br><br>//connect参数，ID,Type,连接方式<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.ID := 16<span class="hljs-punctuation">#</span>100;//ID<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.connType := 11;//11 TCP,19 UDP<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.activeEst := 1;//=1：建立主动连接 =0：建立被动连接<br><br>//伙伴端点IP地址<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.reAddress[0] := 192;<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.reAddress[1] := 168;<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.reAddress[2] := 0;<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.reAddress[3] := 241;<br><br>//远程和本地端口<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.rePort := 6688;//ipv4 0-65535<br>&quot;_ShareDB&quot;.FB110.tcon.IO_connect.LoPort := 2000;//ipv4 1-49151<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">TCON_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tcon</span>.<span class="hljs-variable">I_req</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ID</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tcon</span>.<span class="hljs-variable">I_id</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">DONE</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tcon</span>.<span class="hljs-variable">O_done</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">BUSY</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tcon</span>.<span class="hljs-variable">O_busy</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ERROR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tcon</span>.<span class="hljs-variable">O_error</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">STATUS</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tcon</span>.<span class="hljs-variable">O_status</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">CONNECT</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">IO_connect</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>关于connect参数的数据类型</p><ul><li>TCP_IP_v4结构如下：<br><img src="/img/blog_page/3427087-20240511170230936-68911964.png"></li><li>对于ISO-on-TCP,使用TCP_IP_RFC结构<br><img src="/img/blog_page/3427087-20240511170539898-442979798.png"></li><li>其他结构参见帮助</li></ul></li><li><p>发送指令，异步指令</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//TSEND<br>&quot;_ShareDB&quot;.FB110.tsend.I_id := 16<span class="hljs-punctuation">#</span>100;<br>&quot;_ShareDB&quot;.FB110.tsend.I_len := 10;<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">TSEND_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">I_req</span>,</span><br><span class="hljs-params">                <span class="hljs-variable">ID</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">I_id</span>,</span><br><span class="hljs-params">                <span class="hljs-variable">LEN</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">I_len</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>处理长度，1200<span class="hljs-operator">=</span>8.192<span class="hljs-variable">kb</span>，1500<span class="hljs-operator">=</span>65.536<span class="hljs-variable">kb</span>,<span class="hljs-variable">CM1542</span><span class="hljs-operator">=</span>240<span class="hljs-variable">bytes</span></span><br><span class="hljs-params">                <span class="hljs-variable">DONE</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">O_done</span>,</span><br><span class="hljs-params">                <span class="hljs-variable">BUSY</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">O_busy</span>,</span><br><span class="hljs-params">                <span class="hljs-variable">ERROR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">O_err</span>,</span><br><span class="hljs-params">                <span class="hljs-variable">STATUS</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">O_status</span>,</span><br><span class="hljs-params">                <span class="hljs-variable">DATA</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tsend</span>.<span class="hljs-variable">IO_data</span>)</span>;//数据指针，发送端和接收端的数据格式要一致<br></code></pre></td></tr></table></figure></li><li><p>接收指令，<code>TRCV</code>为异步指令</p><ul><li>ADHOC接口用于指定TCP协议下是否启动<code>动态长度接收</code>功能（对ISO-on-TCP或者FDL无效）；ADHOC&#x3D;0，按length指定的长度接收数据；ADHOC&#x3D;1，至少会接收到一个可用字节数据<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//TRCV<br>&quot;_ShareDB&quot;.FB110.trcv.I_R := TRUE;<br>&quot;_ShareDB&quot;.FB110.trcv.I_id := 16<span class="hljs-punctuation">#</span>100;<br>&quot;_ShareDB&quot;.FB110.trcv.I_len := 10;<br>&quot;_ShareDB&quot;.FB110.trcv.I_ADHOC := 0;<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">TRCV_Instance</span><span class="hljs-params">(<span class="hljs-variable">EN_R</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">I_R</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>使能接收</span><br><span class="hljs-params">               <span class="hljs-variable">ID</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">I_id</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">LEN</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">I_len</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>在<span class="hljs-variable">ADHOC</span><span class="hljs-operator">=</span>0时指定长度</span><br><span class="hljs-params">               <span class="hljs-variable">ADHOC</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">I_ADHOC</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>指定以固定长度接收或者动态长度接收</span><br><span class="hljs-params">               <span class="hljs-variable">NDR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">O_NDR</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>作业过程标志位 <span class="hljs-operator">=</span>1，<span class="hljs-variable">Done</span></span><br><span class="hljs-params">               <span class="hljs-variable">BUSY</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">O_busy</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ERROR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">O_err</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">STATUS</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">O_status</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">RCVD_LEN</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">O_len</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">DATA</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">trcv</span>.<span class="hljs-variable">IO_data</span>)</span>;//接收到的数据，格式和发送端一致<br></code></pre></td></tr></table></figure></li></ul></li><li><p>断开连接</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//TDISCON<br>&quot;_ShareDB&quot;.FB110.tdiscon.I_id := 16<span class="hljs-punctuation">#</span>100;<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">TDISCON_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tdiscon</span>.<span class="hljs-variable">I_req</span>,</span><br><span class="hljs-params">                  <span class="hljs-variable">ID</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tdiscon</span>.<span class="hljs-variable">I_id</span>,<span class="hljs-operator">/</span><span class="hljs-operator">/</span>要终止作业的<span class="hljs-variable">ID</span></span><br><span class="hljs-params">                  <span class="hljs-variable">DONE</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tdiscon</span>.<span class="hljs-variable">O_done</span>,</span><br><span class="hljs-params">                  <span class="hljs-variable">BUSY</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tdiscon</span>.<span class="hljs-variable">O_busy</span>,</span><br><span class="hljs-params">                  <span class="hljs-variable">ERROR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tdiscon</span>.<span class="hljs-variable">O_error</span>,</span><br><span class="hljs-params">                  <span class="hljs-variable">STATUS</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_ShareDB&quot;</span>.<span class="hljs-variable">FB110</span>.<span class="hljs-variable">tdiscon</span>.<span class="hljs-variable">O_status</span>)</span>;<br></code></pre></td></tr></table></figure></li><li><p>各个指令的”属性”-“组态”-“块参数”</p><ul><li>如图，这些块参数其实就是指令接口填写的内容，接口填写完成后这里会自动生成相应的变量符号名<br><img src="/img/blog_page/3427087-20240512002850593-1590451675.png"></li></ul></li><li><p><font color=red>这个方法有个特点，所有的参数都可以动态化，动态配置，由程序更改，更好的实现自动化。但是它看不了也用不了TCON关于“属性”-“组态”-“连接参数”里面的静态设置。</font></p></li></ul><h2 id="3-参数化但使用”属性”-“组态”-“连接参数”"><a href="#3-参数化但使用”属性”-“组态”-“连接参数”" class="headerlink" title="3. 参数化但使用”属性”-“组态”-“连接参数”"></a>3. 参数化但使用”属性”-“组态”-“连接参数”</h2><ul><li>不同于第二种方法，这是一种介于第一种和第二种方法之间的方法，它既需要填写常量的ID，IP等等信息，但是又不会在“系统资源”里显示出来，属于参数化方法。</li><li>依旧使用TCON,TSEND,TRCV,TDISCON等方法来做程序</li><li>如图，TCON的参数不用在程序里填写，在“属性”-“组态”-“连接参数”里定义，定义为固定的设置<br><img src="/img/blog_page/3427087-20240512004653440-1719905333.png"></li></ul><h2 id="4-OUC相关指令以及它们的区别和应用场景"><a href="#4-OUC相关指令以及它们的区别和应用场景" class="headerlink" title="4. OUC相关指令以及它们的区别和应用场景"></a>4. OUC相关指令以及它们的区别和应用场景</h2><p><img src="/img/blog_page/3427087-20240511170638899-1236707875.png"><br><img src="/img/blog_page/3427087-20240512002438188-807718440.png"></p><h2 id="5-关于TSAP的概念"><a href="#5-关于TSAP的概念" class="headerlink" title="5. 关于TSAP的概念"></a>5. 关于TSAP的概念</h2><ul><li><p>TSAP（Transport Server Access Point 传输服务访问点）是用于ISO-on-TCP上的两个参数，有本地TSAP和伙伴TSAP。用2个字节表示<br><img src="/img/blog_page/3427087-20240512010717362-68626940.png"></p></li><li><p>本地TSAP和远程TSAP可以相同，因为通过不同的MAC地址建立的连接是唯一的，但如果要在两个站之间建立多个连接，则远程TSAP和本地TSAP必须不同。<br><img src="/img/blog_page/3427087-20240512005035553-1179741087.png"></p></li><li><p>TSAP是ISO传输连接中的相关概念，ISO传输连接的过程如下:<br><img src="/img/blog_page/3427087-20240512005410756-1255528561.png"></p></li><li><p>TSAP的结构</p><ul><li>TSAP(ASC II)</li><li>TSAP-ID（Hex）（系统自动生成）<br><img src="/img/blog_page/3427087-20240512010243740-1205108135.png"></li></ul></li><li><p>TSAP的含义<br><img src="/img/blog_page/3427087-20240512091629794-2026117979.png"><br><img src="/img/blog_page/3427087-20240512091922336-1365018284.png"><br><img src="/img/blog_page/3427087-20240512091941875-2088334463.png"></p></li><li><p>TSAP分配案例（如何填写TSAP）</p><ul><li>在S7协议下的规定<ul><li>对于S7-1500CPU:<code>&quot;SIMATIC-ACC&quot;&lt;nnn&gt;&lt;mm&gt;，nnn = 本地 ID，mm = 任何值</code></li><li>对于S7-300&#x2F;400：<code>&lt;xx&gt;.&lt;yz&gt;，xx = 连接资源号，y = 机架号，z = 插槽号</code></li><li>连接资源号由配置界面填入的<code>连接资源（十六进制）</code>确定<br><img src="/img/blog_page/3427087-20240512092629037-913907065.png"><br><img src="/img/blog_page/3427087-20240512092659216-268447606.png"><br><img src="/img/blog_page/3427087-20240512092727780-968042234.png"><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs armasm">请参见不同连接组态的以下 TSAP 示例<br>两个 <span class="hljs-built_in">S7</span>-<span class="hljs-number">1200</span> CPU（固件版本均为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span>）之间的连接：<br><span class="hljs-symbol">S7</span>-<span class="hljs-number">1200</span> CPU“A”（固件版本为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span>，本地 ID 为 <span class="hljs-number">100</span>）：<br><span class="hljs-symbol">TSAP</span>： SIMATIC-ACC10001<br><span class="hljs-symbol">S7</span>-<span class="hljs-number">1200</span> CPU“B”（固件版本为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span>，本地 ID 为 <span class="hljs-number">5</span>AE）：<br><span class="hljs-symbol">TSAP</span>： SIMATIC-ACC5AE01<br>两个 <span class="hljs-built_in">S7</span>-<span class="hljs-number">1200</span> CPU（固件版本分别为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span> 和 <span class="hljs-built_in">V1</span>.<span class="hljs-number">0</span>）之间的连接：<br><span class="hljs-symbol">S7</span>-<span class="hljs-number">1200</span> CPU（固件版本为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span>，本地 ID 为 <span class="hljs-number">1</span>FF）：<br><span class="hljs-symbol">TSAP</span>： SIMATIC-ACC1FF01<br><span class="hljs-symbol">S7</span>-<span class="hljs-number">1200</span> CPU，固件版本为 <span class="hljs-built_in">V1</span>.<span class="hljs-number">0</span>（机架 <span class="hljs-number">0</span>，插槽 <span class="hljs-number">1</span>，连接资源 <span class="hljs-number">03</span>）：<br><span class="hljs-symbol">TSAP</span>： <span class="hljs-number">03</span>.<span class="hljs-number">01</span><br><span class="hljs-symbol">S7</span>-<span class="hljs-number">1200</span> CPU（固件版本为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span>）与 <span class="hljs-built_in">S7</span>-<span class="hljs-number">300</span>/<span class="hljs-number">400</span> CPU 之间的连接：<br><span class="hljs-symbol">S7</span>-<span class="hljs-number">1200</span> CPU，固件版本为 <span class="hljs-built_in">V2</span>.<span class="hljs-number">0</span>（机架 <span class="hljs-number">0</span>，插槽 <span class="hljs-number">1</span>，连接资源 <span class="hljs-number">12</span>）：<br><span class="hljs-symbol">TSAP</span>： <span class="hljs-number">12</span>.<span class="hljs-number">01</span><br><span class="hljs-symbol">S7</span>-<span class="hljs-number">300</span>/<span class="hljs-number">400</span> CPU（机架 <span class="hljs-number">0</span>，插槽 <span class="hljs-number">2</span>，连接资源 <span class="hljs-number">11</span>）：<br><span class="hljs-symbol">TSAP</span>： <span class="hljs-number">11</span>.<span class="hljs-number">02</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>在ISO-on-TCP下的实例</p><ul><li>PLC-PLC,ID由系统自动生成，TSAP可空<br><img src="/img/blog_page/3427087-20240512093717514-1513347507.png"></li><li>本地ASC II - TSAP<br><img src="/img/blog_page/3427087-20240512093908649-1006816470.png"></li><li>在本地CPU1513和远程CPU1516的ISO-on-TCP通信中，本地TSAP可填CPU1513,远程TSAP可填CPU1516。TSAP ID会根据TSAP填入的ASCii字符自动生成。</li></ul></li></ul><h2 id="6-S7300-S71200-TCP通信实例"><a href="#6-S7300-S71200-TCP通信实例" class="headerlink" title="6. S7300 - S71200 TCP通信实例"></a><h3 id="section">6. S7300 - S71200 TCP通信实例</h3></h2><ul><li>案例中，S7 300和S7 1200同处在一个项目下，300做服务器端，1200做客户端。TCP配置从程序中进行，不在硬件组态中设置。</li><li>若需要不在同一个项目下的案例，其实只需要把伙伴端口设置为<code>未指定</code>。其他步骤殊途同归。<br><img src="/img/blog_page/3427087-20240620150011903-1012416435.png"></li><li>配置300PLC参数和程序：<ul><li>TCON：<br><img src="/img/blog_page/3427087-20240620150157393-1067386055.png"><ul><li>注意点1：指定出伙伴</li><li>注意点2：子网为<code>PN/IE_1</code>，这条连接是在硬件组态中已经配好的，且是必要的。</li></ul></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240620150413140-1497816252.png"><br>       - 注意点3：连接类型选择TCP<br>       - 注意点4：连接ID，此处填写的是<code>1</code>，可以随便填，但是要保证伙伴和本地端口的连接ID是一致的，连接ID表示当前使用的TCP网络通道号。<br>       - 注意点5：连接数据<code>TCP_Server_Connection_DB</code>和<code>TCP_Client_Connection_DB</code>。这是两个系统生成的DB。由系统自动建立，分别位于300和1200的程序文件夹内。（当然也可以自己填写和建立）<br><img src="/img/blog_page/3427087-20240620150915426-2078925698.png"><br><img src="/img/blog_page/3427087-20240620151015765-349541889.png"><br><img src="/img/blog_page/3427087-20240620150930911-1405115942.png"><br>       - 注意点6：若你的连接配置页面出现了<code>无可用连接参数</code>界面。请注意检查一下你的<code>Connect</code>参数，或者干脆删除管脚的connect参数地址后重建。<br><img src="/img/blog_page/3427087-20240620151220883-143734236.png"><br><img src="/img/blog_page/3427087-20240620151249669-577294301.png"><br>       - 客户端选择主动连接，如1200侧主动连接<br><img src="/img/blog_page/3427087-20240620151412810-1043122720.png"><br>    - TCON配置好后，就可以自由配置<code>TSEND</code>和<code>TRCV</code>了。注意一下<code>连接ID</code>保持一致，接收或者发送长度可以自定。<font color=red>TSEND发送  REQ需要用上升沿触发，为了方便，可以在SEND_REQ管脚做周期频率触发（5Hz&#x2F;2Hz&#x2F;10Hz&#x2F;..）的信号</font><br><img src="/img/blog_page/3427087-20240620151621486-1950483657.png"><br><img src="/img/blog_page/3427087-20240620151641236-1102650565.png"></p><ul><li>配置1200PLC参数和程序：<ul><li>TCON,细节注意点和300PLC配置TCON时一致<br><img src="/img/blog_page/3427087-20240620152110313-954182134.png"></li><li>TSEND及TRCV配置<br><img src="/img/blog_page/3427087-20240620152159492-1396183871.png"><br><img src="/img/blog_page/3427087-20240620152227061-934763987.png"></li></ul></li></ul><h2 id="7-update-实际用例"><a href="#7-update-实际用例" class="headerlink" title="7. update 实际用例"></a>7. update 实际用例</h2><ul><li>300侧<br>开头一部分是用于出错重连逻辑；<br>tcp_start点在OB100里面被初始化置1；<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//Establish TCP comm<br>//TCON<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">IEC_Timer_0_Instance</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">tcp_start</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">T</span>#1<span class="hljs-variable">S</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">Q</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">REQ</span>)</span>;<br><br>IF &quot;_TcpComm2client&quot;.TRCV.ERROR AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">pulser</span>[0] THEN<br>    &quot;_TcpComm2client&quot;.tcp_start := false;<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pulser</span>[0] := &quot;_TcpComm2client&quot;.TRCV.ERROR;<br><br><span class="hljs-punctuation">#</span><span class="hljs-keyword">IEC_Timer_0_Instance_1</span><span class="hljs-params">(<span class="hljs-variable">IN</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">                        <span class="hljs-variable">PT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">T</span>#50<span class="hljs-variable">MS</span>)</span>;<br>IF <span class="hljs-punctuation">#</span><span class="hljs-keyword">IEC_Timer_0_Instance_1</span>.Q AND NOT <span class="hljs-punctuation">#</span><span class="hljs-keyword">pulser</span>[1] THEN<br>    &quot;_TcpComm2client&quot;.tcp_start := TRUE;<br>END_IF;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">pulser</span>[1] := <span class="hljs-punctuation">#</span><span class="hljs-keyword">IEC_Timer_0_Instance_1</span>.Q;<br><br>//&quot;_TcpComm2client&quot;.TCON.REQ := true;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">TCON_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">REQ</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> 1,</span><br><span class="hljs-params">               <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">DONE</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">CONNECT</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">P</span>#<span class="hljs-variable">DB6</span>.<span class="hljs-variable">DBX0</span>.0 <span class="hljs-variable">BYTE</span> 64)</span>;<br><br>IF &quot;_TcpComm2client&quot;.TCON.REQ THEN<br>    <br>    //TRCV<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">TRCV_Instance</span><span class="hljs-params">(<span class="hljs-variable">EN_R</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">NOT</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">EN_R</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> 1,</span><br><span class="hljs-params">                   <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> 8,</span><br><span class="hljs-params">                   <span class="hljs-variable">NDR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">NDR</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">RCVD_LEN</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">RCVD_LEN</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">DATA</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">P</span>#<span class="hljs-variable">DB11</span>.<span class="hljs-variable">DBX0</span>.0 <span class="hljs-variable">BYTE</span> 8)</span>;<br>    <br>    //TSEND<br>    &quot;_TcpComm2client&quot;.TSEND.REQ := &quot;1.0s&quot;;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">TSEND_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TSEND</span>.<span class="hljs-variable">REQ</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> 1,</span><br><span class="hljs-params">                    <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> 8,</span><br><span class="hljs-params">                    <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TSEND</span>.<span class="hljs-variable">DONE</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TSEND</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TSEND</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2client&quot;</span>.<span class="hljs-variable">TSEND</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">DATA</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">P</span>#<span class="hljs-variable">DB15</span>.<span class="hljs-variable">DBX0</span>.0 <span class="hljs-variable">BYTE</span> 8)</span>;<br>END_IF;<br><br></code></pre></td></tr></table></figure></li><li>1200侧<figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs leaf">//Establish TCP comm<br>//TCON<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">IEC_Timer_0_Instance</span><span class="hljs-params">(<span class="hljs-variable">IN</span>:<span class="hljs-operator">=</span><span class="hljs-variable">TRUE</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">PT</span>:<span class="hljs-operator">=</span><span class="hljs-variable">T</span>#2<span class="hljs-variable">s</span>,</span><br><span class="hljs-params">                      <span class="hljs-variable">Q</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">REQ</span>)</span>;<br><br>//&quot;_TcpComm2serve&quot;.TCON.REQ:=true;<br><span class="hljs-punctuation">#</span><span class="hljs-keyword">TCON_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">REQ</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ID</span>:<span class="hljs-operator">=</span>1,</span><br><span class="hljs-params">               <span class="hljs-variable">DONE</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">DONE</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">BUSY</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">ERROR</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">STATUS</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TCON</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">               <span class="hljs-variable">CONNECT</span>:<span class="hljs-operator">=</span><span class="hljs-string">&quot;_1200PLC_Connection_DB&quot;</span>)</span>;<br><br>IF &quot;_TcpComm2serve&quot;.TCON.REQ THEN<br>    <br>    //TSEND<br>    &quot;_TcpComm2serve&quot;.SEND.REQ := &quot;Clock_1Hz&quot;;<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">TSEND_Instance</span><span class="hljs-params">(<span class="hljs-variable">REQ</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">SEND</span>.<span class="hljs-variable">REQ</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> 1,</span><br><span class="hljs-params">                    <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> 8,</span><br><span class="hljs-params">                    <span class="hljs-variable">DONE</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">SEND</span>.<span class="hljs-variable">DONE</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">SEND</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">SEND</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">SEND</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">                    <span class="hljs-variable">DATA</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">P</span>#<span class="hljs-variable">DB7</span>.<span class="hljs-variable">DBX0</span>.0 <span class="hljs-variable">BYTE</span> 8)</span>;<br>    <br>    //TRCV<br>    <span class="hljs-punctuation">#</span><span class="hljs-keyword">TRCV_Instance</span><span class="hljs-params">(<span class="hljs-variable">EN_R</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">NOT</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">EN_R</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">ID</span> :<span class="hljs-operator">=</span> 1,</span><br><span class="hljs-params">                   <span class="hljs-variable">LEN</span> :<span class="hljs-operator">=</span> 8,</span><br><span class="hljs-params">                   <span class="hljs-variable">NDR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">NDR</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">BUSY</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">BUSY</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">ERROR</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">ERROR</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">STATUS</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">STATUS</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">RCVD_LEN</span> <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&quot;_TcpComm2serve&quot;</span>.<span class="hljs-variable">TRCV</span>.<span class="hljs-variable">RCVD_LEN</span>,</span><br><span class="hljs-params">                   <span class="hljs-variable">DATA</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">P</span>#<span class="hljs-variable">DB8</span>.<span class="hljs-variable">DBX0</span>.0 <span class="hljs-variable">BYTE</span> 8)</span>;<br>END_IF;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>S7指令中的PUTGET或者BSENDBRCV的选择（BSENDBRCV仅支持3004001500）</title>
    <link href="/2024/07/21/S7%E6%8C%87%E4%BB%A4%E4%B8%AD%E7%9A%84PUTGET%E6%88%96%E8%80%85BSENDBRCV%E7%9A%84%E9%80%89%E6%8B%A9%EF%BC%88BSENDBRCV%E4%BB%85%E6%94%AF%E6%8C%813004001500%EF%BC%89/"/>
    <url>/2024/07/21/S7%E6%8C%87%E4%BB%A4%E4%B8%AD%E7%9A%84PUTGET%E6%88%96%E8%80%85BSENDBRCV%E7%9A%84%E9%80%89%E6%8B%A9%EF%BC%88BSENDBRCV%E4%BB%85%E6%94%AF%E6%8C%813004001500%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><ul><li>最近用一个300PLC做S7通信的时候，因为交互的数据量有1024个bytes.这才意识到put get在数据量上的限制。以及S7大数据传输用到的BSEND&#x2F;BRCV。</li></ul><h2 id="2-S7支持的指令"><a href="#2-S7支持的指令" class="headerlink" title="2. S7支持的指令"></a>2. S7支持的指令</h2><ul><li>在PLC里，能基于S7协议用于数据交换的指令如下（S7 300&#x2F;400下描述）：<br><img src="/img/blog_page/3427087-20240618162443966-1218796734.png"><br><img src="/img/blog_page/3427087-20240618162539140-1628513499.png"></li><li>其中值得注意的有几点：<ul><li>put&#x2F;get无需通信伙伴用户程序中的任何其它通信函数，意思是使用putget单边通信的时候，另一边设置只需要打开使能开关就行，不用配置（连远程ID都可以不用填写）</li><li>BSEND&#x2F;BRCV：互为交互对象，需要相互交接，也需要远程设备信息</li><li>PLC的start stop等可以通过S7协议做远程控制。</li></ul></li></ul><h2 id="3-PUT-GET的应用"><a href="#3-PUT-GET的应用" class="headerlink" title="3. PUT&#x2F;GET的应用"></a>3. PUT&#x2F;GET的应用</h2><ul><li>GET<br><img src="/img/blog_page/3427087-20240618163024542-117945748.png"><br><img src="/img/blog_page/3427087-20240618163046872-775168357.png"></li><li>PUT<br><img src="/img/blog_page/3427087-20240618163135785-450546041.png"><br><img src="/img/blog_page/3427087-20240618163156652-363107615.png"></li><li>当写完put&#x2F;get程序之后，<code>连接</code>处会自动生成一条连接：<br><img src="/img/blog_page/3427087-20240618163336498-451015540.png"><blockquote><p>.<code>03</code>标记为黄色的含义是表示默认为主动连接，用<code>03.01</code>是可以通信成功的。若不需要可以换成其他的TSAP号。</p></blockquote></li></ul><p><img src="/img/blog_page/3427087-20240618163359588-1468885102.png"></p><ul><li>注意点<ul><li>伙伴IP是需要填入的</li><li>如果<code>子网</code>栏报错，请去<code>添加新连接</code>新建一条子网</li><li>伙伴TSAP可以填的内容有：<ul><li>S7-300集成PN或CP，填03.02</li><li>S7-400集成PN或CP，填03.XX， XX为400PLC插槽号</li><li>S7-1200集成PN口，填03.00或者03.01</li><li>S7-1500集成网口或者CP，填03.01</li></ul></li><li>本地ID，不要和其他连接重复就行</li><li>PUT&#x2F;GET 触发管脚用脉冲</li><li>交互DB非优化</li><li>PUT GET 设置打开</li></ul></li></ul><h2 id="4-put-get-bsend-brcv-能支持的最大数据量"><a href="#4-put-get-bsend-brcv-能支持的最大数据量" class="headerlink" title="4. put&#x2F;get bsend&#x2F;brcv 能支持的最大数据量"></a>4. put&#x2F;get bsend&#x2F;brcv 能支持的最大数据量</h2><ul><li>以及BSEND&#x2F;BRCV支持的PLC类型，<font color=red>1200不支持USEND&#x2F;URCV&#x2F;BSEND&#x2F;BRCV</font><br><img src="/img/blog_page/3427087-20240618224903943-1629202033.png"><br><img src="/img/blog_page/3427087-20240618224930631-1220161937.png"><br><img src="/img/blog_page/3427087-20240618224956061-1279260939.png"></li></ul><h2 id="5-S7相关指令中的几个重要参数"><a href="#5-S7相关指令中的几个重要参数" class="headerlink" title="5. S7相关指令中的几个重要参数"></a>5. S7相关指令中的几个重要参数</h2><p><img src="/img/blog_page/3427087-20240618164730763-101316379.png"><br><img src="/img/blog_page/3427087-20240618164755139-185481845.png"><br><img src="/img/blog_page/3427087-20240618164825154-782251201.png"></p><ul><li>对于bsend和brcv。它们属于<code>双端组态通信</code>指令</li></ul><h2 id="6-bsend-brcv应用"><a href="#6-bsend-brcv应用" class="headerlink" title="6. bsend&#x2F;brcv应用"></a>6. bsend&#x2F;brcv应用</h2><ul><li><font color=red><strong>更新：对于1200系列PLC而言，是没有办法做到大数据量的双边S7通信的，它仅支持最大不超过160Bytes*4的用户数据，以下图片中的1200相关的内容请忽略或者替换成1500系列PLC。如果实在需要在1200上做数据量偏大的传输，可以试试用TCP&#x2F;IP协议（TSEND&#x2F;TRCV）</strong></font></li><li>连接ID如图：<br><img src="/img/blog_page/3427087-20240618165603524-1204597525.png"><br><img src="/img/blog_page/3427087-20240618165641839-417681987.png"><br><img src="/img/blog_page/3427087-20240618165658952-1290354656.png"><br><img src="/img/blog_page/3427087-20240618165929545-410493773.png"></li><li><font color=red><strong><del>在1200端仍然需要建立一套BSEND&#x2F;BRCV程序和数据DB。</del></strong></font></li><li><font color=red><strong>1200不支持双边的S7通信（BSEND&#x2F;BRCV），只有300&#x2F;400&#x2F;1500系列PLC才支持。</strong></font></li><li>上述在300PLC上建立了一套BSEND&#x2F;BRCV指令，同样的，在另一个PLC上，比如1500上也需要建立一套相应的指令，并填入相应的管脚：<br><img src="/img/blog_page/3427087-20240618225938724-472069426.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git笔记</title>
    <link href="/2024/07/21/git%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/07/21/git%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul><li><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/" title="git install">阿里云下载Git</a></li><li>选择安装目录时尽量不选在C盘<br><img src="/img/blog_page/3427087-20240614155122522-610264985.png"></li><li>Git组件安装，一般默认即可<br><img src="/img/blog_page/3427087-20240614155207106-1442681423.png"></li><li>选择开始菜单文件夹，默认</li><li>选择Git默认编辑器，一般是vim。默认就行</li><li>选择默认分支名<br><img src="/img/blog_page/3427087-20240614155423474-968800539.png"></li><li>选择环境变量，选第二个<br><img src="/img/blog_page/3427087-20240614155455768-1139730173.png"></li><li>选择SSH，默认</li><li>选择HTTPS，默认</li><li>配置尾行符，默认</li><li>配合git bash一起使用，默认</li><li>git pull行为，默认</li><li>凭证管理，选第一个<br><img src="/img/blog_page/3427087-20240614155731531-466928437.png"></li><li>默认</li><li>默认</li><li>执行安装。</li><li>安装成功后，使用<code>git bash</code>打开git</li></ul><h2 id="2-git-command"><a href="#2-git-command" class="headerlink" title="2. git command"></a>2. git command</h2><ul><li><a href="https://learngitbranching.js.org/?locale=zh_CN" title="git command">Git练习</a></li><li><code>git commit</code>:提交代码，把原来的代码变更并提交到仓库，基础节点叫做<code>parent</code>。原来的基础节点并不会被删除，类似复制粘贴<br><img src="/img/blog_page/3427087-20240614160708587-1114966338.png"></li><li><code>git branch &lt;分支名&gt;</code>创建分支，用<code>git checkout &lt;分支名&gt;</code>切换到现有分支（*表示当前所在分支）。<br><img src="/img/blog_page/3427087-20240614161420791-792161783.png"></li><li><code>git merge</code>:把分支合并到主线路<ul><li>创建分支<code>git branch bugFix</code></li><li>切换分支<code>git checkout bugFix</code></li><li>提交<code>git commit</code></li><li>切换到<code>git checkout main</code></li><li>提交<code>git commit</code></li><li>用<code>git merge &lt;分支名&gt;</code>把两个分支合并</li></ul></li></ul><p><img src="/img/blog_page/3427087-20240614162425012-823371522.png"></p><ul><li><code>git rebase</code>:不同于git merge 的另外一种合并方法<ul><li>创建分支<code>git branch bugFix</code></li><li>提交<code>git commit</code></li><li>切换到<code>git checkout main</code>，再提交<code>git commit</code></li><li>切换到<code>git checkout bugFix</code>,<code>rebase</code>到main</li></ul></li></ul><p><img src="/img/blog_page/3427087-20240614164512337-1267042527.png"></p><h2 id="3-git应用"><a href="#3-git应用" class="headerlink" title="3. git应用"></a>3. git应用</h2><ul><li><p>安装：</p><ul><li>在debian或者ubuntu下 ： <code>sudo apt-get install git</code></li></ul></li><li><p>配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email</span><br></code></pre></td></tr></table></figure></li><li><p>创建版本库并添加文件到仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建版本库文件夹</span><br> <span class="hljs-built_in">mkdir</span> learngit<br> <span class="hljs-built_in">cd</span> learngit<br> <span class="hljs-built_in">pwd</span> <span class="hljs-comment">#显示当前目录</span><br></code></pre></td></tr></table></figure></li><li><p>把该文件夹变成可以管理的仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 会生成一个.git的文件，做版本管理用，git使用的前提是被.git管理起来；用ls-ah 查看该文件</span><br>git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>新建一个文本readme.txt，放到learngit下；把一个文件放到git仓库需要以下两步：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 把文件添加到仓库,这一步是把文件添加到仓库暂存区</span><br>git <span class="hljs-built_in">add</span> readme.txt <br><br><span class="hljs-comment"># 真正把文件提交到仓库</span><br>git commit -m <span class="hljs-string">&quot;本次提交的说明&quot;</span> <br></code></pre></td></tr></table></figure></li><li><p>为什么需要add和commit两步的原因是：commit可以一次性提交很多文件，所以在commit之前可以多次add：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> file1.txt<br>git <span class="hljs-built_in">add</span> file2.txt<br>git <span class="hljs-built_in">add</span> file3.txt<br>git commit -m <span class="hljs-string">&quot;一次性提交上面三个文件&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>添加某个文件时，必须先保证文件在当前目录下存在，用ls或者dir命令查看当前目录的文件是否存在或者名称是否正确</p></li><li><p>比较和追踪文件状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 可以查看当前仓库的状态，比如仓库里的文件被修改了，但是还没有被<span class="hljs-keyword">add</span>到仓库暂存区<br>git status <br><br># 详细查看某个被修改的文件的不同（和<span class="hljs-keyword">commit</span>的文件相比）<br>git diff readme.txt <br><br># 比较完不同之后就可以放心添加到暂存区了，提交修改也是用<span class="hljs-keyword">add</span>，和提交新文件一样<br>git <span class="hljs-keyword">add</span> readme.txt <br><br># 在<span class="hljs-keyword">add</span>之后<span class="hljs-keyword">commit</span>之前再看一眼status，会告诉我们将要被提交的文件包括readme.txt（这时还存在暂存区）<br>git status <br><br>git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m &quot;提交readme.txt的修改&quot;<br><br># 在<span class="hljs-keyword">commit</span>之后再看一眼状态，会告诉我们当前没有需要提交的修改，工作目录（working tree）是干净的<br>git status <br></code></pre></td></tr></table></figure></li><li><p>版本回退：</p><ul><li>我们之前的每一次commit就相当于是一次“快照”，所以找到之前的提交记录，就可以回退到某一次提交的版本。<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 查看commit的历史记录，会输出所有被记录过的改动，这里会有个HEAD指针</span><br>git <span class="hljs-built_in">log</span> <br><br><span class="hljs-comment"># 一次提交记录占用一行输出（省略作者和日期那些不重要的信息，只保留SHA计算出来的值）</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment">--pretty=oneline </span><br><br><span class="hljs-comment"># git中，HEAD指向的版本就表示当前版本。上一个版本是HEAD^;上上个版本是HEAD^^;往上100个版本是HEAD~100</span><br><br><span class="hljs-comment"># 退回到上一个版本</span><br>git reset <span class="hljs-comment">--hard HEAD^ </span><br><br><span class="hljs-comment"># 使用reset之后，查看状态发现最新的变成了上一次修改的版本了</span><br>git status <br></code></pre></td></tr></table></figure></li></ul></li><li><p>如果回退之后，又想恢复。那么只要命令行窗口还没有被关掉，只要向上找到想要恢复那个版本的SHA号。执行如下指令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># SHA号不用填完，可以填个4或者5位，git会自己去模糊搜索。</span><br>git reset <span class="hljs-comment">--hard &lt;sha&gt; </span><br><br><span class="hljs-comment"># HEAD指向哪个版本，当前版本就是哪个</span><br><br><span class="hljs-comment"># 如果SHA已经找不到了，如下方法可以恢复：</span><br><span class="hljs-comment"># 这条指令记录了使用者对git操作的每条命令，从这个指令的内容中找到已经回退掉的SHA和版本号</span><br>git reflog <br><br><span class="hljs-comment"># 找到之后就可以恢复了</span><br>git reset <span class="hljs-comment">--hard &lt;sha&gt; </span><br></code></pre></td></tr></table></figure></li><li><p>工作区和暂存区</p><ul><li>工作区：就是在电脑磁盘上就能看到的目录</li><li>版本库：生成的.git其实就是一个版本库，他不算工作区。</li><li>git的版本库里面存了很多东西，其中最重要的就是暂存区，称作<code>stage（或者index）</code>;git里面为我们自动创建的第一个分支叫做<code>master</code>;指向master的指针叫做<code>HEAD</code></li><li><code>git add</code>就是把文件修改添加到了暂存区</li><li><code>git commit</code>就是提交更改，实际上是把暂存区的内容提交到了当前的分支；注意<code>提交的只有暂存区里存在的东西</code>。</li><li>在只有一个分支的情况，简单理解就是我们把所有的文件全部放到了暂存区，然后一<code>次性提交</code>了暂存区的所有修改</li><li>一旦提交(commit)过后，如果你又没有对工作区做任何修改，那么<code>工作区就变得干净</code>了</li><li>commit以后，<code>暂存区的内容就为空</code>了。</li></ul></li><li><p>撤销：</p><ul><li>情况1，如果是在工作区的文件被修改了，但是还没有提交到暂存区，有两种解决方案：<ul><li>a.手动删除掉。</li><li>b.使用 <code>git checkout -- readme.txt</code> ，可以丢弃工作区的修改</li><li>如果暂存区有该文件的上一个版本，则退回到当添加到暂存区时的状态</li><li>如果暂存区内没有文件，则退回到上一次commit时的状态</li><li><code>总之，就是让当前文件回到最近一次 git commit或者git add时的状态</code></li><li>注意<code>checkout </code>后面如果不加 – file 的话，就变成了切换分支的命令</li></ul></li><li>情况2，工作区的修改已经被提交到暂存区了：<ul><li><code>git reset HEAD readme.txt</code> ：git reset既可以做版本回退，也可以用来把暂存区的东西撤销到工作区，撤销之后暂存区就是干净的了。</li><li><code>git checkout -- readme.txt</code> ：丢弃工作区的内容</li></ul></li><li>情况3，暂存区的内容已经被提交到仓库了：<ul><li>本地仓库，用<code>git reset --hard HEAD^</code>退回版本</li><li>远程仓库，完蛋</li></ul></li></ul></li><li><p>删除：</p><ul><li><code>rm test.txt</code> ：直接删除工作区的文件，但是如果提交了的话，仓库还有记录</li><li><code>git status</code> ：直接告诉你工作区哪个文件被删除了</li><li>如果正常删除，就<code>先add再commit，把变更同步到仓库</code></li><li>如果删错了，因为版本库还有，所以用： <code>git checkout -- test.txt</code> 恢复。</li><li>从这里看出来，git checkout – file 其实是<code>用版本库里的内容替换掉工作区中的内容</code>，如果版本库没有改文件，那就是丢弃工作区该文件的修改方式了。</li></ul></li><li><p>远程仓库：</p><ul><li><code>git remote add origin &lt;远程仓库SSH地址&gt;</code> ：origin是远程仓库的名字，也可以换成其它名字；这一步是在关联远程仓库</li><li><code>git push -u origin master</code> ：把本地的内容推送到远程，实际上是把当前分支master推到远程库，第一次用 -u,就把本地master和远程master管理，以后就可以不用加-u了。</li><li><code>git push origin master</code></li><li><code>git remote rm origin</code> ：解除本地和远程仓库的绑定，并没有删除远程仓库的内容</li><li><code>git clone &lt;远程仓库SSH地址&gt;</code> ：把远程仓库在本地克隆一个一样的</li></ul></li><li><p>分支管理：</p><ul><li>分支管理就是多人协作时，各自在自己的分支上干活，互不干扰</li><li>直到开发完毕，一次性合并到原有分支上，高效又安全</li><li>如果出现分支合并冲突的时候git就希望我们先手动解决冲突（人工确认更改需求），冲突解决后再合并<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#创建分支，然后切换分支</span><br>git <span class="hljs-keyword">branch </span>dev<br>git checkout dev <br><br><span class="hljs-comment">#用一句话代替上面两句话，创建并切换分支</span><br>git checkout -<span class="hljs-keyword">b </span>dev <br><br><span class="hljs-comment">#查看当前分支</span><br>git <span class="hljs-keyword">branch </span><br><br><span class="hljs-comment">#把dev分支的改动和当前所在分支合并</span><br>git merge dev <br><br><span class="hljs-comment">#合并之后，就可以放心删除没有用的dev分支了</span><br>git <span class="hljs-keyword">branch </span>-d dev <br><br><span class="hljs-comment"># 如果出现分支合并冲突的时候git就希望我们先手动解决冲突，冲突解决后再合并</span><br><br><span class="hljs-comment"># 可以查看分支合并图</span><br>git log --graph <br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git application</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git配置连接github</title>
    <link href="/2024/07/21/git%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5github/"/>
    <url>/2024/07/21/git%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5github/</url>
    
    <content type="html"><![CDATA[<h2 id="1-在github上建立一个仓库"><a href="#1-在github上建立一个仓库" class="headerlink" title="1. 在github上建立一个仓库"></a>1. 在github上建立一个仓库</h2><ul><li>new repository<br><img src="/img/blog_page/3427087-20240614220406124-302017226.png"></li><li>填写仓库名，仓库属性（公共或者私有），自动添加readme.md文件<br><img src="/img/blog_page/3427087-20240614220557836-2133990900.png"></li><li>创建后如图<br><img src="/img/blog_page/3427087-20240614220649638-2144600719.png"></li></ul><h2 id="2-本地git连接远程github仓库"><a href="#2-本地git连接远程github仓库" class="headerlink" title="2. 本地git连接远程github仓库"></a>2. 本地git连接远程github仓库</h2><ul><li>建立一个本地文件夹用作本地repo,<code>Open Git Bash here</code><br><img src="/img/blog_page/3427087-20240614221535099-1439990956.png"></li><li><code>git init</code>:初始化一个空的git repos,在指定文件夹中生成了隐藏的.git文件夹。用于保存本地仓库的版本信息等相关信息。用<code>ls -ah</code>可以看到隐藏的.git文件夹。不要去手动改.git里面的东西，乱了就把该git仓库破坏了。<br><img src="/img/blog_page/3427087-20240614221740933-1386653524.png"><br><img src="/img/blog_page/3427087-20240614222244167-1407370106.png"><br><img src="/img/blog_page/3427087-20240614222406519-2010402057.png"></li><li><code>git config</code>,用于在本机上关联设置github邮箱和用户名。后缀带<code>--global</code>表示本地计算机的所有仓库都应用该配置；不加<code>--global</code>表示可以对特定仓库指定特定邮箱。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;xxx&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;xxx@xx.com&quot;</span><br></code></pre></td></tr></table></figure><img src="/img/blog_page/3427087-20240614224058592-158714495.png"></li><li><code>ssh-keygen -t rsa -C &quot;xxx@xx.com&quot;</code>:生成本机的SSH Key,(里面有两个文件，一个公钥，一个私钥)<ul><li>过程中根据提示，按三次回车键就行，会生成<code>id_rsa</code>和<code>id_rsa.pub</code>。<br><img src="/img/blog_page/3427087-20240614225327047-1083733605.png"></li><li>生成后，在下图路径中就可以查看到生成的文件了。用记事本打开公钥<code>id_rsa.pub</code>，复制里面的内容，用于一会配置到github上面去。<br><img src="/img/blog_page/3427087-20240614225528970-1772845359.png"><br><img src="/img/blog_page/3427087-20240614225555879-1696325263.png"></li></ul></li><li>打开github的<code>setting</code>,选择<code>SSH and GPG Keys</code>。title随意填写，key值为上面复制的公钥。这一步设置了本地git和远程github之间的通信密码，github账户只支持合法的SSH KEY对它下面的项目进行修改。<ul><li>点击github头像下的setting<br><img src="/img/blog_page/3427087-20240614230344055-818706393.png"></li><li>选择<code>SSH and GPG keys</code>,然后点击<code>New SSH key</code><br><img src="/img/blog_page/3427087-20240614230540464-560612631.png"></li><li>title随意，key把之前复制的内容粘贴上去就行，点击完成即可。<br><img src="/img/blog_page/3427087-20240614230801400-1545758958.png"></li></ul></li></ul><h2 id="3-上传本地项目到github"><a href="#3-上传本地项目到github" class="headerlink" title="3. 上传本地项目到github"></a>3. 上传本地项目到github</h2><ul><li>找到github对应项目的项目SSH，复制它。<br><img src="/img/blog_page/3427087-20240614232132652-857322912.png"></li><li><code>git remote add origin ssh</code>:用于添加一个新的远程仓库到本地的git项目中<br><img src="/img/blog_page/3427087-20240614232827835-1703718161.png"></li><li>同步github上master分支的code,指定上传的分支<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git pull origin <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> push -u origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure></li><li><code>git add *</code>:添加文件中所有改动</li><li><code>git commit</code>:把git代码提交到仓库区</li><li>上传github流程<br><img src="/img/blog_page/3427087-20240614233840445-55666734.png"></li><li>建立分支并提交到github<br><img src="/img/blog_page/3427087-20240614233902555-1971565333.png"></li></ul><h2 id="4-一些其他的git命令"><a href="#4-一些其他的git命令" class="headerlink" title="4. 一些其他的git命令"></a>4. 一些其他的git命令</h2><ul><li><code>git config --list</code>:检查配置信息</li><li><code>git config user.name</code>:检查某一项具体配置</li><li><code>git help config</code>,<code>git help push</code>:获取帮助</li><li><code>git diff</code>：查看已暂存的文件和当前工作目录中的文件的差异</li><li><code>git log --pretty=oneline</code>:查看过去</li><li><code>git log</code>，<code>git relog</code>:查看commit记录<ul><li>log:不能查看已经删除的commit记录</li><li>reflog:可以查看所有分支的操作记录，包括已经被删除的commit记录</li></ul></li><li><code>git reset --hard commit_id</code>:会消除回退版本后的内容,commid_id为版本号（hash值前七位）</li><li><code>git status</code>:查看文件状态，绿色在暂存区，红色表示新建&#x2F;新修改的文件在工作区</li><li><code>git add</code>:把工作区的文件添加到暂存区</li><li><code>git commit -m &quot;version description&quot;</code>:提交到仓库区，-m后面跟版本描述</li><li><code>git commit -am &quot;version description&quot;</code>:之间从工作区到仓库区，跳过暂存区（git add）</li><li>回退版本<ul><li>HEAD表示当前最新版本</li><li>HEAD^表示最新版本的上一个版本</li><li>HEAD^^前两个版本</li><li>HEAD~1 当前版本的前一个版本</li><li><code>git reset --hard HEAD^</code>:回退到前一个版本</li></ul></li><li><code>git push</code>:将改动上传到github,如果没有指定分支，则需要使用<code>git push origin master</code></li><li><code>git pull origin master</code>:将远程主机的最新内容拉到本地，然后和本地分支直接合并，<code>fetch+merge</code></li><li><code>git fetch origin master</code>:将远程的内容拉到本地，不进行合并</li><li><code>git clone &quot;远程地址&quot; &quot;本地文件名&quot;</code>：克隆远程文件</li><li><code>git clean -xf</code>:清除所有未提交的文件。</li><li><code>git branch -a</code>:查看本地和远程的所有分支</li><li><code>git branch -r</code>:查看所有远程分支</li><li><code>git branch -m &quot;旧分支&quot; &quot;新分支&quot;</code>：重命名分支名</li><li><code>git clone https://xxx.git</code>:拉取远程代码</li><li><code>git checkout &quot;分支名&quot;</code>：切换分支</li><li><code>git branch &quot;分支名&quot;</code>：创建分支</li></ul>]]></content>
    
    
    <categories>
      
      <category>Git application</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOT2050基本使用和指令集</title>
    <link href="/2024/07/21/IOT2050%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/2024/07/21/IOT2050%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装系统镜像-–-debian"><a href="#1-安装系统镜像-–-debian" class="headerlink" title="1. 安装系统镜像 – debian"></a>1. 安装系统镜像 – debian</h2><ul><li><p><a herf="https://support.industry.siemens.com/cs/document/109741799/simatic-iot20x0-%E4%B8%8B%E8%BD%BD?dti=0&lc=zh-CN">IOT镜像地址下载及镜像版本说明</a></p></li><li><p><a herf="https://sourceforge.net/projects/win32diskimager/">Win32 disk Imager下载，用于SD卡安装镜像文件</a></p><ul><li>使用win32磁盘映像工具镜像操作如下：<br><img src="/img/blog_page/3427087-20240701150553142-637545214.png"></li></ul></li><li><p>如果需要把SD卡中的镜像写入到eMMC卡：</p><ul><li>将烧录好的SD卡插入设备，修改SD卡启动顺序为默认启动设备。</li><li>如果已经存在emmc系统，则先格式化emmc：<code>mkfs.ext4 /dev/mmcblk1</code></li><li>将SD卡挂载至文件系统：<code>mkdir /mnt/USB</code>,<code>mount/dev/sdb1/mnt/USB</code></li><li>通常SD卡是&#x2F;dev&#x2F;sda1设备，U盘是&#x2F;dev&#x2F;sdb1设备，在操作前使用<code>fdisk -l</code>来确认</li><li>将U盘中的Example Image文件烧录到EMMC，<code>dd if=/mnt/USB/IOT2050_Example_Image_V1.0.2.image of=/dev/mmcblk1 bs=100M conv=fsync status=progress</code>,&#x2F;mnt&#x2F;USB&#x2F;IOT2050_Example_Image_V1.0.2.image是image在U盘中的默认路径，修改为实际路径就可。</li><li>修改回EMMC启动方式，重启。</li></ul></li><li><p>跳过eMMC启动</p><ul><li>插入SD卡或者USB等装有系统的启动盘</li><li>上电前按住user button</li><li>上电，直到STAT灯变为橙色，然后松开user button</li></ul></li><li><p>更改和查看默认启动顺序</p><ul><li>设置默认启动顺序<code>fw_setenv boot targets usb0 usb1 mmc0 mmc1</code>或<code>fw_setenv boot targets &quot;usb0 usb1 mmc0 mmc1&quot;</code>。其中mmc0是SD卡，mmc1是eMMC，usbx是USB设备。</li><li>查看默认启动顺序：<code>fw_printenv boot_targets</code></li></ul></li></ul><h2 id="2-Putty"><a href="#2-Putty" class="headerlink" title="2. Putty"></a>2. Putty</h2><ul><li><a herf="https://www.putty.org/">PuTTY下载</a></li><li>IOT20X0有两个以太网口，P1X是固定IP，默认地址为192.168.200.1。P2X为DHCP动态协议，可以自动获取IP。</li><li>PuTTY用SSH方式连接，填入相应IP，端口填22（默认）</li></ul><h2 id="3-4G和wifi"><a href="#3-4G和wifi" class="headerlink" title="3. 4G和wifi"></a>3. 4G和wifi</h2><ul><li>4G<ul><li>安装好硬件，插好设备（SIM卡）</li><li>执行<code>ifconfig</code>，在列表中看到ppp0</li><li>ping测试网络</li></ul></li><li>Wifi<ul><li>插入无线网卡，输入<code>iot2050setup</code></li><li>选择<code>Networking</code></li><li>选择<code>Edit a connect</code></li><li>选择<code>Add</code></li><li>选择WIFI,并设置相应参数</li><li>完成</li></ul></li></ul><p><del>4. 默认账号root，默认密码root，修改后密码IOT2050 &#x2F; P2口IP已改为192.168.0.100</del></p><h2 id="5-nodered-192-168-200-1：1880"><a href="#5-nodered-192-168-200-1：1880" class="headerlink" title="5. nodered:192.168.200.1：1880"></a>5. nodered:192.168.200.1：1880</h2><ul><li>node-red升级：<ul><li>查看当前node版本<code>node -v</code></li><li>清除缓存<code>npm cache clean -f</code></li><li>下载node安装包<code>npm install -g n</code></li><li>升级到最新的稳定版本<code>n stable</code></li><li>再次查看node版本<code>node -v</code></li><li>更新node-red<code>npm install -g --unsafe-perm node-red</code></li><li>重启<code>reboot</code></li></ul></li><li>使用node-red<ul><li><code>cd /</code></li><li><code>node /usr/lib/node_modules/node-red/red &amp;</code></li></ul></li><li>node-red界的“hello world”<ul><li>选择<code>时间戳</code>节点，选择<code>触发器</code>节点，选择<code>iot2050gpio</code>,控制用户led为橘色，5秒后设置为0。<br><img src="/img/blog_page/3427087-20240703224846899-93259640.png"></li><li>点击部署后，每一次手动触发（注入）一下时间戳，iot2050的led就会橘色触发5秒。</li></ul></li></ul><h2 id="6-iot2050setup-修改IPC信息小工具"><a href="#6-iot2050setup-修改IPC信息小工具" class="headerlink" title="6. iot2050setup:修改IPC信息小工具"></a>6. iot2050setup:修改IPC信息小工具</h2><h2 id="7-常用指令"><a href="#7-常用指令" class="headerlink" title="7. 常用指令"></a>7. 常用指令</h2><ul><li>call 执行任意远程shell指令</li><li>cd 改变远程工作目录</li><li>chmod 改变远程文件权限</li><li>close 关闭会话</li><li>exit 关闭所有回话并结束程序</li><li>get 从远程目录下载文件到本地目录</li><li>help 显示帮助</li><li>keepuptodate 在一个远程目录连续反映本地目录的改变</li><li>lcd 改变本地工作目录</li><li>lls 列出本地目录的内容</li><li>ln 新建远程符号链接</li><li>lpwd 显示本地工作目录</li><li>ls 列出远程目录内容</li><li>mkdir 新建远程目录</li><li>mv 移动或者重命名远程文件</li><li>open　连接到服务器</li><li>option 设置或者显示脚本选项的值</li><li>put 从本地目录上传文件到远程目录</li><li>pwd 显示远程工作目录</li><li>rm 删除远程文件</li><li>rmdir 删除远程目录</li><li>session 列出连接的会话或者选择活动会话</li><li>synchronize 用一个本地目录同步远程目录</li><li>VIM&#x2F;VI 编辑器</li></ul><h2 id="8-操作"><a href="#8-操作" class="headerlink" title="8. 操作"></a>8. 操作</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">fw_printenv boot_targets: 检查当前启动顺序<br>fw_setenv boot_targets: 改变启动顺序<br>reboot: 重启<br>cat/etc/os-release: 检查版本和其他信息<br>mount: 检查当前设备用的哪个启动项<br>dd <span class="hljs-attribute">if</span>=./xxx.wic.img <span class="hljs-attribute">of</span>=/dev/&lt;emmc device&gt;<span class="hljs-attribute">bs</span>=100M <span class="hljs-attribute">oflag</span>=direct <span class="hljs-attribute">status</span>=progress 复制image到emmc<br>logout: 退出root模式<br>fw_printenv vendor: 打印供应商设定的值<br>mount/dev/mmcblk0p2/mnt: 在文件系统中挂在SD<br>umount/mnt: 取消挂载，退出目录<br></code></pre></td></tr></table></figure><h2 id="9-另外一些常用指令"><a href="#9-另外一些常用指令" class="headerlink" title="9. 另外一些常用指令"></a>9. 另外一些常用指令</h2><ul><li>touch test.txt: 在文件系统中建立一个txt文件</li><li>vi test.txt: 在vim中编辑txt 文件<br>(要输入<code>：</code>才能执行以下指令)<ul><li>q: quit</li><li>w: save</li><li>wq: save and quit</li><li>ql：quit without save</li><li>q!: force to quit<br>fdisk -l: find disk（df -h:以阅读方式查看磁盘）<br>ls XXX: 查看XXX文件下的所有文件列表<br>Passwd: 修改密码<br>ls： 检查文件和当前目录<br>cd &#x2F;XXX： 改变当前文件<br>adduser XXX: 添加用户<br>sudo fdisk -l: 寻找SD卡文件名<br>iot2050-firmware-update: uboot升级工具<br>rm -f XXX: 删除指定文件<br>rm -rf XXX: 删除XXX文件夹以及下面的所有文件<br>scp -ooo xxx yyy: 把文件xxx复制到yyy, 不同操作系统内传输。 -ooo： -r递归复制路径下的所有文件夹内容<br>cp xxx yyy：文件xxx复制到yyy<br>ip a:查看IP地址<br>chmod 777 xxxx:指定文件拥有最高权限<br>gcc led test.c -o led -lmraa -lcunit:执行.c文件并生成记录-lcunit -o后面加生成的可执行文件的文件名之后直接.&#x2F;文件名打开执行内容<br>nmtui: 网络配置工具</li></ul></li><li>hwclock xxx yyy:硬件时钟<ul><li>xxx: -r读取时间，-w把系统时间写入硬件</li></ul></li><li>date xxx yyy :系统时间<ul><li>xxx: -s设置系统时间</li></ul></li><li>data &amp;&amp; hwclock：同步硬件时间和系统时间</li><li>ifconfig: 通讯连接查询</li><li>.&#x2F;xxx.sh </li><li>lsblk 查看磁盘结构</li><li>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test bs&#x3D;1M count&#x3D;1000 生成1G大文件到test文件夹</li><li>sudo apt-get install libcunit l-dev 安装Cunit</li><li>Bash xxx:运行保存过的shell程序</li><li>包管理工具：<ul><li>dpkg –get-selections</li><li>apt list –installed</li></ul></li></ul><h2 id="10-linux常用命令"><a href="#10-linux常用命令" class="headerlink" title="10. linux常用命令"></a>10. linux常用命令</h2><ul><li><code>which</code>: <code>which vi</code>会返回vi的路径，敲入vi路径可以直接启动vi编辑器</li><li><code>find</code>:<code>find -type f -name test.py</code>:找到类型为文件的，名字为test.py的文件，会返回一个地址。</li><li><code>./</code>：表示当前路径下</li><li><code>vim test.py</code>:直接用vi打开py文件，没有则新建一个</li><li><code>wq:</code>保存和退出VI</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>IOT 2050</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debian</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LOGO！的S7通信应用</title>
    <link href="/2024/07/21/LOGO%EF%BC%81%E7%9A%84S7%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/"/>
    <url>/2024/07/21/LOGO%EF%BC%81%E7%9A%84S7%E9%80%9A%E4%BF%A1%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>建立连接都以<code>网络视图</code>为平台，当然<code>电路图模式</code>也可以配置通讯，各人使用喜好而已。</p><h2 id="1-两台LOGO之间的S7"><a href="#1-两台LOGO之间的S7" class="headerlink" title="1. 两台LOGO之间的S7"></a>1. 两台LOGO之间的S7</h2><ul><li>添加两个新设备<br><img src="/img/blog_page/3427087-20240606141436219-761718426.png"></li><li>如果想要默认连接的话，直接把两个PLC拖拽连线，<font color=red>左侧CPU是客户机，右侧CPU是服务器，如果需要调整服务器和客户端选项的话拖拽更换CPU位置即可。</font><br><img src="/img/blog_page/3427087-20240606141757176-1550654059.png"></li><li>双击蓝色连接线，设置详细属性，<code>地址</code>，<code>长度</code>，<code>方向</code><br><img src="/img/blog_page/3427087-20240606141947722-517319784.png"></li><li>若不希望默认连接，比如需要修改默认的<code>TSAP号20.0</code>，则可以如图所示，分别设置单个CPU的链接属性和客户端服务器属性<br><img src="/img/blog_page/3427087-20240606142252402-1236014935.png"></li></ul><h2 id="2-LOGO和Smart200之间的S7"><a href="#2-LOGO和Smart200之间的S7" class="headerlink" title="2. LOGO和Smart200之间的S7"></a>2. LOGO和Smart200之间的S7</h2><ul><li><p>LOGO为客户端，<font color=red>Smart200侧不需要编程</font></p><ul><li>添加一个LOGO做客户端以及一个S7兼容设备做服务器，如图。依旧<font color=red>左侧CPU是客户机，右侧CPU是服务器，如果需要调整服务器和客户端选项的话拖拽更换CPU位置即可。</font><br><img src="/img/blog_page/3427087-20240606142850066-1779348053.png"></li><li>双击蓝色连接线，设置详细属性，<code>LOGO端TSAP设置20.00</code>，<code>smart端TSAP设置03.00</code>，依旧需要设置地址，方向，长度<br><img src="/img/blog_page/3427087-20240606144501028-1498408173.png"></li></ul></li><li><p>LOGO为服务器，Smart作为客户端需要打开<code>PUT/GET</code>以及编程</p><ul><li>S7兼容设备放左边 ，LOGO放右边，<font color=red>LOGO配置界面不用去添加数据传输信息，忽略该设置</font></li><li>远程TSAP设置，smart默认<code>02.00</code>，<code>02.01</code>，<code>03.00</code>，<code>03.01</code><br><img src="/img/blog_page/3427087-20240606144953899-227013767.png"></li></ul></li></ul><h2 id="3-LOGO和1200-1500之间的S7"><a href="#3-LOGO和1200-1500之间的S7" class="headerlink" title="3. LOGO和1200&#x2F;1500之间的S7"></a>3. LOGO和1200&#x2F;1500之间的S7</h2><ul><li><p>LOGO作为服务器，1500作为客户端</p><ul><li>在LOGO端设置如下，远程TSAP设置为<code>17.01</code>，不用去添加<code>数据传输信息</code>，也<code>不用去建立S7兼容设备</code>，勾选<code>服务器端接受所有连接请求</code><br><img src="/img/blog_page/3427087-20240606145603415-520700715.png"></li><li>在1200&#x2F;1500端，需要打开<code>PUT/GET</code>设置，设置S7连接程序<br><img src="/img/blog_page/3427087-20240606145727352-1886179927.png"><br><img src="/img/blog_page/3427087-20240606145953501-1715265014.png"></li><li><font color=red><strong>注意：S71200&#x2F;1500的DB1对应于LOGO!的V区，即在PUT指令中使用的<code>通信伙伴数据区ADDR_1=P#DB1.DBX0.0 BYTE 10</code>在LOGO中对应LOGO!的VB0~VB9。此时，通信伙伴数据区占用的DB1和1200&#x2F;1500本地的DB1没有任何关系</strong></font></li><li>通信建立完成之后可以直接在电路图编辑器里面写电路图<br><img src="/img/blog_page/3427087-20240606160924802-990968630.png"></li></ul></li><li><p>LOGO作为客户端，1200作为服务器</p><ul><li>1200&#x2F;1500把GET&#x2F;SET选项打开。</li><li>LOGO侧建立一个客户端连接<br><img src="/img/blog_page/3427087-20240626103444906-1103790588.png"></li><li>填写远程的IP和TSAP号，1200填<code>03.00</code><br><img src="/img/blog_page/3427087-20240626103536951-1360784032.png"></li><li>可以拖一个远程设备出来，也可以不用指定，此处截图为不指定<br><img src="/img/blog_page/3427087-20240626103621524-56384723.png"></li><li><code>当logo做客户端访问1200时，可以配置的传输变量类型仅为VB,MB,QB,IB</code>，没有DB。<br><img src="/img/blog_page/3427087-20240626103755609-1945125238.png"></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>LOGO and Smart</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LOGO</tag>
      
      <tag>Smart</tag>
      
      <tag>S7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LOGO!自带显示屏显示文本和变量值</title>
    <link href="/2024/07/21/LOGO!%E8%87%AA%E5%B8%A6%E6%98%BE%E7%A4%BA%E5%B1%8F%E6%98%BE%E7%A4%BA%E6%96%87%E6%9C%AC%E5%92%8C%E5%8F%98%E9%87%8F%E5%80%BC/"/>
    <url>/2024/07/21/LOGO!%E8%87%AA%E5%B8%A6%E6%98%BE%E7%A4%BA%E5%B1%8F%E6%98%BE%E7%A4%BA%E6%96%87%E6%9C%AC%E5%92%8C%E5%8F%98%E9%87%8F%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="1-改变屏幕背光"><a href="#1-改变屏幕背光" class="headerlink" title="1. 改变屏幕背光"></a>1. 改变屏幕背光</h2><ul><li>和背景色相关的特殊标志位<br><img src="/img/blog_page/3427087-20240626104352250-2084751323.png"></li><li>使能相应标志位电路图<br><img src="/img/blog_page/3427087-20240626104435953-1351139965.png"></li></ul><h2 id="2-把VW变量存放到模拟量寄存器中"><a href="#2-把VW变量存放到模拟量寄存器中" class="headerlink" title="2. 把VW变量存放到模拟量寄存器中"></a>2. 把VW变量存放到模拟量寄存器中</h2><ul><li>VW变量利用<code>模拟量放大器</code>可以转存到模拟量寄存器中，因为屏幕不能直接显示VW变量</li><li>在LOGO中，模拟量寄存器用AM表示<br><img src="/img/blog_page/3427087-20240626104653436-921521047.png"></li></ul><h2 id="3-利用信息文本显示器做文本显示"><a href="#3-利用信息文本显示器做文本显示" class="headerlink" title="3. 利用信息文本显示器做文本显示"></a>3. 利用信息文本显示器做文本显示</h2><ul><li>查找功能块，插入参数<br><img src="/img/blog_page/3427087-20240626104845344-180970209.png"></li><li>屏幕文字分布及格式制作，左边文字部分为手敲。</li><li>放大器放置位置不要超过绿色区域，后面偏灰色的区域是TDE显示用的，如果被部分占用了会导致LOGO屏幕自身的数据显示不完全。<br><img src="/img/blog_page/3427087-20240626105009052-1946594839.png"></li></ul><h2 id="4-建立符合LOGO电路图要求的文本显示电路图"><a href="#4-建立符合LOGO电路图要求的文本显示电路图" class="headerlink" title="4. 建立符合LOGO电路图要求的文本显示电路图"></a>4. 建立符合LOGO电路图要求的文本显示电路图</h2><ul><li>LOGO的文本显示功能块输入输出的标志位不能悬空，要填一个预留的标志位</li><li>此处B005和B006虽然是<code>或</code>关系（做了两个页面切换），但是B006优先级高一些，先显示B006</li><li>只需一个页面的话，把<code>或</code>逻辑去掉是可以的。<br><img src="/img/blog_page/3427087-20240626105144012-950478011.png"></li></ul><h2 id="5-给显示页面增加一个按钮"><a href="#5-给显示页面增加一个按钮" class="headerlink" title="5. 给显示页面增加一个按钮"></a>5. 给显示页面增加一个按钮</h2><ul><li>电路图编程如下，B006(软键)需要输入一个高电平来使能。</li><li>软键的输出值给到一个本地寄存器。<br><img src="/img/blog_page/3427087-20240628163622865-972982874.png"></li><li>软键选瞬动模式，初始关断<br><img src="/img/blog_page/3427087-20240628163641647-1127460352.png"></li><li>在S7连接里面建立给远程设备的交互MB，注意数据交互方向。<br><img src="/img/blog_page/3427087-20240628163702870-1086547718.png"></li><li>在页面设计器里面选择软键<br><img src="/img/blog_page/3427087-20240628163741383-959957097.png"></li><li>在页面内，长按<code>ESC</code>键可以进入软键选择光标，然后正常给按钮ON&#x2F;OFF。<br><img src="/img/blog_page/3427087-20240628165030178-592306700.jpg"></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>LOGO and Smart</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LOGO</tag>
      
      <tag>Smart</tag>
      
      <tag>S7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【IOT2050 question】 Unable to listen on http127.0.0.11880  端口被占用错误</title>
    <link href="/2024/07/21/%5BIOT2050%20question%5D%20Unable%20to%20listen%20on%20http127.0.0.11880%20%20%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%94%99%E8%AF%AF/"/>
    <url>/2024/07/21/%5BIOT2050%20question%5D%20Unable%20to%20listen%20on%20http127.0.0.11880%20%20%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><ul><li>第一次连接node-red的时候，一直出现错误<code>Unable to listen on http://127.0.0.1:1880/</code>。如下：<br><img src="/img/blog_page/3427087-20240702221337614-385367727.png"></li></ul><h2 id="2-原因分析"><a href="#2-原因分析" class="headerlink" title="2. 原因分析"></a>2. 原因分析</h2><ul><li>估计是早前利用<code>iot2050setup</code>小工具把node-red设置为开机自动启动项了，导致1880端口一直被占用。<br><img src="/img/blog_page/3427087-20240702222346203-1378225172.png"></li></ul><h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><ul><li>首先查看端口是否真的被占用，利用<code>sudo netstat -ltup</code>命令可以查看当前系统正在使用。</li><li>发现<code>1880</code>端口赫然在列，程序名是node-red，PID是268<br><img src="/img/blog_page/3427087-20240702221354161-843063943.png"></li></ul><h2 id="4-解决"><a href="#4-解决" class="headerlink" title="4. 解决"></a>4. 解决</h2><ul><li>使用最简单粗暴的方法<code>sudo kill PID</code>，直接关闭正在使用的端口:<br><img src="/img/blog_page/3427087-20240702222937817-649800701.png"></li><li>关闭后再次启动node-red，发现server now running at..<br><img src="/img/blog_page/3427087-20240702223046142-1578774975.png"></li></ul><h2 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h2><ul><li>打开浏览器，输入当前网口的IP，此处我的是<code>http://192.168.0.100:1880</code>,成功进入node-red<br><img src="/img/blog_page/3427087-20240702223404182-1774107527.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>IOT 2050</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debian</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node-red的基本指令</title>
    <link href="/2024/07/21/node-red%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/07/21/node-red%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-inject-debug"><a href="#1-inject-debug" class="headerlink" title="1. inject-&gt;debug"></a>1. inject-&gt;debug</h2><ul><li><p>输入到输出，调试结果在右边</p></li><li><p>如果选择时间戳的话，可以选择立即执行，或者周期性，持续执行<br><img src="/img/blog_page/3427087-20240706171722802-47624864.png"></p></li><li><p>inject除了时间戳还有一些其他输入项可以选择<br><img src="/img/blog_page/3427087-20240706171835903-1169735607.png"></p></li><li><p>inject选择json文件输出</p><ul><li>写好json文件之后点击<code>格式化json</code>，可以校对文件格式<br><img src="/img/blog_page/3427087-20240706190601990-767304598.png"><br><img src="/img/blog_page/3427087-20240706190722339-967215275.png"><br><img src="/img/blog_page/3427087-20240706190821488-371319602.png"></li><li>payload.number可以让输出只输出number的内容<br><img src="/img/blog_page/3427087-20240706190947401-973762559.png"></li></ul></li><li><p>debug右边的按钮，点了之后可以让结果不输出<br><img src="/img/blog_page/3427087-20240706190248288-905488353.png"></p></li></ul><h2 id="2-function"><a href="#2-function" class="headerlink" title="2. function"></a>2. function</h2><ul><li>功能块里面写入函数<br><img src="/img/blog_page/3427087-20240706185726178-1310556682.png"></li></ul><h2 id="3-switch"><a href="#3-switch" class="headerlink" title="3. switch"></a>3. switch</h2><ul><li>选择器，写好条件做筛选用<br><img src="/img/blog_page/3427087-20240706191346650-1762684888.png"></li><li>此时输入的值大于100，由debug2输出<br><img src="/img/blog_page/3427087-20240706191328519-1828484665.png"></li></ul><h2 id="4-change"><a href="#4-change" class="headerlink" title="4. change"></a>4. change</h2><ul><li>文本的改变设置<br><img src="/img/blog_page/3427087-20240706191457434-1203326867.png"></li></ul><h2 id="5-range"><a href="#5-range" class="headerlink" title="5. range"></a>5. range</h2><ul><li>缩放，scale<br><img src="/img/blog_page/3427087-20240706191649462-967684212.png"><br><img src="/img/blog_page/3427087-20240706191540380-1608678509.png"></li></ul><h2 id="6-delay和trigger"><a href="#6-delay和trigger" class="headerlink" title="6. delay和trigger"></a>6. delay和trigger</h2><ul><li>延时使用<br><img src="/img/blog_page/3427087-20240706191746196-1500350791.png"></li><li>触发<br><img src="/img/blog_page/3427087-20240706191854553-1077705240.png"></li></ul><h2 id="7-节点，可以在这里安装网的节点"><a href="#7-节点，可以在这里安装网的节点" class="headerlink" title="7. 节点，可以在这里安装网的节点"></a>7. 节点，可以在这里安装网的节点</h2><ul><li>和下载包一样<br><img src="/img/blog_page/3427087-20240706192407020-1646243288.png"></li><li>下载一个<code>random</code><br><img src="/img/blog_page/3427087-20240706193348544-108404212.png"></li></ul><h2 id="8-http"><a href="#8-http" class="headerlink" title="8. http"></a>8. http</h2><ul><li>拖拽一个<code>http in</code>和一个<code>http response</code><br><img src="/img/blog_page/3427087-20240706192900894-674021172.png"></li><li>对于http设置，有很多种请求方式，这里选择<code>get</code><br><img src="/img/blog_page/3427087-20240706193009680-1189029755.png"></li><li>url的设置是建立在<code>192.168.0.100：1880</code>之后的，取决于实际ip<br><img src="/img/blog_page/3427087-20240706193121951-801031610.png"></li><li>如图，建立一个从http in 到http response的浏览器，url地址填<code>/test</code>，然后部署<br><img src="/img/blog_page/3427087-20240706194156520-2088795974.png"></li><li>在浏览器输入<code>http://192.168.0.100:1880/test</code>，结果如下<br><img src="/img/blog_page/3427087-20240706194258793-1433502697.png"></li></ul><h2 id="9-存储和读写"><a href="#9-存储和读写" class="headerlink" title="9. 存储和读写"></a>9. 存储和读写</h2><ul><li><code>write file</code>和<code>read file</code><br><img src="/img/blog_page/3427087-20240706195356177-401526027.png"></li><li>找到linux下node-red位置<br><img src="/img/blog_page/3427087-20240706195440375-112270478.png"></li><li>切换到<code>bin</code>文件下，建立一个test.txt文件<br><img src="/img/blog_page/3427087-20240706195629264-824491973.png"><br><img src="/img/blog_page/3427087-20240706195845035-1100124748.png"></li><li>在node-red中，write file填入地址<code>usr/bin/</code><br><img src="/img/blog_page/3427087-20240706200050899-468060546.png"></li><li>向文件中写入时间戳(追加方式写入)，并验证<br><img src="/img/blog_page/3427087-20240706200447240-710695408.png"><br><img src="/img/blog_page/3427087-20240706200437523-533272812.png"></li><li>读文件，read file，一样的道理<br><img src="/img/blog_page/3427087-20240706200725744-1251481457.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>node-red</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debian</tag>
      
      <tag>linux</tag>
      
      <tag>node-red</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】网络原理4 -应用层及其相关协议</title>
    <link href="/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%864%20-%E5%BA%94%E7%94%A8%E5%B1%82%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%864%20-%E5%BA%94%E7%94%A8%E5%B1%82%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-常见的协议"><a href="#1-常见的协议" class="headerlink" title="1. 常见的协议"></a>1. 常见的协议</h2><ul><li>HTTP&#x2F;HTTPS</li><li>FTP,文件传输</li><li>DHCP，动态主机配置</li><li>DNS，域名系统</li></ul><h2 id="2-DNS-Domain-Name-System"><a href="#2-DNS-Domain-Name-System" class="headerlink" title="2. DNS,Domain Name System"></a>2. DNS,Domain Name System</h2><ul><li>域名的出现是因为IP不好记，而且不能表达组织&#x2F;公司的名字和性质。</li><li>市面上的网页虽然是域名访问，但是实际还是要靠IP，毕竟服务器过路由器只能通过IP。</li><li><a href="https://wanwang.aliyun.com" title="domain appication">域名申请注册的一个链接</a><br> <img src="/img/blog_page/3427087-20240710220956148-1348519466.png"></li><li>DNS的作用是把域名换算成IP，传输层可以是基于UDP或者是TCP,服务器占用端口53。<br><img src="/img/blog_page/3427087-20240710221501747-1228331826.png"></li><li>DNS常用指令<ul><li><code>ipconfiig/displaydns</code> 展示dns</li><li><code>ipconfig/flushdns</code> 清空dns缓存记录</li><li><code>ping 域名</code></li><li><code>nslookup 域名</code></li></ul></li><li>DNS访问逻辑<ul><li>首先客户端访问最近的一台DNS服务器</li><li>所有的DNS服务器都记录了DNS根域名服务器的IP地址</li><li>上级的DNS服务器记录下一级DNS服务器的IP地址</li><li>全球一共13台IPv4的DNS根域名服务器，25台IPv6的根域名服务器</li><li>下图中的设置就可获取离客户端最近的DNS服务器<br><img src="/img/blog_page/3427087-20240710222247443-1113570147.png"></li></ul></li></ul><h2 id="3-DHCP"><a href="#3-DHCP" class="headerlink" title="3. DHCP"></a>3. DHCP</h2><ul><li>相比于自己设置的静态IP地址，动态IP地址则由DHCP配置，DHCP可以从服务器中自动获取IP地址。</li><li>DHCP基于UDP协议，客户端是68端口，服务器是67端口。</li><li>DHCP服务器会从IP池中挑选一个IP地址出租给客户端一段时间，时间到期就回收。</li><li>很多时候，路由器就可以充当DHCP的服务器。</li><li>DHCP的工作流：<ul><li>DISCOVER：发现服务器：发<code>广播包</code>（源IP是0.0.0.0，目标IP是255.255.255.255,目标MAC是FFFF.FFFF.FFFF）</li><li>OFFER:提供租约：服务器返回可以租用的IP地址，以及租用期限，子网掩码，网关，DNS信息等；可能会有多个服务器同时回应，因为是广播包</li><li>REQUEST:选择IP地址：客户端选择一个OFFER,发送广播包回应</li><li>ACKNOWLEDGE:确认：被选中的服务器发送ACK数据包给客户端</li><li>分配完毕，流程图如下：<br><img src="/img/blog_page/3427087-20240710223633026-1721920998.png"></li></ul></li><li>DHCP可以跨网段分配，但是需要DHCP中继代理实现。</li><li>DHCP常用指令<ul><li><code>ipconfig /all</code> 看到DHCP的详细信息</li><li><code>ipconfig /release</code> 手动释放租约</li><li><code>ipconfig /renew</code> 重新申请IP，申请租约</li></ul></li></ul><h2 id="4-HTTP-超文本传输协议"><a href="#4-HTTP-超文本传输协议" class="headerlink" title="4.HTTP,超文本传输协议"></a>4.HTTP,超文本传输协议</h2><ul><li><p>80是HTTP常用的端口，8080是HTTP测试常用的备用端口</p></li><li><p>如下图，测试了一个http的<code>get</code>请求</p><ul><li>wireshark抓到了get的url<br><img src="/img/blog_page/3427087-20240710225034676-2036538511.png"></li><li>在wireshark中，选择想看的报文，右键，追踪流，HTTP流，可以看到一些清晰的数据流。橙色是客户端请求的流，蓝色是服务器返回的流。<br><img src="/img/blog_page/3427087-20240710225628559-1428408855.png"> </li><li>在一个get指令中，客户端发给服务器的数据有下面这些<br><img src="/img/blog_page/3427087-20240710225224790-1938105407.png"></li><li>服务器返回的数据，此时返回的状态是304<br><img src="/img/blog_page/3427087-20240710225257490-1963871268.png"></li><li>当服务器返回的状态是200时，返回的报文回包括html文件本身<br><img src="/img/blog_page/3427087-20240710230023544-1590116993.png"></li></ul></li><li><p>如下截图，HTTP在发送请求时的格式可以参考下图（请求方法可以变，不一定非得<code>get</code>），包括爬虫的时候也就按照这个格式来模仿。<font color=red>记得报文里面每一行都有回车换行符16#20，空格符也不要忘记。</font><br><img src="/img/blog_page/3427087-20240710230409998-1060787607.png"></p><ul><li>HTTP报文格式,<font color=red>注意空格位置和回车换行符位置，都需要用ascii表达出来</font>。<br><img src="/img/blog_page/3427087-20240710230941267-1463749687.png"></li><li>在wireshark里面也把这种对应关系表现出来了<br><img src="/img/blog_page/3427087-20240710231352089-1422701730.png"></li><li>GET请求不同于post请求，没有请求体，也有长度限制。就算发账户和密码也是以Url的形式明文格式展示：<br><img src="/img/blog_page/3427087-20240710231740869-1336618607.png"></li></ul></li><li><p>请求头字段格式<br><img src="/img/blog_page/3427087-20240710232449076-408055600.png"><br><img src="/img/blog_page/3427087-20240710232510698-1462278816.png"></p></li><li><p>响应头字段格式<br><img src="/img/blog_page/3427087-20240710232724088-1752350935.png"><br><img src="/img/blog_page/3427087-20240710232815298-836892846.png"><br><img src="/img/blog_page/3427087-20240710233012011-648733495.png"></p></li><li><p>状态码</p><ul><li>状态码的分类<br><img src="/img/blog_page/3427087-20240710233115492-1762247702.png"></li></ul></li><li><p>针对上文出现过HTTP返回的状态码为304：此表示虽然客户端的Get请求已经被允许，但是文档的内容自从上次访问后一直没有变化。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Proctocol related</category>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP UDP</tag>
      
      <tag>IP ICMP</tag>
      
      <tag>router switch ARP</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】网络原理1 - 集线器，交换机，网关，路由器</title>
    <link href="/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%861%20-%20%E9%9B%86%E7%BA%BF%E5%99%A8%EF%BC%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%8C%E7%BD%91%E5%85%B3%EF%BC%8C%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    <url>/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%861%20-%20%E9%9B%86%E7%BA%BF%E5%99%A8%EF%BC%8C%E4%BA%A4%E6%8D%A2%E6%9C%BA%EF%BC%8C%E7%BD%91%E5%85%B3%EF%BC%8C%E8%B7%AF%E7%94%B1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-一些零散的知识记录"><a href="#1-一些零散的知识记录" class="headerlink" title="1. 一些零散的知识记录"></a>1. 一些零散的知识记录</h2><ul><li>OSI 七层模型：应表会传网数物</li><li>TCP&#x2F;IP 五层模型：应传网数物</li><li>TCP&#x2F;IP 四层模型：应传网+网络接口</li><li>特定格式，在常用五层模型里面<ul><li>物 -&gt; 电信号<font color=green>（Bits,比特流，有一些类似时钟信号的数据流传输）</font>；</li><li>数据链路 -&gt; MAC地址<font color=green>（Frames,帧）；PPP（路由器之间）协议，CSMA&#x2F;CD（hub,设备间）协议</font>；</li><li>网络 -&gt; IP，ICMP<font color=green>（Packets,包）</font>；</li><li>传输 -&gt; 端口<font color=green>（Segments,段）</font>;</li><li>(应+表+会) -&gt; 共同组成用户数据<font color=green>（报文，用户数据 PDU）</font>；</li></ul></li><li>每一层的主要协议<ul><li>应-&gt;http,https,DNS,TELNET,FTP..;</li><li>传-&gt;TCP,UDP..;</li><li>网-&gt;IP，ARP;</li><li>数据-&gt;IEEE802.11,以太网;</li><li>物-&gt;电信号，光纤信号，比特流，时钟一类..;</li></ul></li><li>常用端口号：<ul><li>HTTP 80 TCP</li><li>DNS 53 TCP UDP</li><li>HTTPS 443 TCP</li><li>SMB 445 TCP </li><li>TELNET 23 TCP</li><li>FTP 20&#x2F;21 TCP</li></ul></li><li>端口：服务器和客户端之间数据交换的窗口。<br><img src="/img/blog_page/3427087-20240711094505800-1219824751.png"></li><li>访问服务器资源：<ul><li><code>http://IP address: port number/project/subproject</code></li><li><code>http://ip 地址：端口号/资源路径</code></li><li><code>http://127.0.0.1：8080/资源路径 -&gt; 127.0.0.1 主机本身</code></li><li><code>http://localhost:8080/资源路径 -&gt; localhost 主机本身</code></li><li><code>Cisco Packet Tracer</code>,计算机网络仿真软件</li></ul></li></ul><h2 id="2-ARP协议"><a href="#2-ARP协议" class="headerlink" title="2. ARP协议"></a>2. ARP协议</h2><ul><li>ARP:<ul><li>通信靠IP是因为好记，但是还需要mac地址来保证通信是正确的。</li><li>在两个设备第一次连接的时候其实只知道对方IP,不知道对方的MAC地址,这时候就需要ARP协议来**<font color=red>广播</font><strong>,让</strong><font color=red>同一个网段</font>**中的所有设备都回复自己是不是请求的目的ip。目的ip就会回复它自己的mac地址了。</li><li>ARP广播包的时候会看到的目标MAC地址是 <u>FFFF.FFFF.FFFF</u>，代表谁都能接收，那就是一个广播。</li><li>ARP连接成功之后，以后就不会再广播来获取mac地址了（mac地址已经被记住了，不会再继续使用ARP协议），开始使用ICMP或者IP通信了。</li><li>如图，一次完整的ARP需要经历三个包：计算机0广播（组包），计算机1回复（请求连接），计算机0响应。<br><img src="/img/blog_page/3427087-20240711094752911-2018576556.png"></li></ul></li></ul><h2 id="3-Hub和Hub机制"><a href="#3-Hub和Hub机制" class="headerlink" title="3. Hub和Hub机制"></a>3. Hub和Hub机制</h2><ul><li>Hub没有存储，存不了IP和mac</li><li>如下过程：第一次计算机0发送ARP广播给下挂的所有计算机，过hub时会把消息同时给到计算机1和2,计算机1因为查找的不是它所以拒绝了；第二次计算机2回复时过hubhub因为其特性又把给消息同时给了计算机1和计算机0,计算机1因为不匹配再次拒绝。所以整个过程出现了很多ARP包而且计算机1拒绝了2次。<br><img src="/img/blog_page/3427087-20240711095321275-1033943764.png"></li><li>因为hub没有筛选，只能无脑群发，所以就算是已知了ip和mac的ICMP协议和PDU也会再次转发给计算机1，然后计算机1拒绝。<br><img src="/img/blog_page/3427087-20240711095402498-509186349.png"></li><li>集线器的特性可以用来查找网络里面一共有多少个设备的mac地址。</li><li>集线器设备越多，效率就会越低。</li></ul><h2 id="4-网桥Bridge"><a href="#4-网桥Bridge" class="headerlink" title="4. 网桥Bridge"></a>4. 网桥Bridge</h2><ul><li>相比于hub，网桥可以通过自学习得知每个接口（左侧，右侧）侧的mac 地址。</li><li>网桥有一个mac表，在已经记录下的mac地址中（学习的过程就逐步的记录mac地址，增加效率），可以排除不在同一侧的mac地址，增加效率。</li><li>网桥在记录的很完整的前提下，可以隔离网桥左边和右边接口的冲突域，实现隔离干扰。</li><li>网桥的缺点就是接口太少，而且冲突域内部的问题解决不了。<br><img src="/img/blog_page/3427087-20240711095604829-861448052.png"></li></ul><h2 id="5-交换机"><a href="#5-交换机" class="headerlink" title="5. 交换机"></a>5. 交换机</h2><ul><li>交换机是具有更多接口的网桥</li><li>交换机全双工通信</li><li>二层交换机没有IP层，只能在同一个网段之间转发数据。现在市面上已经由三层交换机了。</li><li>如图，如果交换机把每个接口的mac地址都学习完了，那么就可以端到端通信了。</li><li>在局域网内，交换机就是数据交换的最终解决方案。</li><li>交换机不会把数据包群发给其他不必要的设备，就没有被其他设备抓包的风险，这一点就比hub安全很多。</li><li>交换机的缺点：交换机的要求是所有设备在同一网段，局域网可以满足。如果在互联网上,IP地址则会显得不够用。另外一方面互联上设备太多，如果全球广播则是灾难，同一时间的全球广播更会造成不可避免的堵塞。<br><img src="/img/blog_page/3427087-20240711095733398-2134187328.png"></li></ul><h2 id="6-路由器"><a href="#6-路由器" class="headerlink" title="6. 路由器"></a>6. 路由器</h2><ul><li>在不同网段之间转发数据</li><li><font color=red>隔离广播域，路由器会把第一次ARP的包给隔离了（但是路由器上的网关会通过ARP协议）。</font></li><li>交换机+路由器：把同一网段的设备搞一起，不同网段的域由路由器连。</li><li>主机发数据之前，首先会判断目标主机的IP地址是否和它在同一个网段:<ul><li>如果在同一个网络-&gt;ARP(ARP只能在同一个网段中传播)；</li><li>如果不在同一个网段-&gt;需要通过网关（路由器提供）-&gt;路由器通过跨网段功能传给目标。</li></ul></li><li><font color=green>通信的两边，路由器一进一出需要两个网关，一个网关负责一边的网段。在路由器内部进行转换。</font><br><img src="/img/blog_page/3427087-20240711095909221-337495836.png"></li></ul><h2 id="7-路由器配置"><a href="#7-路由器配置" class="headerlink" title="7. 路由器配置"></a>7. 路由器配置</h2><ul><li>网关 1（fa0&#x2F;0）配置左边的ip段，约定俗成 <u>ip为.1 结尾</u>。子网掩码255.255.255.0</li><li>网关 2(fa1&#x2F;0)配置右边的ip段，约定俗成 <u>ip为.1 结尾</u>。子网掩码255.255.255.0</li><li>ARP 的广播域过不了路由器<br><img src="/img/blog_page/3427087-20240711100159363-1414955122.png"></li><li><font color=color><strong>为什么要把路由器的网关IP配置在设备的默认网关上？</strong></font>因为第一次连接的时候，不配置的话设备根本不认识目标网关的ip是哪个。<br><img src="/img/blog_page/3427087-20240711100306367-1268921698.png"></li><li>虽然路由器不能过广播域，但是第一次连接的时候，设备还是广播给路由器，<code>为的是获取默认网关的mac地址</code>。同一网段内的网关本身就是在同一网段内的一个设备，设备和网关之间通信还是需要ip+mac。</li><li>路由器网关把自己变成了局域网中的一个设备。路由器处理两个网关之间的数据交互。</li><li>生活中没有手动配置网关是因为用到了<code>DHCP</code>。</li></ul><h2 id="8-MAC地址"><a href="#8-MAC地址" class="headerlink" title="8. MAC地址"></a>8. MAC地址</h2><ul><li>在 ipconfig 里面,MAC地址又可以叫做物理地址（Physical Address）</li><li>如果目标MAC地址不是按照正常格式，而是 ffff.ffff.ffff, 这表示一个广播地址。</li><li>虽然MAC地址是全球唯一的，网卡硬件不可更改，但是可以在电脑里模拟一个假的的MAC地址骗过协议，更改方法如下图：<br><img src="/img/blog_page/3427087-20240711100635839-734009026.png"></li><li>当我们不知道对方MAC地址的时候，可以通过ARP广播来获取。</li><li><font color=green>ARP广播获取mac地址的过程属于动态缓存，存储时间较短，过期了缓存就没有了，需要重新获取</font></li><li>arp -a [主机地址] 查询arp缓存</li><li>arp -d [主机地址] 删除arp缓存</li><li>arp -s [主机地址] [MAC地址] 增加一条arp静态缓存，存储时间比默认的动态缓存长很多。</li></ul><h2 id="9-IP地址（IPv4），子网掩码，网段，主机ID"><a href="#9-IP地址（IPv4），子网掩码，网段，主机ID" class="headerlink" title="9. IP地址（IPv4），子网掩码，网段，主机ID"></a>9. IP地址（IPv4），子网掩码，网段，主机ID</h2><ul><li>IP 地址有两部分组成：网络标识（网段）(192.168.x.)、主机标识(.x)<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns">网段的计算（将子网掩码和 IP 按位与运算）：<br>如 <br><span class="hljs-number">192.168.1.10</span> -&gt; <span class="hljs-number">1100 0000</span>.<span class="hljs-number">1010 1000</span>.<span class="hljs-number">0000 0001</span>.<span class="hljs-number">000 1010</span><br><span class="hljs-number">255.255.255.0</span> -&gt; <span class="hljs-number">1111 1111</span>.<span class="hljs-number">1111 1111</span>.<span class="hljs-number">1111 1111</span>.<span class="hljs-number">0000 0000</span> <br>按位&amp;操作：<br>-&gt; <span class="hljs-number">1100 0000</span>.<span class="hljs-number">1010 1000</span>.<span class="hljs-number">0000 0001</span>.<span class="hljs-number">0000 0000</span> <br>-&gt; <span class="hljs-number">192.168.1.0</span><br></code></pre></td></tr></table></figure></li><li><code>子网掩码的作用就是和ip做按位与运算，以得出网段</code>。</li><li>一般子网掩码 255.255.255.0，因为最低位是0，所以按位与之后得出来的网段一般是IP地位的前三部分。但是如果子网掩码不是255.255.255.0，那么结果就不一样了。</li><li><font color=green><strong>计算技巧：</strong>一般子网掩码是 255.255.255.0，那么主机 ID 一般是（256-2）个 &#x2F; 子网掩码是 255.255.0.0,那么主机 ID 一般是（256*256）-2，长度增加很多倍。（减 2 是因为主机 ID 0 一般不用，255 一般不用）&#x2F; 子网掩码 255 所占部分一般理解为网段 ID 占用部分，0 占用部分一般理解为主机 ID 占用部分。</font></li><li>计算机通信之前，首先就会根据 IP 和子网掩码计算出目标主机和自己在不在一个网段，如果在则不需要路由器转发。如果不在就交给路由器转发。</li><li>127 是保留网段，不随便用，其中 127.0.0.1 叫做<code>本地环回地址</code>（Loopback），仅代表本机地址。</li><li><code>子网掩码的 CIDR 表示方法</code>：如 192.168.1.100&#x2F;24，代表子网掩码有24 个 1，就是 255.255.255.0；如 192.168.1.100&#x2F;16，代表子网掩码有 16 个 1，就是 255.255.0.0</li></ul><h2 id="10-子网，超网"><a href="#10-子网，超网" class="headerlink" title="10. 子网，超网"></a>10. 子网，超网</h2><ul><li>首先判断网段的类型，是 A 类网络，B 类网络，C 类型网络？</li><li>默认情况：A 类子网掩码位数是 8，B 类子网掩码位数是 16，C 类子网掩码位数是 24。</li><li>然后如果该网段的子网掩码位数比默认的子网掩码位数多，就叫做子网；该段的子网掩码位数比默认的子网掩码位数少，就叫做超网。</li></ul><h2 id="11-路由"><a href="#11-路由" class="headerlink" title="11. 路由"></a>11. 路由</h2><ul><li>在不同网段之间转发数据需要路由器。</li><li><font color=red>默认情况下路由器只知道和他直连的网段（下图中计算机 0 可以ping 通计算机 1）</font>，非直连的网段（路由器 0 到路由器 1）需要通过静态路由，动态路由告诉他，不然通不了。路由器和路由器之间连接的 port 口叫做 Serial 口，买路由器的时候可以选支持几个 Serial 口的路由器，和设备或者交换机连的叫 Ethernet 口。<br><img src="/img/blog_page/3427087-20240711101235364-1636330405.png"></li><li>静态路由：管理员手动添加，告诉路由器怎么连。</li><li>动态路由，路由器通过 RIP&#x2F;ASPF 等路由选择协议自动获取路由信息。</li><li>静态路由的操作原理:路由器两端相互告诉对方自己直连的网段有哪些，用<code>路由表</code>表达。</li><li>路由器之间想要联通，路由器和路由器连接端口的 ip 必须设置，而且他们<code>需要在同一个网段</code>。<br><img src="/img/blog_page/3427087-20240711101330772-1588256375.png"></li><li>路由器配置网络(路由器要跳进去的目标网段)，掩码，<code>下一跳</code>（表示当前路由器要进入的下一个路由器端口的 IP，只需要 IP 不需要子网掩码是因为路由器连接之间的 ip 必须是同一网段）</li><li>下图里面 4 个网段，都想要连通就都要配。<br><img src="/img/blog_page/3427087-20240711101431178-1442881053.png"><br><img src="/img/blog_page/3427087-20240711101447721-723098966.png"></li><li>路由表长什么样，（C 表示和路由器直接连接在一起的设备，直连的所以往往没有下一跳）S 表示静态（static，是人为配置的静态路由）。<br><img src="/img/blog_page/3427087-20240711101534455-1802411220.png"></li><li>路由表的写法：子网掩码是 255.255.255 相当于把 IP 写死；255.255.255.0 留了一个主机 ID 段出来；0.0.0.0 默认路由，哪个网段都能接收。<br><img src="/img/blog_page/3427087-20240711101612589-207746951.png"></li><li>路由表就是在查找下一跳，直接跳到对应的路由器端口去。</li></ul><h2 id="12-数据包的传输数据流"><a href="#12-数据包的传输数据流" class="headerlink" title="12. 数据包的传输数据流"></a>12. 数据包的传输数据流</h2><p><img src="/img/blog_page/3427087-20240711101856391-1158592152.png"></p><ul><li>在上图中，目的是项从计算机 A 把数据传到计算机 F。途中MA&#x2F;M0&#x2F;M1&#x2F;M2&#x2F;M3&#x2F;MF 是网卡的 mac 地址。</li><li>源 IP 是 192.168.1.10，目标 IP 是 192.168.3.10 没有问题，但是目标MAC 是 M0，原因是路由器隔离了广播，ARP 只能到对应路由端口侧mac 地址，到不了 MF。</li><li>Mac 的跳转需要发生好几次变化。<br><img src="/img/blog_page/3427087-20240711101917439-1151086719.png"></li></ul><h2 id="13-网络"><a href="#13-网络" class="headerlink" title="13. 网络"></a>13. 网络</h2><ul><li>LAN，局域网，局域网中用到的广泛网络技术叫做以太网（Ethernet）</li><li>WLAN，无线局域网（wireless LAN）</li><li>WAN, 广域网，通常这个程度需要需要租用网络服务供应商（ISP）的服务器了。</li><li>猫是调制解调器，电话拨号上网叫做 ADSL。<br><img src="/img/blog_page/3427087-20240711102027300-2082686146.png"></li><li>光猫是光调制解调器，光纤（光信号）取代了电话线（模拟信号）。非对称的概念就是上行带宽和下行带宽可以不一致。<br><img src="/img/blog_page/3427087-20240711102054186-600771052.png"></li><li>网线直接入户<br><img src="/img/blog_page/3427087-20240711102130791-1183325409.png"></li><li>公网 IP（因特网，ISP 服务器用到）：只能到达公网的路由表，没有到达私网的路由表。</li><li>私网 IP 地址（局域网用到）：A 类 10.0.0.0&#x2F;8 B 类：172.168.0.0&#x2F;16 ~ 172.31.0.0&#x2F;16 C 类：192.168.0.0&#x2F;24 ~ 192.168.255.0&#x2F;24</li><li>公网 IP 一定是唯一的，私网 IP 是可以重复和随意使用的。</li></ul><h2 id="14-NAT转换"><a href="#14-NAT转换" class="headerlink" title="14. NAT转换"></a>14. NAT转换</h2><ul><li>Network address translation,私网 IP 可以通过 NAT 转换变为公网 IP。</li><li>NAT 转换可以隐藏真实的 IP，但是真要查还是可以从 ISP 那里查到真实 IP。</li><li>简单理解，可以用 NAT 来跨网段。</li><li>局域网内用NAT来跨网段通信。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Proctocol related</category>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP UDP</tag>
      
      <tag>IP ICMP</tag>
      
      <tag>router switch ARP</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】网络原理2 - 互连模型，物理层，数据链路层，网络层及其相关协议</title>
    <link href="/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%862%20-%20%E4%BA%92%E8%BF%9E%E6%A8%A1%E5%9E%8B%EF%BC%8C%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%8C%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%8C%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%862%20-%20%E4%BA%92%E8%BF%9E%E6%A8%A1%E5%9E%8B%EF%BC%8C%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%8C%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%8C%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-五层模型"><a href="#1-五层模型" class="headerlink" title="1. 五层模型"></a>1. 五层模型</h2><ul><li>层层叠加，层层封装<br><img src="/img/blog_page/3427087-20240711102452387-536952018.png"></li></ul><h2 id="2-数据链路层中的一些概念"><a href="#2-数据链路层中的一些概念" class="headerlink" title="2. 数据链路层中的一些概念"></a>2. 数据链路层中的一些概念</h2><ul><li>MTU: 最大传输单元，每一种数据链路层协议都规定了最大能传送的帧的数据长度上限，<code>以太网的 MTU 最大为 1500bytes,最小为64bytes。</code></li><li>数据链路层会在数据包的左边（帧开始&#x2F;结束符）右边（帧开始&#x2F;结束符）都封装一些东西，封装成帧。通过帧开始结束符来判定当前帧从哪开始，从哪结束。为了防止误把数据当作帧的开始&#x2F;结束符，链路上和开始&#x2F;结束符同名的数据需要加上转义字符，解析的时候再去掉转义字符。<br><img src="/img/blog_page/3427087-20240711102638305-337908750.png"></li><li>FCS: 差错检验<br><img src="/img/blog_page/3427087-20240711102705684-1250232405.png"></li><li>CSMA&#x2F;CD 协议被称为载波侦听多路访问&#x2F;冲突检测协议。使用CSMA&#x2F;CD 的网络可以被称为以太网，它传输的是以太网帧。以太网帧的格式有<code>Ethernet V2</code>、<code>IEEE802.3</code> 等。为了正常检测正在发生的帧是否产生了冲突，以太网的帧至少需要 64bytes。交换机组成的网络虽然支持全双工，已不需要 CSMA&#x2F;CD 协议了，但是传输的帧依旧是以太网帧，所以交换机组成的网络依旧可以称为以太网。</li><li>PPP协议也是数据链路层的，不怎么熟悉，就不写了。</li><li>64bytes 的最小字节，如果从上层自下层的数据量都还不够，数据链路层会自动补全首部和尾部帧到 64bytes。</li><li>下图 Ethernet V2 的帧格式,帧只在数据链路层封装<br><img src="/img/blog_page/3427087-20240711103224887-1675100335.png"></li><li>为什么数据的长度至少是 46 字节？因为[64-(6+6+2+4)]&#x3D;46bytes</li><li>如果数据包下发下来总长不够 46bytes 怎么办？如下图“填充”部分：<br><img src="/img/blog_page/3427087-20240711103318258-1729816968.png"></li><li>物理网卡在接收到一个帧之后，首先会进行差错校验，如通过则接收，若失败则丢弃。</li><li>WireShark 抓到的帧一定没有 FCS,因为它抓到的是差错校验通过的帧，FCS 已经被硬件丢掉了。</li></ul><h2 id="3-网络层中的一些概念"><a href="#3-网络层中的一些概念" class="headerlink" title="3. 网络层中的一些概念"></a>3. 网络层中的一些概念</h2><ul><li>IP 数据包，网络层数据包，通常称为包（package）<br><img src="/img/blog_page/3427087-20240711103537258-1808877533.png"></li><li>因为帧不能超过 1500bytes，所以超过 1500bytes 的数据在网络层会被切片（fragments）传输给数据链路层，每一片都有自己的网络层首部。</li><li>网络层标志字段用来表达切片，片偏移字段是 byte 的倍数。</li><li>网络层协议字段表达了数据使用的协议是什么，含义如下图：<br><img src="/img/blog_page/3427087-20240711103621687-958005941.png"></li><li>ARP, IP, ICMP 协议都是直接工作在网络层的协议。如果 wireshark 抓到的协议是 ICMP 协议发送的，那它一定只有三层（比如 ping ）</li><li><code>生存时间（Time To Live）</code>：每个<font color=red>路由器</font>在转发之前都会将 TTL 减 1，一旦减到 0 了，路由器就会返回错误而不会转发数据。Windows 系统的默认 TTL 是 128，其他的系统有区别。从 Ping 指令返回的 TTL可以用来推断目标 IP 过了大概经历了多少个路由器，甚至可以推测服务器大概率运行在哪个系统上的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Proctocol related</category>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP UDP</tag>
      
      <tag>IP ICMP</tag>
      
      <tag>router switch ARP</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【笔记】网络原理3 - 传输层及其相关协议</title>
    <link href="/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%863%20-%20%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/07/21/%5B%E7%AC%94%E8%AE%B0%5D%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%863%20-%20%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-传输层中的一些基本概念"><a href="#1-传输层中的一些基本概念" class="headerlink" title="1. 传输层中的一些基本概念"></a>1. 传输层中的一些基本概念</h2><ul><li>TCP 和 UDP 的一些区别<br><img src="/img/blog_page/3427087-20240711103829605-264512281.png"></li><li>UDP 的数据格式，伪首部是固定的 12bytes，源 IP 为 0 17，也是固定表示 UDP 的。伪首部仅仅是用来计算校验和，不会传给网络层。</li><li>源端口&#x2F;目标端口：就是平时用到的 port。源端口是临时开启的随机端口，目标端口有一些常用端口号如下图</li><li>UDP 首部就 8bytes<br><img src="/img/blog_page/3427087-20240711103933604-703505020.png"></li></ul><h2 id="2-TCP-的数据格式"><a href="#2-TCP-的数据格式" class="headerlink" title="2. TCP 的数据格式"></a>2. TCP 的数据格式</h2><p><img src="/img/blog_page/3427087-20240711104032660-1320246099.png"></p><ul><li><strong><font color=green>数据偏移*4&#x3D;数据长度，整个 TCP 长度 &#x3D; 20byte 首部+数据长度。</font></strong></li><li><strong><font color=green>传输层的数据长度 &#x3D; 网络层的总长度 – 网络层的首部长度 – 传输层的首部长度。</font></strong></li><li>TCP 的[SYN]标志位：SYN&#x3D;1，ACK&#x3D;0 表示一个建立连接的请求；对方如果回复 SYN&#x3D;1,ACK&#x3D;1,则表示同意建立连接。</li></ul><h2 id="3-TCP的自动重传ARQ-连续ARQ-滑动窗口协议"><a href="#3-TCP的自动重传ARQ-连续ARQ-滑动窗口协议" class="headerlink" title="3. TCP的自动重传ARQ,连续ARQ,滑动窗口协议"></a>3. TCP的自动重传ARQ,连续ARQ,滑动窗口协议</h2><ul><li>停止等待 ARQ 协议：TCP 的自动重传请求，如下：<br><img src="/img/blog_page/3427087-20240711104308706-487298594.png"><br><img src="/img/blog_page/3427087-20240711104332239-407444143.png"></li><li>比 ARQ 效率高的连续 ARQ 和滑动窗口协议<br><img src="/img/blog_page/3427087-20240711104513456-765125359.png"></li><li>SACK(选择性确认)：不同于上述的连续 ARQ，它的先进在于如果一旦发现数据丢失，不会把整个分组重传，它可以查得到是该分组内第几个包丢了，并重发当前包，最多携带 4 组。<br><img src="/img/blog_page/3427087-20240711104607877-1890924898.png"></li></ul><h2 id="4-从wireshark来看TCP的分段传输"><a href="#4-从wireshark来看TCP的分段传输" class="headerlink" title="4. 从wireshark来看TCP的分段传输"></a>4. 从wireshark来看TCP的分段传输</h2><ul><li>从一段抓包来研究 TCP，在下面包里，从第 5 行开始看：首先从5-9 行，服务器一口气发了 5 个数据包过来，第 10 行客户端才开始确认，确认完毕后服务器从第 11 行又开始往下发数据。<code>Seq是序号，表示发送的数据包第一个字节的编号。Ack 是确认，表示确认收到了多少个字节，接下来从多少字节开始发。</code>第 5-9 行都是服务器发送的数据，Seq 从 1 一直增加到了 4153，len 第一是 312，后面是 1280。但是 Ack 一直是 748 没有变。第 10 行客户端的回复中看出来。客户端的 Req 是 748，Ack 是 5433，表示客户端一口气收到了 5 个服务器发来的数据，并希望服务器继续从 5433bytes 开始发。所以第 11 行，服务器继续从 5433 开始开始发送数据。这里的 Seq 一直是相对 Seq，在传输过程中，原始Seq（raw Seq）是累加的，会特别大。<code>Win</code> 表示窗口，这个字段有流量控制的功能，用来告知对方下一次允许发送的数据大小，避免流量堵塞，发送方的窗口大小不能比接收方的窗口大。<br><img src="/img/blog_page/3427087-20240711104845847-1967092218.png"></li><li>**<font color=red>我们数据选择在传输层就分段传输，而没有在网络层切片的原因？</font>**因为数据链路和网络层都没有重传功能，没有可靠传输的功能，但是传输层有 <code>ARQ/SACK</code>。<br><img src="/img/blog_page/3427087-20240711105014738-1619490810.png"></li></ul><h2 id="5-TCP的建立连接过程"><a href="#5-TCP的建立连接过程" class="headerlink" title="5. TCP的建立连接过程"></a>5. TCP的建立连接过程</h2><p><img src="/img/blog_page/3427087-20240711105414110-1851052915.png"></p><ul><li>流量控制：Win 表示窗口，这个字段有流量控制的功能，用来告知对方下一次允许发送的数据大小，避免流量堵塞，发送方的窗口大小不能比接收方的窗口大。rwnd 表示接收窗口,swnd 表示发送窗口,cwnd 表示拥塞窗口。</li><li>MSS（Max Segment Size）:每个段最大的数据部分大小，只会在建立连接的时候出现。在建立连接的时候协商好<font color=green>(下图可以看客户端给服务器 1460，服务器回客户端 1412。最终以较小的部分为准)</font>，如下图，在 TCP 的三次握手报文中，MSS&#x3D;1460。SYN&#x3D;1，ACK&#x3D;0 表示一个建立连接的请求；对方如果回复 SYN&#x3D;1,ACK&#x3D;1,则表示同意建立连接。<br><img src="/img/blog_page/3427087-20240711105208538-1512945620.png"></li></ul><h2 id="6-Seq-和-Ack-之间的交互"><a href="#6-Seq-和-Ack-之间的交互" class="headerlink" title="6. Seq 和 Ack 之间的交互"></a>6. Seq 和 Ack 之间的交互</h2><p><img src="/img/blog_page/3427087-20240711105347303-474439199.png"></p><h2 id="7-从wireshark看TCP释放连接的过程"><a href="#7-从wireshark看TCP释放连接的过程" class="headerlink" title="7. 从wireshark看TCP释放连接的过程"></a>7. 从wireshark看TCP释放连接的过程</h2><ul><li>抓包解释释放连接过程：第一次挥手时，主机 1 主动发送出 FIN 报文段，表示主机 1 告诉主机 2，主机 1 已经没有数据要发送了，但是此时主机 1 还可以接受来自主机 2 的数据。第二次挥手时，当主机 2 返回 ACK 报文段时，表示主机 2 已经知道主机 1 没有数据发送了，但是主机 2 还是可以发送数据到主机 1 的。第三次挥手时，当主机 2 也发送了一个 FIN 报文段时，表示主机 2 告诉主机 1，主机 2 已经没有数据要发送了。第四次挥手时，当主机 1 返回 ACK 报文段时，表示主机 1 已经知道主机 2 没有数据发送了，随后整个 TCP 连接正式断开。<br><img src="/img/blog_page/3427087-20240711105531892-1659362265.png"></li><li>释放连接的 4 次挥手过程：<br><img src="/img/blog_page/3427087-20240711105602120-1934759627.png"></li><li>如果有时抓包只看到 3 次挥手，那是因为第 2，3 次挥手合并了。<br><img src="/img/blog_page/3427087-20240711105638796-119022716.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Proctocol related</category>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP UDP</tag>
      
      <tag>IP ICMP</tag>
      
      <tag>router switch ARP</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Edge浏览器屏蔽csdn</title>
    <link href="/2024/07/21/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B1%8F%E8%94%BDcsdn/"/>
    <url>/2024/07/21/Edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B1%8F%E8%94%BDcsdn/</url>
    
    <content type="html"><![CDATA[<p>#<font color=red><u><em>因为不喜欢，所以眼不见心不烦</em></u></font></p><ul><li><p>打开edge浏览器，地址栏输入以下url：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 英文输入:</span><br><span class="hljs-symbol">edge:</span><span class="hljs-comment">//settings/searchEngines?search=manage</span><br><br><span class="hljs-meta"># 简中输入:</span><br><span class="hljs-symbol">edge:</span><span class="hljs-comment">//settings/searchEngines?search=管理</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_page/3427087-20240718104916818-114590875.png"></p></li><li><p>添加一个新的地址栏搜索引擎</p><ul><li>搜索引擎随便填</li><li>快捷方式随便填,不要和原有的重复就行</li><li>查询url如图填写：<br><img src="/img/blog_page/3427087-20240718105348996-1312101205.png"><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 以 %s 代替查询的 URL</span><br><span class="hljs-symbol">https:</span><span class="hljs-comment">//cn.bing.com/search?q=%s+-csdn</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>最后清除浏览历史记录，避免打开之前浏览的页面</p></li><li><p>#<font color=green>世界清静。</font></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Other items</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS模块应用</title>
    <link href="/2024/07/21/%5Bpython%5DOS%E6%A8%A1%E5%9D%97%E5%BA%94%E7%94%A8/"/>
    <url>/2024/07/21/%5Bpython%5DOS%E6%A8%A1%E5%9D%97%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>OS提供许多和操作系统交互的功能，允许访问文件，目录，进程，环境变量等。</p><ul><li><p>导入模块,<code>import os</code></p></li><li><p>获取当前工作目录,<code>os.getcwd()</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">current_dir</span>=os.getcwd()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前工作目录：&quot;</span>,current_dir)<br><br>&gt;&gt;&gt;   当前工作目录： C:\Users\wuyucun<br></code></pre></td></tr></table></figure></li><li><p>创建目录,<code>os.mkdir()</code></p><ul><li>会把文件夹建立在当前.py文件的所在文件夹的同一层级中。<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">current_dir=<span class="hljs-built_in">os</span>.getcwd()<br>new_dir=<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(<span class="hljs-built_in">os</span>.getcwd(),<span class="hljs-string">&quot;my_directory&quot;</span>)<br><span class="hljs-built_in">os</span>.mkdir(new_dir)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>遍历目录,<code>os.listdir</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">files</span>=os.listdir(os.<span class="hljs-built_in">getcwd</span>())<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">file</span> in <span class="hljs-keyword">files</span>:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">file</span>)<br><br></code></pre></td></tr></table></figure></li><li><p>删除文件或者目录,使用<code>os.remove（）</code>删除文件，<code>os.rmdir()</code>删除目录</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">file_to_delete=<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(<span class="hljs-built_in">os</span>.getcwd(),<span class="hljs-string">&quot;file_to_delete.txt&quot;</span>)<br><span class="hljs-built_in">os</span>.<span class="hljs-built_in">remove</span>(file_to_delete)<br><br>dir_to_delete=<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(<span class="hljs-built_in">os</span>.getcwd()，<span class="hljs-string">&quot;dir_to_delete&quot;</span>)<br><span class="hljs-built_in">os</span>.rmdir(dir_to_delete)<br></code></pre></td></tr></table></figure></li><li><p>执行系统命令,使用<code>os.system()</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">os.<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;calc&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>获取环境变量,使用<code>os.environ</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(os.environ)</span></span><br></code></pre></td></tr></table></figure></li><li><p>路径操作，使用<code>os.path</code></p><ul><li>文件名获取<code>os.path.basename()</code></li><li>目录名获取<code>os.path.dirname()</code></li><li>文件拓展名获取<code>os.path.splitext()[1]</code><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">path</span>=<span class="hljs-string">&quot;/path/to/file/file.txt&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件名：&quot;</span>,<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.basename(<span class="hljs-built_in">path</span>))<br><br>&gt;&gt;&gt;文件名： file.txt <br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">path</span>=<span class="hljs-string">&quot;/path/to/file/file.txt&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;目录名：&quot;</span>,<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.dirname(<span class="hljs-built_in">path</span>))<br><br>&gt;&gt;&gt;目录名： /<span class="hljs-built_in">path</span>/to/file<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">path</span>=<span class="hljs-string">&quot;/path/to/file/file.txt&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件拓展名：&quot;</span>,<span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.splitext(<span class="hljs-built_in">path</span>)[<span class="hljs-number">1</span>])<br><br>&gt;&gt;&gt;文件拓展名： .txt<br></code></pre></td></tr></table></figure></li></ul></li><li><p>计算绝对路径，相对路径，使用<code>os.path.join()</code>;<code>os.path.relpath()</code>。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">txt_path=<span class="hljs-string">&quot;/path/to/file/file.txt&quot;</span><br>pic_path=<span class="hljs-string">&quot;/path/to/file/pic/file/my_pic.png&quot;</span><br>pic_path_abs=os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.dirname</span>(pic_path)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;绝对路径：&quot;</span>,pic_path)</span></span><br>pic_path_rel=os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.relpath</span>(pic_path_abs,os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.dirname</span>(txt_path))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;相对路径：&quot;</span>,pic_path_rel)</span></span><br>pic_path_rel_withname=os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.join</span>(pic_path_rel,os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.basename</span>(pic_path))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;相对路径带文件名：&quot;</span>,pic_path_rel_withname)</span></span><br><br>&gt;&gt;&gt;绝对路径： /path/to/file/pic/file/my_pic<span class="hljs-selector-class">.png</span><br>&gt;&gt;&gt;相对路径： pic\file<br>&gt;&gt;&gt;相对路径带文件名： pic\file\my_pic.png<br></code></pre></td></tr></table></figure></li><li><p>使用<code>os.path.exists()</code>判断路径指向位置是否存在</p></li><li><p>使用<code>os.path.isabs()</code>判断路径是否是绝对路径</p></li><li><p>使用<code>os.path.isfile()</code>或者<code>os.path.isdir()</code>判读是否是文件或者路径</p></li><li><p>使用<code>os.rename(src,dst)</code>重命名文件或者路径</p></li><li><p>使用<code>os.name</code>获得程序当前的运行环境(这是个属性)，目前有<code>posix,nt,java</code></p></li><li><p>拓展</p><ul><li><code>./</code>在相对路径中表示当前目录，比如同一文件夹下有两个文件1.html和2.html。用<code>&lt;a href=&quot;./2.html&quot;&gt;跳转到2.html&lt;/a&gt;</code>。</li><li><code>../</code>代表上一级文件夹</li><li><code>../../</code>代表上上级文件夹，以此类推</li><li><code>./下一级文件夹/.1html</code>下一级目录。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2024/07/21/%5Bregex%5D%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/07/21/%5Bregex%5D%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-参考及测试文本"><a href="#1-参考及测试文本" class="headerlink" title="1. 参考及测试文本"></a>1. 参考及测试文本</h2><ul><li><a href="http://regex101.com" title="regex">正则表达式在线测试工具</a>,选python语言，python字符串前直接加<code>r</code>防止正则表达式被转义</li><li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">github上找的学习资料</a></li><li>测试字符串（随便敲的）<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">The fat <span class="hljs-keyword">cat</span> sat <span class="hljs-keyword">on</span> the <span class="hljs-keyword">mat</span><br>The car parked in the garage<br>A garage <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> good place <span class="hljs-keyword">to</span> park <span class="hljs-keyword">a</span> car<br>good place.<br>The fat <span class="hljs-keyword">cat</span> sat <span class="hljs-keyword">on</span> the concatenation<br>The fat <span class="hljs-keyword">cat</span> sat <span class="hljs-keyword">on</span> the <span class="hljs-keyword">mat</span>.<br>The <span class="hljs-keyword">number</span> was <span class="hljs-number">9.99997</span> but we <span class="hljs-built_in">round</span> it off <span class="hljs-keyword">to</span> <span class="hljs-number">10.0</span>.<br>The fat <span class="hljs-keyword">cat</span> sat <span class="hljs-keyword">on</span> the <span class="hljs-keyword">mat</span>.<br>Hello____hi.<br>abcffdAshsabc<br>cbtcbbt.<br>cbjssjstsadsff<br>ct<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-常用运算符阐释"><a href="#2-常用运算符阐释" class="headerlink" title="2. 常用运算符阐释"></a>2. 常用运算符阐释</h2><ul><li><code>.</code>:点运算符，可以匹配任意单个字符，但不包括换行符</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">.<span class="hljs-keyword">ar</span><br>可以匹配任意一个后面跟着<span class="hljs-keyword">ar</span>的字符<br></code></pre></td></tr></table></figure><ul><li><code>[]</code>:字符集，匹配的内容由中括号中的内容决定</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[Tt]</span>he<br>匹配The和the<br>t<span class="hljs-selector-attr">[.]</span> <br>方括号中的.就是英文半角的句号，没有特殊含义;但是如果不用<span class="hljs-selector-attr">[]</span>，.就是一个特殊字符，需要靠/转义。<br><span class="hljs-selector-attr">[a-z0-9_-]</span><br>匹配小写字母<span class="hljs-selector-tag">a</span>-z,数字<span class="hljs-number">0</span>-<span class="hljs-number">9</span>，下划线_<br></code></pre></td></tr></table></figure><ul><li><code>[^]</code>:否定字符集</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[^c]</span>ar<br>匹配一个后面是ar的字符，但是这个字符是除了c以外的。<br><span class="hljs-selector-attr">[^a-z0-9_-]</span><br>匹配除小写字母<span class="hljs-selector-tag">a</span>-z,数字<span class="hljs-number">0</span>-<span class="hljs-number">9</span>，下划线_之外的任意字符，包括换行符<br></code></pre></td></tr></table></figure><ul><li><code>*</code>:重复次数，判断<code>*</code>前面的字符或者字符集是否在范围内，不在范围内匹配次数也会加1次。匹配0次或者更多次<code>*</code>前面的字符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[a-z]*<br>匹配所有前面是小写字母的字符串<br>\s*<span class="hljs-built_in">cat</span>\s*<br>匹配空格开头空格结尾中间是<span class="hljs-built_in">cat</span>的字符串，或者中间是<span class="hljs-built_in">cat</span>的字符串<br></code></pre></td></tr></table></figure><ul><li><code>+</code>:<code>+</code>前面的字符串至少出现一次会被匹配</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span>.t<br><span class="hljs-keyword">c</span>和t中间跟除了换行符以为的任意字符<br><span class="hljs-keyword">c</span>.+t<br><span class="hljs-keyword">c</span>和t之间跟一个或者多个字符，至少一个字符，<span class="hljs-number">0</span>个不行。<br></code></pre></td></tr></table></figure><ul><li><code>？</code>:推断匹配字符在或者不在</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">[T]?<span class="hljs-keyword">he</span><br>可以匹配The和<span class="hljs-keyword">he</span><br></code></pre></td></tr></table></figure><ul><li><code>&#123;&#125;</code>:用来限定出现次数，左边右边靠<code>，</code>隔开</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[0<span class="hljs-string">-9</span>]&#123;2,3&#125;<br>匹配最少2位最多3位0<span class="hljs-string">-9</span>之间的数字<br></code></pre></td></tr></table></figure><p> -<code>（...）</code>:集合</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">（c|<span class="hljs-type">g</span>|<span class="hljs-type">p</span>）ar<br>可以匹配car或gar或par<br></code></pre></td></tr></table></figure><ul><li><code>|</code>:或运算符</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">（T|<span class="hljs-type">t</span>）he|<span class="hljs-type">car</span><br>匹配The或the或car<br></code></pre></td></tr></table></figure><ul><li><code>\</code>:转义字符，把<code>&#123;&#125;[]/\+*.$^|?</code>转换成普通字符</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">（f|<span class="hljs-type">c</span>|<span class="hljs-type">m</span>）<span class="hljs-built_in">at</span>\.?<br>匹配fat或者cat或者mat加上句号.或者不加.<br></code></pre></td></tr></table></figure><ul><li><code>^</code> <code>$</code>:<code>^</code>指定字符串开头，和<code>[^]</code>不一样，<code>$</code>指定字符串结尾</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">^(<span class="hljs-built_in">T</span>|<span class="hljs-built_in">t</span>)he<br>匹配和The或者the开头的字符串<br></code></pre></td></tr></table></figure><ul><li><p><code>\w</code>:匹配所有字母</p></li><li><p><code>\W</code>:匹配所有非字母</p></li><li><p><code>\d</code>:匹配所有数字</p></li><li><p><code>\D</code>:匹配所有非数字</p></li><li><p><code>\s</code>:匹配所有空格</p></li><li><p><code>\S</code>:匹配所有非空格</p></li><li><p><code>\n</code>:匹配换行符</p></li><li><p><code>\r</code>:匹配回车符</p></li><li><p><code>\t</code>:匹配制表符</p></li><li><p><code>?=</code>:表示第一部分表达式后面必须跟<code>?=</code>后面的东西</p></li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">（<span class="hljs-built_in">T</span>|<span class="hljs-built_in">t</span>）he(?=\sfat)<br>表示匹配的The或者the后面必须跟空格 fat<br></code></pre></td></tr></table></figure><ul><li><code>?!</code>:表示第一部分表达式后面必须不跟<code>?!</code>后面的东西</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">（<span class="hljs-built_in">T</span>|<span class="hljs-built_in">t</span>）he(?！\sfat)<br>表示匹配的The或者the后面必须不跟空格 fat<br></code></pre></td></tr></table></figure><ul><li><code>?&lt;=</code>:相比于<code>?=</code>，这个后面必须跟一个其他的格式</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">（?&lt;=(T|t)<span class="hljs-keyword">he</span>\s）(fat|<span class="hljs-keyword">mat</span>)<br>匹配fat或者<span class="hljs-keyword">mat</span>,但是前面必须跟The 空格 或者 the 空格<br></code></pre></td></tr></table></figure><ul><li><code>?&lt;！</code>:相比于<code>?！</code>，这个后面必须跟一个其他的格式</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">（?&lt;！(T|t)<span class="hljs-keyword">he</span>\s）(<span class="hljs-keyword">cat</span>)<br>匹配<span class="hljs-keyword">cat</span>,但是前面必须不跟The 空格 或者 the 空格<br></code></pre></td></tr></table></figure><ul><li><code>i</code>:忽略大小写。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/The/gi</span><br>g表示全局搜索，全局搜索The,并且忽略大小写，所以The和the都可以。<br></code></pre></td></tr></table></figure><ul><li>贪婪匹配和惰性匹配<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">/(.*<span class="hljs-keyword">at</span>)/<br>正则表达式默认会去搜索 任意字符+<span class="hljs-keyword">at</span>的字符串，并且匹配尽可能长的子串（字符串匹配直到遇到空格符或者换行符等），这就是贪婪匹配模式<br>/(.*?<span class="hljs-keyword">at</span>)/<br>转换成惰性匹配模式，字符串到<span class="hljs-keyword">at</span>就结束了。<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github+hexo</title>
    <link href="/2024/07/21/github+hexo/"/>
    <url>/2024/07/21/github+hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ul><li><p>安装git</p><ul><li><a href="https://www.cnblogs.com/xiacuncun/p/18248092">git安装方法</a>，按教程去安装完成它。</li><li><code>git --version</code> 用于验证安装结果</li></ul></li><li><p>安装node.js</p><ul><li><p>需要安装node.js,npm安装包也包括在里面的。官网：<a href="https://nodejs.cn/download/">在这里下载node.js</a></p></li><li><p>官网下载node.js稳定版或者最新版本，一路默认</p></li><li><p>完整安装后，cmd敲<code>node -v</code> 和 <code>npm -v</code> 验证安装结果。记得是开cmd验证，不是在git bash里验证，验证结果如图所示：<br><img src="/img/blog_page/3427087-20240719231326262-99691395.png"></p></li><li><p><font color=red><del>使用国内镜像源 npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></del>。这里有坑，24年之后就不要用这个就域名了，它https证书过期了，使用会报错，报错如下：</font></p></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240719232435518-1142052473.png"><br>    - 解决方案：<br><img src="/img/blog_page/3427087-20240719232608770-502772972.png"></p><ul><li>安装hexo<ul><li><p>先创建一个文件夹，比如 D:\my_blogs</p></li><li><p>在gitbash里面cd到这个文件夹，或者右键这个文件夹，gitbash here</p></li><li><p>在该目录下 <code>npm install -g hexo-cli</code> ，安装hexo，无视报错</p></li><li><p>用<code>hexo -v</code>验证安装结果<br><img src="/img/blog_page/3427087-20240719233352606-80598922.png"></p></li><li><p>安装完成之后用 <code>hexo init my_blogs</code> 初始化文件夹，即初始化我们的网站</p></li><li><p>完成之后my_blogs中会出现以下目录：<br><img src="/img/blog_page/3427087-20240719233532997-804992529.png"></p></li><li><p>本地预览，输入 <code>hexo generate </code>和 <code>hexo server</code>; <font color=red>这里又出现了一个问题，如下截图：</font></p></li></ul></li></ul><p><img src="/img/blog_page/3427087-20240719234232236-1196576047.png"><br>    - <font color=green>后来发现是我没有在正确的blog文件目录下运行，我在执行<code>hexo init my_blogs</code>的时候，它在我的默认路径下又建立了一个my_blogs的文件夹并把文件放在里面，如下对比，一个是git bash路径，一个是实际路径，<strong>现在需要cd到目标路径去解决问题:</strong></font><br><img src="/img/blog_page/3427087-20240719234625788-1592509022.png"><br><img src="/img/blog_page/3427087-20240719234640065-1964491897.png"><br>    - <code>cd</code>到指定路径就好了，解决如下：<br><img src="/img/blog_page/3427087-20240719234954071-1992605033.png"><br>    - 用浏览器预览给出来的url地址,如下图，<code>ctrl+c</code>可以停止运行。<br><img src="/img/blog_page/3427087-20240719235314116-143027193.png"></p><ul><li>如果想要新建一个md文件，输入 <code>hexo new &#39;filename&#39;</code>, 会生成一个新的md文件，编辑它就行。生成的位置在hexo&#x2F;source&#x2F;_posts 里面，这里的hello world是默认的。<br><img src="/img/blog_page/3427087-20240720000034380-570557826.png"></li></ul><h2 id="github上建立repo"><a href="#github上建立repo" class="headerlink" title="github上建立repo"></a>github上建立repo</h2><ul><li>new repository</li><li>仓库名应该为<code>yourname.github.io</code>,yourname表示你的github账户名。建立同名仓库的目的是以后部署到github page的时候才能够被正确识别</li><li>选择public repo</li><li>初始化readme, 选择initialize this repository with a README<br><img src="/img/blog_page/3427087-20240720000831928-1009625567.png"></li><li>创建成功之后，在建好的项目右侧有个setting按钮，点击它，向下拉到github pages，你会看到如下图所示的网址，访问它，你会发现该项目已经被部署到网络上，你可以通过外网访问它<br><img src="/img/blog_page/3427087-20240720001334765-1351308999.png"></li><li><a href="https://whatsxiaocuncun.github.io/">访问我的个人主页</a></li></ul><h2 id="生成SSH添加到github"><a href="#生成SSH添加到github" class="headerlink" title="生成SSH添加到github"></a>生成SSH添加到github</h2><ul><li>打开git，输入下面命令，连接本地git和远程github<ul><li><code>git config --global user.name</code> &#x2F;&#x2F;输入github用户名</li><li><code>git config --global user.email</code> &#x2F;&#x2F;输入github邮箱</li></ul></li><li>以下命令可以检查用户和邮箱输入对不对<ul><li><code>git config user.name</code></li><li><code>git config user.email</code></li></ul></li><li>输入完账户邮箱之后就可以创建SSH了，虽然我的电脑已经建立过了，但是SSH有一个id_rsa，这是我这台电脑的私钥，意味着一旦我换了一台本地电脑就要重新获取一下。</li><li>SSH的工作原理是：<font color=green>创建了一个密钥，其中id_rsa是本地电脑的私人密钥，不能给别人看。id_rsa.pub是公共密钥，可以给别人看。把这个公共密钥放在github上，这样当我们访问远程github账户的时候，就会用公共密钥来匹配私钥，只有成功匹配了，才能顺利通过git上传文件到github。具体操作我的另一篇博客里面有记录。</font></li><li>SSH添加输入以下命令：<ul><li><code>ssh-keygen -t rsa -C</code> &#x2F;&#x2F;过程中会确认三次，全部ok就行</li><li>把本地生成的id_rsa.pub打开，复制，粘贴到github的SSH and GPC keys部分，title可以随便取。</li></ul></li><li>在git bash上输入命令 <code>ssh -T git@github.com</code> 来验证SSH连接是否成功。<ul><li>但是这个时候可能会返回如下错误：<font color=red><strong>ssh: connect to host github.com port 22: Connection refused</strong></font>。对于此，github给出的解决方案是把命令换成<code>ssh -T git@ssh.github.com</code>，因为有些时候防火墙会拒绝没有https的远程访问。</li><li>如果以上不行，也许是因为代理把22端口禁用了 ，可以试试换成443端口，输入如下命令<code>ssh -T -p 443 git@ssh.github.com</code>,如果行得通，就可以区<code>~/.ssh/config</code>改下默认配置，如下图所示：<br><img src="/img/blog_page/3427087-20240719230030085-1551778106.png"></li></ul></li></ul><h2 id="部署hexo到github"><a href="#部署hexo到github" class="headerlink" title="部署hexo到github"></a>部署hexo到github</h2><ul><li><p>进入到my_blogs根目录，找到配置文件_config.yml，用文本编辑器打开它。<br><img src="/img/blog_page/3427087-20240720001951450-689020907.png"></p></li><li><p>最后一行配置如下，<code>注意键值对冒号后面都有一个空格</code>,注意SSH地址复制github上的：<br><img src="/img/blog_page/3427087-20240720114235132-290291660.png"></p></li><li><p>_config.yml还有一些更多的设置：</p><ul><li>title: &#x2F;&#x2F;网站标题</li><li>subtitle:</li><li>description: &#x2F;&#x2F;网站描述</li><li>keywords: &#x2F;&#x2F;网站关键词</li><li>author: &#x2F;&#x2F;网站作者</li><li>language:zh&#x3D;CN &#x2F;&#x2F;网站语言</li><li>timezone:</li></ul></li><li><p>在git bash输入以下命令：</p><ul><li><code>npm install hexo-deployer-git --save</code> &#x2F;&#x2F;这是安装部署命令，有了它才能用命令部署到github</li></ul></li><li><p>再依次输入以下命令：</p><ul><li><code>hexo clean</code> &#x2F;&#x2F;清楚缓存</li><li><code>hexo generate</code> &#x2F;&#x2F;生成静态文件</li><li><code>hexo deploy</code> &#x2F;&#x2F;部署文件</li></ul></li><li><p>至此，博客搭建就完成了，此时的博客地址是 yourname.github.io </p></li><li><p>页面主题，快速搭建方法如截图：<br><img src="/img/blog_page/3427087-20240720004321299-123735955.png"></p></li><li><p>修改<code>_config.yml</code>和<code>_config.fluid.yml</code>的主题:<br><img src="/img/blog_page/3427087-20240720114321134-1816255091.png"></p></li><li><p>再次:</p><ul><li><code>hexo clean</code></li><li><code>hexo generate</code></li><li><code>hexo deploy</code></li></ul></li><li><p><font color=red><strong>这里出现了一个问题：</strong></font></p><ul><li>当<code>hexo d</code>时<br><img src="/img/blog_page/3427087-20240720010815287-1932721504.png"></li><li>我觉得这是因为_config.yml在配置github地址的时候格式有问题，毕竟时yaml文件，对空格要求很严格,所以我检查了格式,的确repository要敲两个空格，手动敲，不能按table。</li><li>改完后部署，然后又开始告诉我<code>ssh: connect to host github.com port 22: Connection refused</code>了，基于上面的经验。<del>于是我把远程地址前加入了ssh</del>,如图（<font color=red>这是错的github地址，只用知道错在哪，不用参考</font>）：<br><img src="/img/blog_page/3427087-20240720011445926-86638969.png"></li><li>这次直接告诉我<code>ERROR: Repository not found</code>，然后又试过了直接去repo复制SSH都不行（<font color=red>后面发现，这里可能是因为我agent的问题</font>），<br><img src="/img/blog_page/3427087-20240720015625845-240998022.png"></li><li>算了，改回来了，依旧是<code>ssh: connect to host github.com port 22: Connection refused</code>，这次我使用<code>ssh -vT git@github.com</code>去看看ssh过程中发生的详细问题，发现IP是我localhost的地址，头大：<br><img src="/img/blog_page/3427087-20240720102806268-280934147.png"></li><li>用<code>nslookup github.com</code>，其实可以看出github本来的ip,那个publicl.alidns.com就是我使用的DNS服务器以及它的地址，<font color=red>其实这个问题大概率就是DNS解析被污染了，可能是因为被运营商劫持或者使用了某些工具</font>:<br><img src="/img/blog_page/3427087-20240720103641439-1198935444.png"></li><li>（<font color=red>后面发现找不到仓库是我之前的SSH地址不对，所以在hosts里面添加一个IP也是有效的</font>）windows进<code>C:\Windows\System32\drivers\etc\hosts</code>添加一条<code>20.205.243.166 github.com</code>,最后去cmd敲<code>ipconfig /flushdns</code>清除dns缓存试试，<del>我试过之后，依旧被拒绝访问，现在直接告诉我找不到仓库</del>，头大：<br><img src="/img/blog_page/3427087-20240720105018545-145483238.png"></li><li><font color=green><strong>最后：</strong></font>换了个要钱网速快的agent,把<code>github远程SSH地址直接复制</code>到_config.yml和_config.fluid.yml，再次<code>hexo d</code>部署,这次部署成功了。<br><img src="/img/blog_page/3427087-20240720113927805-1824944118.png"></li><li>大功告成，效果：<br><img src="/img/blog_page/3427087-20240720114924963-590770484.png"></li></ul></li></ul><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><ul><li>进入博客目录： <code>cd source/_posts/</code></li><li>新建文章：<code>hexo new post &lt;title&gt;</code> &#x2F;&#x2F;文章会放在_post文件夹内</li><li>另起一页：<code>hexo new page newpage</code> &#x2F;&#x2F;系统自己会在source文件夹下面创建一个newpage文件夹，以及里面的index.md文件，这样对应的访问连接就成了<a href="http://xxxx/newpage">http://xxxx/newpage</a></li><li>草稿：<code>hexo new draft newdraft</code> &#x2F;&#x2F;会把草稿放在source&#x2F;_draft中</li><li>预览草稿：<code>hexo server --draft</code></li><li>发布草稿：<code>hexo publish draft newdraft</code> &#x2F;&#x2F;就会自动把newdraft放到post文件夹中去了。</li><li>图片素材怎么处理：官方建议统一放置在sourec&#x2F;images目录中，并以<img src="/images/image.jpg"></li><li>有些人建议用专业的第三方图床存放这些静态图片素材</li><li>使用hexo admin做本地在线式文章管理，比较直观<ul><li>安装： <code>npm install --save hexo-admin</code></li><li>启动： <code>hexo server -d</code></li><li><code>open http://localhost:4000/admin/</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git application</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>requests, BeauitfulSoup</title>
    <link href="/2024/07/21/requests,%20BeauitfulSoup/"/>
    <url>/2024/07/21/requests,%20BeauitfulSoup/</url>
    
    <content type="html"><![CDATA[<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><h3 id="requests-get-的基本使用"><a href="#requests-get-的基本使用" class="headerlink" title="requests.get()的基本使用"></a>requests.get()的基本使用</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># 导入</span><br><span class="hljs-keyword">import</span> requests<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 不带参数get</span><br><span class="hljs-attr">reponse</span> = requests.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 带参数get</span><br><br>headers = &#123;<span class="hljs-string">&#x27;referer&#x27;</span>: <span class="hljs-string">&#x27;http://xxxxxx.net/&#x27;</span>,<br>           <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0&#x27;</span>&#125;<br>reponse = requests.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>,headers=headers)<br><br><span class="hljs-meta"># 或者这样带参数</span><br>r1 = requests.<span class="hljs-keyword">get</span>(url=<span class="hljs-string">&#x27;http://dict.baidu.com/s&#x27;</span>, <span class="hljs-keyword">params</span>=&#123;<span class="hljs-string">&#x27;wd&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>&#125;)  <br>print(r1.url)<br><br>&gt;&gt;&gt; http:<span class="hljs-comment">//dict.baidu.com/s?wd=python</span><br><br><span class="hljs-meta"># 或者直接用url传参数</span><br>payload = &#123;<span class="hljs-string">&#x27;keyword&#x27;</span>: <span class="hljs-string">&#x27;香港&#x27;</span>, <span class="hljs-string">&#x27;salecityid&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>&#125;<br>r = requests.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;http://m.ctrip.com/webapp/tourvisa/visa_list&quot;</span>, <span class="hljs-keyword">params</span>=payload) <br>print（r.url） <br><br>&gt;&gt;&gt; http:<span class="hljs-comment">//m.ctrip.com/webapp/tourvisa/visa_list?salecityid=2&amp;keyword=香港</span><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 获取文本</span><br>reponse.<span class="hljs-built_in">text</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 获取图片和视频内容</span><br>reponse.content<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 获取编码</span><br><span class="hljs-attr">reponse.encoding</span> = <span class="hljs-string">&#x27;utf-8&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 获取状态码</span><br>reponse.status_code<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 超时时间设置</span><br>r = requests.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;http://m.ctrip.com&#x27;</span>, <span class="hljs-attribute">timeout</span>=0.001)<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#第一次get/post的时候网站会返回一个cookies，有些时候post登录需要带cookies,以下语句用于获取cookies</span><br><span class="hljs-attr">reponse_cookie_dic</span> = reponse.cookies.get_dict()<br></code></pre></td></tr></table></figure><h3 id="requests-post-的基本使用，提交登录信息或者把数据传给服务器的时候可以用"><a href="#requests-post-的基本使用，提交登录信息或者把数据传给服务器的时候可以用" class="headerlink" title="requests.post()的基本使用，提交登录信息或者把数据传给服务器的时候可以用"></a>requests.post()的基本使用，提交<code>登录信息</code>或者把数据传给服务器的时候可以用</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># post的基本使用方法</span><br><br><span class="hljs-comment"># 提交的参数</span><br>post_data = &#123;<br>    <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&#x27;86&#x27;</span>+<span class="hljs-string">&#x27;01234567890&#x27;</span>,<br>    <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span>,<br>    <span class="hljs-string">&#x27;oneMonth&#x27;</span>: 1  # 一个月内免登陆<br>&#125;<br><span class="hljs-comment"># 一定要添加浏览器，不然可能会遇到网络防火墙</span><br>headers=&#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:58.0) Gecko/20100101 Firefox/58.0&#x27;</span>&#125;<br><br>response = requests.post(<br>    <span class="hljs-attribute">url</span>=<span class="hljs-string">&#x27;https://xxxxx.com/login&#x27;</span>,<br>    headers =headers,<br>    <span class="hljs-attribute">data</span>=post_data,<br>)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#返回的cookies</span><br>reponse_cookie_dic = reponse.cookies.get_dict()<br><br><span class="hljs-comment"># 用上面得到的cookies再次请求</span><br>response = requests.post(<br>    <span class="hljs-attribute">url</span>=<span class="hljs-string">&#x27;https://xxxxx.com/login&#x27;</span>,<br>    headers =headers,<br>    <span class="hljs-attribute">data</span>=post_data,<br>    <span class="hljs-attribute">cookies</span>=reponse_cookie_dic<br>)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 使用代理来避免IP重复，格式是proxy_dict=&#123;&#x27;order&#x27;&quot;:&#x27;ip&#x27;+&#x27;:&#x27;+&#x27;port&#x27;&#125;的字典,可以搞一个ip代理池，用完就丢。</span><br><span class="hljs-comment"># proxies处就填入</span><br>response = requests.<span class="hljs-built_in">get</span>(target_url, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">proxies</span>=proxy_dict, <span class="hljs-attribute">timeout</span>=30)<br><br></code></pre></td></tr></table></figure><h3 id="requests-session，自动保持cookies-不需要手动维护cookies"><a href="#requests-session，自动保持cookies-不需要手动维护cookies" class="headerlink" title="requests.session，自动保持cookies,不需要手动维护cookies"></a>requests.session，自动保持cookies,不需要手动维护cookies</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">s = requests.Session()<br><br><span class="hljs-comment"># get请求</span><br>target_response = s.<span class="hljs-built_in">get</span>(<span class="hljs-attribute">url</span>=target_url, <span class="hljs-attribute">headers</span>=target_headers)<br></code></pre></td></tr></table></figure><h3 id="配置超时及重连次数"><a href="#配置超时及重连次数" class="headerlink" title="配置超时及重连次数"></a>配置超时及重连次数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> requests.adapters <span class="hljs-keyword">import</span> HTTPAdapter<br>headers = <span class="hljs-built_in">dict</span>() <span class="hljs-comment">#创建字典</span><br>headers[<span class="hljs-string">&quot;User-Agent&quot;</span>] = <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span><br>headers[<span class="hljs-string">&quot;Accept&quot;</span>] = <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span><br>headers[<span class="hljs-string">&quot;Accept-Encoding&quot;</span>] = <span class="hljs-string">&quot;gzip, deflate, sdch&quot;</span><br>headers[<span class="hljs-string">&quot;Accept-Language&quot;</span>] = <span class="hljs-string">&quot;zh-CN,zh;q=0.8&quot;</span><br>headers[<span class="hljs-string">&quot;Accept-Language&quot;</span>] = <span class="hljs-string">&quot;zh-CN,zh;q=0.8&quot;</span><br>request_retry = HTTPAdapter(max_retries=<span class="hljs-number">3</span>) <span class="hljs-comment">#配置超时及重连次数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_get</span>(<span class="hljs-params">url, refer=<span class="hljs-literal">None</span></span>):<br>    session = requests.session()<br>    session.headers = headers<br>    <span class="hljs-keyword">if</span> refer:<br>        headers[<span class="hljs-string">&quot;Referer&quot;</span>] = refer<br>    session.mount(<span class="hljs-string">&#x27;https://&#x27;</span>, request_retry) <span class="hljs-comment">#mount挂载特定对话 代理</span><br>    session.mount(<span class="hljs-string">&#x27;http://&#x27;</span>, request_retry)<br>    <span class="hljs-keyword">return</span> session.get(url)<br></code></pre></td></tr></table></figure><h3 id="最简单的实现：靠random模块做ip池和user-agent的随机分配"><a href="#最简单的实现：靠random模块做ip池和user-agent的随机分配" class="headerlink" title="最简单的实现：靠random模块做ip池和user-agent的随机分配"></a>最简单的实现：靠random模块做ip池和user-agent的随机分配</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#设置用户代理池</span><br><span class="hljs-attr">header_list</span> = [<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0&quot;</span>,<br><span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3704.400 QQBrowser/10.4.3587.400&quot;</span>]<br><span class="hljs-comment">#设置ip池</span><br><span class="hljs-attr">ip_pools</span> = [<span class="hljs-string">&quot;123.54.44.4：9999&quot;</span>,<br><span class="hljs-string">&quot;110.243.13.120:9999&quot;</span>, <br><span class="hljs-string">&quot;183.166.97.101:9999&quot;</span>]<br><br><span class="hljs-attr">random_ip</span> = random.choice(ip_pools)<br><span class="hljs-attr">header</span> = (<span class="hljs-string">&quot;User-Agent&quot;</span>, random.choice(header_list))<br></code></pre></td></tr></table></figure><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 导入</span><br><span class="hljs-keyword">from</span> bs4 import BeautifulSoup<br><br><span class="hljs-comment"># 解析，&#x27;html.parser&#x27;也可以改成&#x27;lxml&#x27;格式，lxml是唯一支持xml格式的解析器</span><br>soup = BeautifulSoup(reponse.text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment"># 找到第一个标签，可以是a,div等任意html支持的标签</span><br>tag1 = soup.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#找到第一个id是d1的标签</span><br>tag2 = soup.<span class="hljs-built_in">find</span>(<span class="hljs-attribute">id</span>=<span class="hljs-string">&#x27;d1&#x27;</span>)<br><br><span class="hljs-comment"># 找到第一个id是d1的div标签</span><br>tag3 = <span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;div&#x27;</span>,<span class="hljs-attribute">id</span>=<span class="hljs-string">&#x27;d1&#x27;</span>)<br><br><span class="hljs-comment"># find_all,返回所有满足条件的标签，这是个可迭代对象，用for遍历</span><br><span class="hljs-comment"># attrs填满足查询条件的属性</span><br>all_div = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>,attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>:<span class="hljs-string">&#x27;card&#x27;</span>&#125;)<br><span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> all_div:<br>    <span class="hljs-built_in">print</span>(div.img[<span class="hljs-string">&#x27;src&#x27;</span>])<br><br><span class="hljs-comment"># select CSS选择器</span><br>soup.select(<span class="hljs-string">&quot;title&quot;</span>)<br>soup.select(<span class="hljs-string">&quot;body a&quot;</span>)<br>soup.select(<span class="hljs-string">&quot;#link1&quot;</span>)<br>soup.select(<span class="hljs-string">&#x27;a[href]&#x27;</span>)<br>soup.select(<span class="hljs-string">&quot;p &gt; a&quot;</span>)<br>li_list = soup.select(<span class="hljs-string">&quot;div.postlist ul#pins li&quot;</span>)<br>href = bs(response.content, <span class="hljs-string">&quot;lxml&quot;</span>).select_one(<span class="hljs-string">&quot;div.main-image img&quot;</span>).attrs[<span class="hljs-string">&quot;src&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim"># <span class="hljs-built_in">mkdir</span>直接在当前.<span class="hljs-keyword">py</span>文件的文件夹路径平级建立一个文件<br><span class="hljs-keyword">if</span> not os.path.<span class="hljs-built_in">exists</span>(<span class="hljs-string">&quot;img&quot;</span>):<br>    os.<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;img&quot;</span>)<br><span class="hljs-keyword">if</span> not os.path.<span class="hljs-built_in">exists</span>(<span class="hljs-string">&quot;img/&quot;</span> + str(start_num)):<br>    os.<span class="hljs-built_in">mkdir</span>(<span class="hljs-string">&quot;img/&quot;</span> + str(start_num))<br>with <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;img/&quot;</span> + str(start_num) + <span class="hljs-string">&quot;/&quot;</span> + img_name + <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fs:<br>    fs.<span class="hljs-keyword">write</span>(src_reponse.content)<br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">&quot;download success!&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>basic notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西门子PLC的大端模式</title>
    <link href="/2024/07/21/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E7%9A%84%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/07/21/%E8%A5%BF%E9%97%A8%E5%AD%90PLC%E7%9A%84%E5%A4%A7%E7%AB%AF%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-大端模式和小端模式"><a href="#1-大端模式和小端模式" class="headerlink" title="1. 大端模式和小端模式"></a>1. 大端模式和小端模式</h2><ul><li>大端模式：高位字节地址在内存的低位地址端，低位字节地址在内存的高位地址端。</li><li>小端模式：高位字节地址在内存的低高地址端，低位字节地址在内存的低位地址端。</li></ul><h2 id="2-西门子PLC中一个word的表示"><a href="#2-西门子PLC中一个word的表示" class="headerlink" title="2. 西门子PLC中一个word的表示"></a>2. 西门子PLC中一个word的表示</h2><ul><li>如图：<code>IW17 = IB17 + IB18</code></li><li>其中IB17在高位地址端，IB18在低位地址端<br><img src="/img/blog_page/3427087-20240708163743451-558953701.png"></li></ul><h2 id="3-高字节低字位和低字节高字位"><a href="#3-高字节低字位和低字节高字位" class="headerlink" title="3. 高字节低字位和低字节高字位"></a>3. 高字节低字位和低字节高字位</h2><ul><li>最高有效位（MSB）：byte的最高位，一个byte内西门子的最高位通常在二进制的最左边</li><li>最低有效位（LSB）：byte的最低位，一个byte内西门子的最低位通常在二进制的最右边</li></ul><h2 id="4-WORD和DWORD展开"><a href="#4-WORD和DWORD展开" class="headerlink" title="4. WORD和DWORD展开"></a>4. WORD和DWORD展开</h2><ul><li>如果现在有MD100：<ul><li>MD100 &#x3D; MW100 + MW102</li><li>MD100 &#x3D; MB100 + MB101 + MB102 + MB103</li><li>MD100 &#x3D; <u>M100.7 … M100.0</u> + <u>M101.7 … M101.0</u> + <u>M102.7 … M102.0</u> + <u>M103.7 … M103.0</u></li><li>注意每个byte中的MSB,LSB顺序不变。</li></ul></li></ul><h2 id="5-1500PLC的模式转换指令"><a href="#5-1500PLC的模式转换指令" class="headerlink" title="5. 1500PLC的模式转换指令"></a>5. 1500PLC的模式转换指令</h2><ul><li><p>如图：<br><img src="/img/blog_page/3427087-20240708163807181-1092661898.png"><br><img src="/img/blog_page/3427087-20240708163832175-1887297527.png"></p></li><li><p>在西门子的HMI侧,应该是用的小端模式，报警字对齐的时候需要注意</p></li><li><p>非西门子的PLC，有些品牌会用小端模式。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PLC related</category>
      
      <category>1200/1500PLC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>industrial control</tag>
      
      <tag>PLC part</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/19/hello-world/"/>
    <url>/2024/07/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
